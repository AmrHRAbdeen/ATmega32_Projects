
AVR_ADC_TestCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002b6e  00002be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001998  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000efd  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005485  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000055e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000077b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000088ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000983c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a50c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#define AVR_ADCSRA ((Register*) 0x26)
#define AVR_ADCMUX ((Register*) 0x27)
************************************/

int main(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	c8 56       	subi	r28, 0x68	; 104
     c98:	d0 40       	sbci	r29, 0x00	; 0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_value=0;
     ca4:	1c 82       	std	Y+4, r1	; 0x04
     ca6:	1b 82       	std	Y+3, r1	; 0x03
	u8 *PTR=(u8*)&ADC_value;
     ca8:	ce 01       	movw	r24, r28
     caa:	03 96       	adiw	r24, 0x03	; 3
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	char snum[100];
	DDRA=0x00; /*Make PortA as input*/
     cb0:	ea e3       	ldi	r30, 0x3A	; 58
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1

	ADMUX=0xC0; /*2.56 Vref , ADC single Ended input (one channel) , Data will be right Adjusted*/
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 ec       	ldi	r24, 0xC0	; 192
     cbc:	80 83       	st	Z, r24
	LCD_Init();
     cbe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_Init>

while(1)
{
	ADCSRA=0x87; /*Make ADC enabled and select clk/128*/
     cc2:	e6 e2       	ldi	r30, 0x26	; 38
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	87 e8       	ldi	r24, 0x87	; 135
     cc8:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADSC); /*Start Conversion*/
     cca:	a6 e2       	ldi	r26, 0x26	; 38
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e6 e2       	ldi	r30, 0x26	; 38
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	8c 93       	st	X, r24
	while((ADCSRA&(1<<ADIF)) == 0); /*Wait for conversion to finish*/
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	80 71       	andi	r24, 0x10	; 16
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	b9 f3       	breq	.-18     	; 0xcd8 <main+0x4a>
	*PTR = ADCL;
     cea:	e4 e2       	ldi	r30, 0x24	; 36
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	80 83       	st	Z, r24
	*(PTR+1) = ADCH;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	dc 01       	movw	r26, r24
     cfc:	11 96       	adiw	r26, 0x01	; 1
     cfe:	e5 e2       	ldi	r30, 0x25	; 37
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8c 93       	st	X, r24
	// convert 123 to string [buf]
	sprintf(snum, "%d", ADC_value);
     d06:	2b 81       	ldd	r18, Y+3	; 0x03
     d08:	3c 81       	ldd	r19, Y+4	; 0x04
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <main+0x7e>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <main+0x80>
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <main+0x82>
     d10:	ed b7       	in	r30, 0x3d	; 61
     d12:	fe b7       	in	r31, 0x3e	; 62
     d14:	31 96       	adiw	r30, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	05 96       	adiw	r24, 0x05	; 5
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
     d1e:	80 e6       	ldi	r24, 0x60	; 96
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	93 83       	std	Z+3, r25	; 0x03
     d24:	82 83       	std	Z+2, r24	; 0x02
     d26:	35 83       	std	Z+5, r19	; 0x05
     d28:	24 83       	std	Z+4, r18	; 0x04
     d2a:	0e 94 14 13 	call	0x2628	; 0x2628 <sprintf>
     d2e:	8d b7       	in	r24, 0x3d	; 61
     d30:	9e b7       	in	r25, 0x3e	; 62
     d32:	06 96       	adiw	r24, 0x06	; 6
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	9e bf       	out	0x3e, r25	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	8d bf       	out	0x3d, r24	; 61
	LCD_String_xy(0,0,snum);
     d3e:	9e 01       	movw	r18, r28
     d40:	2b 5f       	subi	r18, 0xFB	; 251
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	a9 01       	movw	r20, r18
     d4e:	0e 94 26 12 	call	0x244c	; 0x244c <LCD_String_xy>
     d52:	b7 cf       	rjmp	.-146    	; 0xcc2 <main+0x34>

00000d54 <DIO_voidInit>:




void DIO_voidInit(void)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	#endif

	/*																									  */
	/*																									  */
	/******************************************************************************************************/
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
     d5c:	ea e3       	ldi	r30, 0x3A	; 58
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
     d64:	e7 e3       	ldi	r30, 0x37	; 55
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
     d6c:	e4 e3       	ldi	r30, 0x34	; 52
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
     d74:	e1 e3       	ldi	r30, 0x31	; 49
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 ef       	ldi	r24, 0xF0	; 240
     d7a:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
     d7c:	eb e3       	ldi	r30, 0x3B	; 59
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8e ef       	ldi	r24, 0xFE	; 254
     d82:	80 83       	st	Z, r24
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
     d84:	e8 e3       	ldi	r30, 0x38	; 56
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	80 83       	st	Z, r24
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
     d8c:	e5 e3       	ldi	r30, 0x35	; 53
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	80 83       	st	Z, r24
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
     d94:	e2 e3       	ldi	r30, 0x32	; 50
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	27 97       	sbiw	r28, 0x07	; 7
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	8c 83       	std	Y+4, r24	; 0x04
     db8:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
     dba:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	80 32       	cpi	r24, 0x20	; 32
     dc0:	30 f4       	brcc	.+12     	; 0xdce <DIO_u8SetPinDirection+0x2c>
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	31 f0       	breq	.+12     	; 0xdd4 <DIO_u8SetPinDirection+0x32>
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	88 23       	and	r24, r24
     dcc:	19 f0       	breq	.+6      	; 0xdd4 <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	ce c0       	rjmp	.+412    	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	87 70       	andi	r24, 0x07	; 7
     dd8:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	86 95       	lsr	r24
     dde:	86 95       	lsr	r24
     de0:	86 95       	lsr	r24
     de2:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3f 83       	std	Y+7, r19	; 0x07
     dec:	2e 83       	std	Y+6, r18	; 0x06
     dee:	6e 81       	ldd	r22, Y+6	; 0x06
     df0:	7f 81       	ldd	r23, Y+7	; 0x07
     df2:	61 30       	cpi	r22, 0x01	; 1
     df4:	71 05       	cpc	r23, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_u8SetPinDirection+0x58>
     df8:	41 c0       	rjmp	.+130    	; 0xe7c <DIO_u8SetPinDirection+0xda>
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	9f 81       	ldd	r25, Y+7	; 0x07
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	91 05       	cpc	r25, r1
     e02:	34 f4       	brge	.+12     	; 0xe10 <DIO_u8SetPinDirection+0x6e>
     e04:	2e 81       	ldd	r18, Y+6	; 0x06
     e06:	3f 81       	ldd	r19, Y+7	; 0x07
     e08:	21 15       	cp	r18, r1
     e0a:	31 05       	cpc	r19, r1
     e0c:	71 f0       	breq	.+28     	; 0xe2a <DIO_u8SetPinDirection+0x88>
     e0e:	b0 c0       	rjmp	.+352    	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
     e10:	6e 81       	ldd	r22, Y+6	; 0x06
     e12:	7f 81       	ldd	r23, Y+7	; 0x07
     e14:	62 30       	cpi	r22, 0x02	; 2
     e16:	71 05       	cpc	r23, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_u8SetPinDirection+0x7a>
     e1a:	59 c0       	rjmp	.+178    	; 0xece <DIO_u8SetPinDirection+0x12c>
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	91 05       	cpc	r25, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <DIO_u8SetPinDirection+0x86>
     e26:	7c c0       	rjmp	.+248    	; 0xf20 <DIO_u8SetPinDirection+0x17e>
     e28:	a3 c0       	rjmp	.+326    	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	88 23       	and	r24, r24
     e2e:	21 f0       	breq	.+8      	; 0xe38 <DIO_u8SetPinDirection+0x96>
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	09 f0       	breq	.+2      	; 0xe38 <DIO_u8SetPinDirection+0x96>
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	aa e3       	ldi	r26, 0x3A	; 58
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ea e3       	ldi	r30, 0x3A	; 58
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_u8SetPinDirection+0xb2>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	2a 95       	dec	r18
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_u8SetPinDirection+0xae>
     e58:	80 95       	com	r24
     e5a:	48 23       	and	r20, r24
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b9 01       	movw	r22, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_u8SetPinDirection+0xce>
     e6c:	66 0f       	add	r22, r22
     e6e:	77 1f       	adc	r23, r23
     e70:	8a 95       	dec	r24
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_u8SetPinDirection+0xca>
     e74:	cb 01       	movw	r24, r22
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	7a c0       	rjmp	.+244    	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	88 23       	and	r24, r24
     e80:	21 f0       	breq	.+8      	; 0xe8a <DIO_u8SetPinDirection+0xe8>
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f0       	breq	.+2      	; 0xe8a <DIO_u8SetPinDirection+0xe8>
     e88:	1d 82       	std	Y+5, r1	; 0x05
     e8a:	a7 e3       	ldi	r26, 0x37	; 55
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e3       	ldi	r30, 0x37	; 55
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_u8SetPinDirection+0x104>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	2a 95       	dec	r18
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_u8SetPinDirection+0x100>
     eaa:	80 95       	com	r24
     eac:	48 23       	and	r20, r24
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b9 01       	movw	r22, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_u8SetPinDirection+0x120>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	8a 95       	dec	r24
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_u8SetPinDirection+0x11c>
     ec6:	cb 01       	movw	r24, r22
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	51 c0       	rjmp	.+162    	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	88 23       	and	r24, r24
     ed2:	21 f0       	breq	.+8      	; 0xedc <DIO_u8SetPinDirection+0x13a>
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	09 f0       	breq	.+2      	; 0xedc <DIO_u8SetPinDirection+0x13a>
     eda:	1d 82       	std	Y+5, r1	; 0x05
     edc:	a4 e3       	ldi	r26, 0x34	; 52
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8SetPinDirection+0x156>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	2a 95       	dec	r18
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8SetPinDirection+0x152>
     efc:	80 95       	com	r24
     efe:	48 23       	and	r20, r24
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	b9 01       	movw	r22, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_u8SetPinDirection+0x172>
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	8a 95       	dec	r24
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_u8SetPinDirection+0x16e>
     f18:	cb 01       	movw	r24, r22
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	28 c0       	rjmp	.+80     	; 0xf70 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	88 23       	and	r24, r24
     f24:	21 f0       	breq	.+8      	; 0xf2e <DIO_u8SetPinDirection+0x18c>
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <DIO_u8SetPinDirection+0x18c>
     f2c:	1d 82       	std	Y+5, r1	; 0x05
     f2e:	a1 e3       	ldi	r26, 0x31	; 49
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e1 e3       	ldi	r30, 0x31	; 49
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_u8SetPinDirection+0x1a8>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	2a 95       	dec	r18
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_u8SetPinDirection+0x1a4>
     f4e:	80 95       	com	r24
     f50:	48 23       	and	r20, r24
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	b9 01       	movw	r22, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_u8SetPinDirection+0x1c4>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	8a 95       	dec	r24
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_u8SetPinDirection+0x1c0>
     f6a:	cb 01       	movw	r24, r22
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f72:	27 96       	adiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DIO_u8SetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
/*	OUTPUT:                                              */
/*			return ERROR STATE                           */
/*********************************************************/
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	27 97       	sbiw	r28, 0x07	; 7
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	8c 83       	std	Y+4, r24	; 0x04
     f9a:	6d 83       	std	Y+5, r22	; 0x05

   u8 Local_u8Error=ERROR_OK;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	80 32       	cpi	r24, 0x20	; 32
     fa2:	30 f4       	brcc	.+12     	; 0xfb0 <DIO_u8SetPinValue+0x2c>
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <DIO_u8SetPinValue+0x32>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	88 23       	and	r24, r24
     fae:	19 f0       	breq	.+6      	; 0xfb6 <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	ce c0       	rjmp	.+412    	; 0x1152 <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3f 83       	std	Y+7, r19	; 0x07
     fce:	2e 83       	std	Y+6, r18	; 0x06
     fd0:	6e 81       	ldd	r22, Y+6	; 0x06
     fd2:	7f 81       	ldd	r23, Y+7	; 0x07
     fd4:	61 30       	cpi	r22, 0x01	; 1
     fd6:	71 05       	cpc	r23, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <DIO_u8SetPinValue+0x58>
     fda:	41 c0       	rjmp	.+130    	; 0x105e <DIO_u8SetPinValue+0xda>
     fdc:	8e 81       	ldd	r24, Y+6	; 0x06
     fde:	9f 81       	ldd	r25, Y+7	; 0x07
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	91 05       	cpc	r25, r1
     fe4:	34 f4       	brge	.+12     	; 0xff2 <DIO_u8SetPinValue+0x6e>
     fe6:	2e 81       	ldd	r18, Y+6	; 0x06
     fe8:	3f 81       	ldd	r19, Y+7	; 0x07
     fea:	21 15       	cp	r18, r1
     fec:	31 05       	cpc	r19, r1
     fee:	71 f0       	breq	.+28     	; 0x100c <DIO_u8SetPinValue+0x88>
     ff0:	b0 c0       	rjmp	.+352    	; 0x1152 <DIO_u8SetPinValue+0x1ce>
     ff2:	6e 81       	ldd	r22, Y+6	; 0x06
     ff4:	7f 81       	ldd	r23, Y+7	; 0x07
     ff6:	62 30       	cpi	r22, 0x02	; 2
     ff8:	71 05       	cpc	r23, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <DIO_u8SetPinValue+0x7a>
     ffc:	59 c0       	rjmp	.+178    	; 0x10b0 <DIO_u8SetPinValue+0x12c>
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_u8SetPinValue+0x86>
    1008:	7c c0       	rjmp	.+248    	; 0x1102 <DIO_u8SetPinValue+0x17e>
    100a:	a3 c0       	rjmp	.+326    	; 0x1152 <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	88 23       	and	r24, r24
    1010:	21 f0       	breq	.+8      	; 0x101a <DIO_u8SetPinValue+0x96>
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <DIO_u8SetPinValue+0x96>
    1018:	1d 82       	std	Y+5, r1	; 0x05
    101a:	ab e3       	ldi	r26, 0x3B	; 59
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	eb e3       	ldi	r30, 0x3B	; 59
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8SetPinValue+0xb2>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	2a 95       	dec	r18
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8SetPinValue+0xae>
    103a:	80 95       	com	r24
    103c:	48 23       	and	r20, r24
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	b9 01       	movw	r22, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_u8SetPinValue+0xce>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_u8SetPinValue+0xca>
    1056:	cb 01       	movw	r24, r22
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	7a c0       	rjmp	.+244    	; 0x1152 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	88 23       	and	r24, r24
    1062:	21 f0       	breq	.+8      	; 0x106c <DIO_u8SetPinValue+0xe8>
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <DIO_u8SetPinValue+0xe8>
    106a:	1d 82       	std	Y+5, r1	; 0x05
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_u8SetPinValue+0x104>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	2a 95       	dec	r18
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_u8SetPinValue+0x100>
    108c:	80 95       	com	r24
    108e:	48 23       	and	r20, r24
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	b9 01       	movw	r22, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_u8SetPinValue+0x120>
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_u8SetPinValue+0x11c>
    10a8:	cb 01       	movw	r24, r22
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	51 c0       	rjmp	.+162    	; 0x1152 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	88 23       	and	r24, r24
    10b4:	21 f0       	breq	.+8      	; 0x10be <DIO_u8SetPinValue+0x13a>
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f0       	breq	.+2      	; 0x10be <DIO_u8SetPinValue+0x13a>
    10bc:	1d 82       	std	Y+5, r1	; 0x05
    10be:	a5 e3       	ldi	r26, 0x35	; 53
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e3       	ldi	r30, 0x35	; 53
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinValue+0x156>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	2a 95       	dec	r18
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinValue+0x152>
    10de:	80 95       	com	r24
    10e0:	48 23       	and	r20, r24
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	b9 01       	movw	r22, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_u8SetPinValue+0x172>
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_u8SetPinValue+0x16e>
    10fa:	cb 01       	movw	r24, r22
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	28 c0       	rjmp	.+80     	; 0x1152 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	88 23       	and	r24, r24
    1106:	21 f0       	breq	.+8      	; 0x1110 <DIO_u8SetPinValue+0x18c>
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	09 f0       	breq	.+2      	; 0x1110 <DIO_u8SetPinValue+0x18c>
    110e:	1d 82       	std	Y+5, r1	; 0x05
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_u8SetPinValue+0x1a8>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	2a 95       	dec	r18
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_u8SetPinValue+0x1a4>
    1130:	80 95       	com	r24
    1132:	48 23       	and	r20, r24
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	b9 01       	movw	r22, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinValue+0x1c4>
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinValue+0x1c0>
    114c:	cb 01       	movw	r24, r22
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1154:	27 96       	adiw	r28, 0x07	; 7
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	28 97       	sbiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	7e 83       	std	Y+6, r23	; 0x06
    117e:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    1180:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	80 32       	cpi	r24, 0x20	; 32
    1186:	20 f4       	brcc	.+8      	; 0x1190 <DIO_u8GetPinValue+0x2a>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	19 f4       	brne	.+6      	; 0x1196 <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	88 c0       	rjmp	.+272    	; 0x12a6 <DIO_u8GetPinValue+0x140>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	87 70       	andi	r24, 0x07	; 7
    119a:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	86 95       	lsr	r24
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	38 87       	std	Y+8, r19	; 0x08
    11ae:	2f 83       	std	Y+7, r18	; 0x07
    11b0:	4f 81       	ldd	r20, Y+7	; 0x07
    11b2:	58 85       	ldd	r21, Y+8	; 0x08
    11b4:	41 30       	cpi	r20, 0x01	; 1
    11b6:	51 05       	cpc	r21, r1
    11b8:	79 f1       	breq	.+94     	; 0x1218 <DIO_u8GetPinValue+0xb2>
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	91 05       	cpc	r25, r1
    11c2:	34 f4       	brge	.+12     	; 0x11d0 <DIO_u8GetPinValue+0x6a>
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	38 85       	ldd	r19, Y+8	; 0x08
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	69 f0       	breq	.+26     	; 0x11e8 <DIO_u8GetPinValue+0x82>
    11ce:	6b c0       	rjmp	.+214    	; 0x12a6 <DIO_u8GetPinValue+0x140>
    11d0:	4f 81       	ldd	r20, Y+7	; 0x07
    11d2:	58 85       	ldd	r21, Y+8	; 0x08
    11d4:	42 30       	cpi	r20, 0x02	; 2
    11d6:	51 05       	cpc	r21, r1
    11d8:	b9 f1       	breq	.+110    	; 0x1248 <DIO_u8GetPinValue+0xe2>
    11da:	8f 81       	ldd	r24, Y+7	; 0x07
    11dc:	98 85       	ldd	r25, Y+8	; 0x08
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_u8GetPinValue+0x80>
    11e4:	49 c0       	rjmp	.+146    	; 0x1278 <DIO_u8GetPinValue+0x112>
    11e6:	5f c0       	rjmp	.+190    	; 0x12a6 <DIO_u8GetPinValue+0x140>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
    11e8:	a9 e3       	ldi	r26, 0x39	; 57
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e9 e3       	ldi	r30, 0x39	; 57
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8GetPinValue+0x9e>
    1200:	55 95       	asr	r21
    1202:	47 95       	ror	r20
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8GetPinValue+0x9a>
    1208:	ca 01       	movw	r24, r20
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	8c 93       	st	X, r24
    120e:	8c 91       	ld	r24, X
    1210:	ed 81       	ldd	r30, Y+5	; 0x05
    1212:	fe 81       	ldd	r31, Y+6	; 0x06
    1214:	80 83       	st	Z, r24
    1216:	47 c0       	rjmp	.+142    	; 0x12a6 <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
    1218:	a6 e3       	ldi	r26, 0x36	; 54
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e6 e3       	ldi	r30, 0x36	; 54
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8GetPinValue+0xce>
    1230:	55 95       	asr	r21
    1232:	47 95       	ror	r20
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8GetPinValue+0xca>
    1238:	ca 01       	movw	r24, r20
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	8c 93       	st	X, r24
    123e:	8c 91       	ld	r24, X
    1240:	ed 81       	ldd	r30, Y+5	; 0x05
    1242:	fe 81       	ldd	r31, Y+6	; 0x06
    1244:	80 83       	st	Z, r24
    1246:	2f c0       	rjmp	.+94     	; 0x12a6 <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
    1248:	a3 e3       	ldi	r26, 0x33	; 51
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e3       	ldi	r30, 0x33	; 51
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8GetPinValue+0xfe>
    1260:	55 95       	asr	r21
    1262:	47 95       	ror	r20
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8GetPinValue+0xfa>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	8c 93       	st	X, r24
    126e:	8c 91       	ld	r24, X
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	80 83       	st	Z, r24
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
    1278:	a0 e3       	ldi	r26, 0x30	; 48
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e0 e3       	ldi	r30, 0x30	; 48
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8GetPinValue+0x12e>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8GetPinValue+0x12a>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	8c 93       	st	X, r24
    129e:	8c 91       	ld	r24, X
    12a0:	ed 81       	ldd	r30, Y+5	; 0x05
    12a2:	fe 81       	ldd	r31, Y+6	; 0x06
    12a4:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12a8:	28 96       	adiw	r28, 0x08	; 8
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_u8SetPortDirection+0x6>
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    12ca:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_u8SetPortnValue+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_u8SetPortnValue+0x8>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    12f0:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	18 f0       	brcs	.+6      	; 0x12fe <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	32 c0       	rjmp	.+100    	; 0x1362 <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	2c 83       	std	Y+4, r18	; 0x04
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	91 05       	cpc	r25, r1
    1310:	d1 f0       	breq	.+52     	; 0x1346 <DIO_u8SetPortnValue+0x68>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	2c f4       	brge	.+10     	; 0x1326 <DIO_u8SetPortnValue+0x48>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	61 f0       	breq	.+24     	; 0x133c <DIO_u8SetPortnValue+0x5e>
    1324:	1e c0       	rjmp	.+60     	; 0x1362 <DIO_u8SetPortnValue+0x84>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <DIO_u8SetPortnValue+0x72>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	91 05       	cpc	r25, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <DIO_u8SetPortnValue+0x7c>
    133a:	13 c0       	rjmp	.+38     	; 0x1362 <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	80 83       	st	Z, r24
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	80 83       	st	Z, r24
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
    1350:	e5 e3       	ldi	r30, 0x35	; 53
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	80 83       	st	Z, r24
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_u8GetPortnValue+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8GetPortnValue+0x8>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_u8GetPortnValue+0xa>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	7c 83       	std	Y+4, r23	; 0x04
    1386:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    1388:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	18 f0       	brcs	.+6      	; 0x1396 <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	3a c0       	rjmp	.+116    	; 0x140a <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	e1 f0       	breq	.+56     	; 0x13e2 <DIO_u8GetPortnValue+0x6e>
    13aa:	2d 81       	ldd	r18, Y+5	; 0x05
    13ac:	3e 81       	ldd	r19, Y+6	; 0x06
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <DIO_u8GetPortnValue+0x4a>
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <DIO_u8GetPortnValue+0x60>
    13bc:	26 c0       	rjmp	.+76     	; 0x140a <DIO_u8GetPortnValue+0x96>
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <DIO_u8GetPortnValue+0x7c>
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <DIO_u8GetPortnValue+0x8a>
    13d2:	1b c0       	rjmp	.+54     	; 0x140a <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
    13d4:	e9 e3       	ldi	r30, 0x39	; 57
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	80 83       	st	Z, r24
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
    13e2:	e6 e3       	ldi	r30, 0x36	; 54
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ea:	fc 81       	ldd	r31, Y+4	; 0x04
    13ec:	80 83       	st	Z, r24
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
    13f0:	e3 e3       	ldi	r30, 0x33	; 51
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	80 83       	st	Z, r24
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	eb 81       	ldd	r30, Y+3	; 0x03
    1406:	fc 81       	ldd	r31, Y+4	; 0x04
    1408:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	26 96       	adiw	r28, 0x06	; 6
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <LCD_Command>:
#define RS PB0				/* Define Register Select pin */
#define EN PB1 				/* Define Enable signal pin */


void LCD_Command( unsigned char cmnd )
{
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	c7 55       	subi	r28, 0x57	; 87
    142c:	d0 40       	sbci	r29, 0x00	; 0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	fe 01       	movw	r30, r28
    143a:	e9 5a       	subi	r30, 0xA9	; 169
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	98 2f       	mov	r25, r24
    144c:	9f 70       	andi	r25, 0x0F	; 15
    144e:	fe 01       	movw	r30, r28
    1450:	e9 5a       	subi	r30, 0xA9	; 169
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	80 7f       	andi	r24, 0xF0	; 240
    1458:	89 2b       	or	r24, r25
    145a:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    145c:	a8 e3       	ldi	r26, 0x38	; 56
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e8 e3       	ldi	r30, 0x38	; 56
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8e 7f       	andi	r24, 0xFE	; 254
    1468:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    146a:	a8 e3       	ldi	r26, 0x38	; 56
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e3       	ldi	r30, 0x38	; 56
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	82 60       	ori	r24, 0x02	; 2
    1476:	8c 93       	st	X, r24
    1478:	fe 01       	movw	r30, r28
    147a:	ed 5a       	subi	r30, 0xAD	; 173
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e8       	ldi	r26, 0x80	; 128
    1484:	bf e3       	ldi	r27, 0x3F	; 63
    1486:	80 83       	st	Z, r24
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	a2 83       	std	Z+2, r26	; 0x02
    148c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    148e:	8e 01       	movw	r16, r28
    1490:	01 5b       	subi	r16, 0xB1	; 177
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	fe 01       	movw	r30, r28
    1496:	ed 5a       	subi	r30, 0xAD	; 173
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	2b ea       	ldi	r18, 0xAB	; 171
    14a4:	3a ea       	ldi	r19, 0xAA	; 170
    14a6:	4a e2       	ldi	r20, 0x2A	; 42
    14a8:	50 e4       	ldi	r21, 0x40	; 64
    14aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	a2 83       	std	Z+2, r26	; 0x02
    14ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14bc:	fe 01       	movw	r30, r28
    14be:	e1 5b       	subi	r30, 0xB1	; 177
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14d6:	88 23       	and	r24, r24
    14d8:	34 f4       	brge	.+12     	; 0x14e6 <LCD_Command+0xc8>
		__ticks = 1;
    14da:	fe 01       	movw	r30, r28
    14dc:	e2 5b       	subi	r30, 0xB2	; 178
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 83       	st	Z, r24
    14e4:	e0 c0       	rjmp	.+448    	; 0x16a6 <LCD_Command+0x288>
	else if (__tmp > 255)
    14e6:	fe 01       	movw	r30, r28
    14e8:	e1 5b       	subi	r30, 0xB1	; 177
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	53 e4       	ldi	r21, 0x43	; 67
    14fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	0c f0       	brlt	.+2      	; 0x1506 <LCD_Command+0xe8>
    1504:	c0 c0       	rjmp	.+384    	; 0x1686 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    1506:	fe 01       	movw	r30, r28
    1508:	ed 5a       	subi	r30, 0xAD	; 173
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a e7       	ldi	r20, 0x7A	; 122
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	fe 01       	movw	r30, r28
    1526:	e6 5b       	subi	r30, 0xB6	; 182
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	a2 83       	std	Z+2, r26	; 0x02
    1530:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	8e 01       	movw	r16, r28
    1534:	0a 5b       	subi	r16, 0xBA	; 186
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	e6 5b       	subi	r30, 0xB6	; 182
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a ef       	ldi	r20, 0xFA	; 250
    154c:	54 e4       	ldi	r21, 0x44	; 68
    154e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1560:	fe 01       	movw	r30, r28
    1562:	ea 5b       	subi	r30, 0xBA	; 186
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	44 f4       	brge	.+16     	; 0x158e <LCD_Command+0x170>
		__ticks = 1;
    157e:	fe 01       	movw	r30, r28
    1580:	ec 5b       	subi	r30, 0xBC	; 188
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	64 c0       	rjmp	.+200    	; 0x1656 <LCD_Command+0x238>
	else if (__tmp > 65535)
    158e:	fe 01       	movw	r30, r28
    1590:	ea 5b       	subi	r30, 0xBA	; 186
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	3f ef       	ldi	r19, 0xFF	; 255
    15a0:	4f e7       	ldi	r20, 0x7F	; 127
    15a2:	57 e4       	ldi	r21, 0x47	; 71
    15a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <LCD_Command+0x190>
    15ac:	43 c0       	rjmp	.+134    	; 0x1634 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	fe 01       	movw	r30, r28
    15b0:	e6 5b       	subi	r30, 0xB6	; 182
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8e 01       	movw	r16, r28
    15ce:	0c 5b       	subi	r16, 0xBC	; 188
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	f8 01       	movw	r30, r16
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <LCD_Command+0x206>
    15e6:	fe 01       	movw	r30, r28
    15e8:	ee 5b       	subi	r30, 0xBE	; 190
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	88 ec       	ldi	r24, 0xC8	; 200
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f4:	fe 01       	movw	r30, r28
    15f6:	ee 5b       	subi	r30, 0xBE	; 190
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <LCD_Command+0x1e0>
    1602:	fe 01       	movw	r30, r28
    1604:	ee 5b       	subi	r30, 0xBE	; 190
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	de 01       	movw	r26, r28
    160e:	ac 5b       	subi	r26, 0xBC	; 188
    1610:	bf 4f       	sbci	r27, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	ec 5b       	subi	r30, 0xBC	; 188
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	9c 93       	st	X, r25
    1622:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	fe 01       	movw	r30, r28
    1626:	ec 5b       	subi	r30, 0xBC	; 188
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	d1 f6       	brne	.-76     	; 0x15e6 <LCD_Command+0x1c8>
    1632:	42 c0       	rjmp	.+132    	; 0x16b8 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	8e 01       	movw	r16, r28
    1636:	0c 5b       	subi	r16, 0xBC	; 188
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	ea 5b       	subi	r30, 0xBA	; 186
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	de 01       	movw	r26, r28
    1658:	a0 5c       	subi	r26, 0xC0	; 192
    165a:	bf 4f       	sbci	r27, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	ec 5b       	subi	r30, 0xBC	; 188
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	9c 93       	st	X, r25
    166a:	8e 93       	st	-X, r24
    166c:	fe 01       	movw	r30, r28
    166e:	e0 5c       	subi	r30, 0xC0	; 192
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <LCD_Command+0x258>
    167a:	fe 01       	movw	r30, r28
    167c:	e0 5c       	subi	r30, 0xC0	; 192
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
    1684:	19 c0       	rjmp	.+50     	; 0x16b8 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1686:	8e 01       	movw	r16, r28
    1688:	02 5b       	subi	r16, 0xB2	; 178
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e1 5b       	subi	r30, 0xB1	; 177
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	80 83       	st	Z, r24
    16a6:	fe 01       	movw	r30, r28
    16a8:	e2 5b       	subi	r30, 0xB2	; 178
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    16b2:	8a 95       	dec	r24
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_Command+0x294>
    16b6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    16b8:	a8 e3       	ldi	r26, 0x38	; 56
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e8 e3       	ldi	r30, 0x38	; 56
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8d 7f       	andi	r24, 0xFD	; 253
    16c4:	8c 93       	st	X, r24
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a8 e4       	ldi	r26, 0x48	; 72
    16cc:	b3 e4       	ldi	r27, 0x43	; 67
    16ce:	8b af       	std	Y+59, r24	; 0x3b
    16d0:	9c af       	std	Y+60, r25	; 0x3c
    16d2:	ad af       	std	Y+61, r26	; 0x3d
    16d4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d6:	6b ad       	ldd	r22, Y+59	; 0x3b
    16d8:	7c ad       	ldd	r23, Y+60	; 0x3c
    16da:	8d ad       	ldd	r24, Y+61	; 0x3d
    16dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16de:	2b ea       	ldi	r18, 0xAB	; 171
    16e0:	3a ea       	ldi	r19, 0xAA	; 170
    16e2:	4a e2       	ldi	r20, 0x2A	; 42
    16e4:	50 e4       	ldi	r21, 0x40	; 64
    16e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8f ab       	std	Y+55, r24	; 0x37
    16f0:	98 af       	std	Y+56, r25	; 0x38
    16f2:	a9 af       	std	Y+57, r26	; 0x39
    16f4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    16f6:	6f a9       	ldd	r22, Y+55	; 0x37
    16f8:	78 ad       	ldd	r23, Y+56	; 0x38
    16fa:	89 ad       	ldd	r24, Y+57	; 0x39
    16fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	1c f4       	brge	.+6      	; 0x1714 <LCD_Command+0x2f6>
		__ticks = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	8e ab       	std	Y+54, r24	; 0x36
    1712:	91 c0       	rjmp	.+290    	; 0x1836 <LCD_Command+0x418>
	else if (__tmp > 255)
    1714:	6f a9       	ldd	r22, Y+55	; 0x37
    1716:	78 ad       	ldd	r23, Y+56	; 0x38
    1718:	89 ad       	ldd	r24, Y+57	; 0x39
    171a:	9a ad       	ldd	r25, Y+58	; 0x3a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4f e7       	ldi	r20, 0x7F	; 127
    1722:	53 e4       	ldi	r21, 0x43	; 67
    1724:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1728:	18 16       	cp	r1, r24
    172a:	0c f0       	brlt	.+2      	; 0x172e <LCD_Command+0x310>
    172c:	7b c0       	rjmp	.+246    	; 0x1824 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    172e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1730:	7c ad       	ldd	r23, Y+60	; 0x3c
    1732:	8d ad       	ldd	r24, Y+61	; 0x3d
    1734:	9e ad       	ldd	r25, Y+62	; 0x3e
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a e7       	ldi	r20, 0x7A	; 122
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8a ab       	std	Y+50, r24	; 0x32
    1748:	9b ab       	std	Y+51, r25	; 0x33
    174a:	ac ab       	std	Y+52, r26	; 0x34
    174c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6a a9       	ldd	r22, Y+50	; 0x32
    1750:	7b a9       	ldd	r23, Y+51	; 0x33
    1752:	8c a9       	ldd	r24, Y+52	; 0x34
    1754:	9d a9       	ldd	r25, Y+53	; 0x35
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a ef       	ldi	r20, 0xFA	; 250
    175c:	54 e4       	ldi	r21, 0x44	; 68
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8e a7       	std	Y+46, r24	; 0x2e
    1768:	9f a7       	std	Y+47, r25	; 0x2f
    176a:	a8 ab       	std	Y+48, r26	; 0x30
    176c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    176e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1770:	7f a5       	ldd	r23, Y+47	; 0x2f
    1772:	88 a9       	ldd	r24, Y+48	; 0x30
    1774:	99 a9       	ldd	r25, Y+49	; 0x31
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_Command+0x372>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9d a7       	std	Y+45, r25	; 0x2d
    178c:	8c a7       	std	Y+44, r24	; 0x2c
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    1790:	6e a5       	ldd	r22, Y+46	; 0x2e
    1792:	7f a5       	ldd	r23, Y+47	; 0x2f
    1794:	88 a9       	ldd	r24, Y+48	; 0x30
    1796:	99 a9       	ldd	r25, Y+49	; 0x31
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6a a9       	ldd	r22, Y+50	; 0x32
    17aa:	7b a9       	ldd	r23, Y+51	; 0x33
    17ac:	8c a9       	ldd	r24, Y+52	; 0x34
    17ae:	9d a9       	ldd	r25, Y+53	; 0x35
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9d a7       	std	Y+45, r25	; 0x2d
    17ce:	8c a7       	std	Y+44, r24	; 0x2c
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_Command+0x3d2>
    17d2:	88 ec       	ldi	r24, 0xC8	; 200
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9b a7       	std	Y+43, r25	; 0x2b
    17d8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17da:	8a a5       	ldd	r24, Y+42	; 0x2a
    17dc:	9b a5       	ldd	r25, Y+43	; 0x2b
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_Command+0x3c0>
    17e2:	9b a7       	std	Y+43, r25	; 0x2b
    17e4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    17e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9d a7       	std	Y+45, r25	; 0x2d
    17ee:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    17f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_Command+0x3b4>
    17f8:	24 c0       	rjmp	.+72     	; 0x1842 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	6e a5       	ldd	r22, Y+46	; 0x2e
    17fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    17fe:	88 a9       	ldd	r24, Y+48	; 0x30
    1800:	99 a9       	ldd	r25, Y+49	; 0x31
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9d a7       	std	Y+45, r25	; 0x2d
    180c:	8c a7       	std	Y+44, r24	; 0x2c
    180e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1810:	9d a5       	ldd	r25, Y+45	; 0x2d
    1812:	99 a7       	std	Y+41, r25	; 0x29
    1814:	88 a7       	std	Y+40, r24	; 0x28
    1816:	88 a5       	ldd	r24, Y+40	; 0x28
    1818:	99 a5       	ldd	r25, Y+41	; 0x29
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_Command+0x3fc>
    181e:	99 a7       	std	Y+41, r25	; 0x29
    1820:	88 a7       	std	Y+40, r24	; 0x28
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1824:	6f a9       	ldd	r22, Y+55	; 0x37
    1826:	78 ad       	ldd	r23, Y+56	; 0x38
    1828:	89 ad       	ldd	r24, Y+57	; 0x39
    182a:	9a ad       	ldd	r25, Y+58	; 0x3a
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8e ab       	std	Y+54, r24	; 0x36
    1836:	8e a9       	ldd	r24, Y+54	; 0x36
    1838:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    183a:	8f a1       	ldd	r24, Y+39	; 0x27
    183c:	8a 95       	dec	r24
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_Command+0x41e>
    1840:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    1842:	a8 e3       	ldi	r26, 0x38	; 56
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e8 e3       	ldi	r30, 0x38	; 56
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	28 2f       	mov	r18, r24
    184e:	2f 70       	andi	r18, 0x0F	; 15
    1850:	fe 01       	movw	r30, r28
    1852:	e9 5a       	subi	r30, 0xA9	; 169
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	82 95       	swap	r24
    185e:	92 95       	swap	r25
    1860:	90 7f       	andi	r25, 0xF0	; 240
    1862:	98 27       	eor	r25, r24
    1864:	80 7f       	andi	r24, 0xF0	; 240
    1866:	98 27       	eor	r25, r24
    1868:	82 2b       	or	r24, r18
    186a:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	82 60       	ori	r24, 0x02	; 2
    1878:	8c 93       	st	X, r24
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	8b a3       	std	Y+35, r24	; 0x23
    1884:	9c a3       	std	Y+36, r25	; 0x24
    1886:	ad a3       	std	Y+37, r26	; 0x25
    1888:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    188a:	6b a1       	ldd	r22, Y+35	; 0x23
    188c:	7c a1       	ldd	r23, Y+36	; 0x24
    188e:	8d a1       	ldd	r24, Y+37	; 0x25
    1890:	9e a1       	ldd	r25, Y+38	; 0x26
    1892:	2b ea       	ldi	r18, 0xAB	; 171
    1894:	3a ea       	ldi	r19, 0xAA	; 170
    1896:	4a e2       	ldi	r20, 0x2A	; 42
    1898:	50 e4       	ldi	r21, 0x40	; 64
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8f 8f       	std	Y+31, r24	; 0x1f
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	a9 a3       	std	Y+33, r26	; 0x21
    18a8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ac:	78 a1       	ldd	r23, Y+32	; 0x20
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	1c f4       	brge	.+6      	; 0x18c8 <LCD_Command+0x4aa>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	8e 8f       	std	Y+30, r24	; 0x1e
    18c6:	91 c0       	rjmp	.+290    	; 0x19ea <LCD_Command+0x5cc>
	else if (__tmp > 255)
    18c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ca:	78 a1       	ldd	r23, Y+32	; 0x20
    18cc:	89 a1       	ldd	r24, Y+33	; 0x21
    18ce:	9a a1       	ldd	r25, Y+34	; 0x22
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	53 e4       	ldi	r21, 0x43	; 67
    18d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18dc:	18 16       	cp	r1, r24
    18de:	0c f0       	brlt	.+2      	; 0x18e2 <LCD_Command+0x4c4>
    18e0:	7b c0       	rjmp	.+246    	; 0x19d8 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    18e2:	6b a1       	ldd	r22, Y+35	; 0x23
    18e4:	7c a1       	ldd	r23, Y+36	; 0x24
    18e6:	8d a1       	ldd	r24, Y+37	; 0x25
    18e8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	4a e7       	ldi	r20, 0x7A	; 122
    18f0:	54 e4       	ldi	r21, 0x44	; 68
    18f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	8a 8f       	std	Y+26, r24	; 0x1a
    18fc:	9b 8f       	std	Y+27, r25	; 0x1b
    18fe:	ac 8f       	std	Y+28, r26	; 0x1c
    1900:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1904:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1906:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1908:	9d 8d       	ldd	r25, Y+29	; 0x1d
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8e 8b       	std	Y+22, r24	; 0x16
    191c:	9f 8b       	std	Y+23, r25	; 0x17
    191e:	a8 8f       	std	Y+24, r26	; 0x18
    1920:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1922:	6e 89       	ldd	r22, Y+22	; 0x16
    1924:	7f 89       	ldd	r23, Y+23	; 0x17
    1926:	88 8d       	ldd	r24, Y+24	; 0x18
    1928:	99 8d       	ldd	r25, Y+25	; 0x19
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <LCD_Command+0x526>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9d 8b       	std	Y+21, r25	; 0x15
    1940:	8c 8b       	std	Y+20, r24	; 0x14
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    1944:	6e 89       	ldd	r22, Y+22	; 0x16
    1946:	7f 89       	ldd	r23, Y+23	; 0x17
    1948:	88 8d       	ldd	r24, Y+24	; 0x18
    194a:	99 8d       	ldd	r25, Y+25	; 0x19
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    195e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1960:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1962:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9d 8b       	std	Y+21, r25	; 0x15
    1982:	8c 8b       	std	Y+20, r24	; 0x14
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <LCD_Command+0x586>
    1986:	88 ec       	ldi	r24, 0xC8	; 200
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9b 8b       	std	Y+19, r25	; 0x13
    198c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    198e:	8a 89       	ldd	r24, Y+18	; 0x12
    1990:	9b 89       	ldd	r25, Y+19	; 0x13
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_Command+0x574>
    1996:	9b 8b       	std	Y+19, r25	; 0x13
    1998:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8c 89       	ldd	r24, Y+20	; 0x14
    199c:	9d 89       	ldd	r25, Y+21	; 0x15
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9d 8b       	std	Y+21, r25	; 0x15
    19a2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8c 89       	ldd	r24, Y+20	; 0x14
    19a6:	9d 89       	ldd	r25, Y+21	; 0x15
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <LCD_Command+0x568>
    19ac:	24 c0       	rjmp	.+72     	; 0x19f6 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	6e 89       	ldd	r22, Y+22	; 0x16
    19b0:	7f 89       	ldd	r23, Y+23	; 0x17
    19b2:	88 8d       	ldd	r24, Y+24	; 0x18
    19b4:	99 8d       	ldd	r25, Y+25	; 0x19
    19b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9d 8b       	std	Y+21, r25	; 0x15
    19c0:	8c 8b       	std	Y+20, r24	; 0x14
    19c2:	8c 89       	ldd	r24, Y+20	; 0x14
    19c4:	9d 89       	ldd	r25, Y+21	; 0x15
    19c6:	99 8b       	std	Y+17, r25	; 0x11
    19c8:	88 8b       	std	Y+16, r24	; 0x10
    19ca:	88 89       	ldd	r24, Y+16	; 0x10
    19cc:	99 89       	ldd	r25, Y+17	; 0x11
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_Command+0x5b0>
    19d2:	99 8b       	std	Y+17, r25	; 0x11
    19d4:	88 8b       	std	Y+16, r24	; 0x10
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19da:	78 a1       	ldd	r23, Y+32	; 0x20
    19dc:	89 a1       	ldd	r24, Y+33	; 0x21
    19de:	9a a1       	ldd	r25, Y+34	; 0x22
    19e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8e 8f       	std	Y+30, r24	; 0x1e
    19ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ec:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	8a 95       	dec	r24
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_Command+0x5d2>
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8d 7f       	andi	r24, 0xFD	; 253
    1a02:	8c 93       	st	X, r24
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e4       	ldi	r27, 0x40	; 64
    1a0c:	8b 87       	std	Y+11, r24	; 0x0b
    1a0e:	9c 87       	std	Y+12, r25	; 0x0c
    1a10:	ad 87       	std	Y+13, r26	; 0x0d
    1a12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a ef       	ldi	r20, 0xFA	; 250
    1a22:	54 e4       	ldi	r21, 0x44	; 68
    1a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8f 83       	std	Y+7, r24	; 0x07
    1a2e:	98 87       	std	Y+8, r25	; 0x08
    1a30:	a9 87       	std	Y+9, r26	; 0x09
    1a32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <LCD_Command+0x638>
		__ticks = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	4c f5       	brge	.+82     	; 0x1ac0 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e2       	ldi	r20, 0x20	; 32
    1a7c:	51 e4       	ldi	r21, 0x41	; 65
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <LCD_Command+0x698>
    1a98:	88 ec       	ldi	r24, 0xC8	; 200
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <LCD_Command+0x686>
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <LCD_Command+0x67a>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_Command+0x6c2>
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ae8:	c9 5a       	subi	r28, 0xA9	; 169
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	c7 55       	subi	r28, 0x57	; 87
    1b0e:	d0 40       	sbci	r29, 0x00	; 0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 5a       	subi	r30, 0xA9	; 169
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	9f 70       	andi	r25, 0x0F	; 15
    1b30:	fe 01       	movw	r30, r28
    1b32:	e9 5a       	subi	r30, 0xA9	; 169
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	80 7f       	andi	r24, 0xF0	; 240
    1b3a:	89 2b       	or	r24, r25
    1b3c:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1b3e:	a8 e3       	ldi	r26, 0x38	; 56
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e8 e3       	ldi	r30, 0x38	; 56
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	81 60       	ori	r24, 0x01	; 1
    1b4a:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    1b4c:	a8 e3       	ldi	r26, 0x38	; 56
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e8 e3       	ldi	r30, 0x38	; 56
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	82 60       	ori	r24, 0x02	; 2
    1b58:	8c 93       	st	X, r24
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ed 5a       	subi	r30, 0xAD	; 173
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b70:	8e 01       	movw	r16, r28
    1b72:	01 5b       	subi	r16, 0xB1	; 177
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 5a       	subi	r30, 0xAD	; 173
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	2b ea       	ldi	r18, 0xAB	; 171
    1b86:	3a ea       	ldi	r19, 0xAA	; 170
    1b88:	4a e2       	ldi	r20, 0x2A	; 42
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 83       	st	Z, r24
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	a2 83       	std	Z+2, r26	; 0x02
    1b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e1 5b       	subi	r30, 0xB1	; 177
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	34 f4       	brge	.+12     	; 0x1bc8 <LCD_Char+0xc8>
		__ticks = 1;
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e2 5b       	subi	r30, 0xB2	; 178
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 83       	st	Z, r24
    1bc6:	e0 c0       	rjmp	.+448    	; 0x1d88 <LCD_Char+0x288>
	else if (__tmp > 255)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e1 5b       	subi	r30, 0xB1	; 177
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <LCD_Char+0xe8>
    1be6:	c0 c0       	rjmp	.+384    	; 0x1d68 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    1be8:	fe 01       	movw	r30, r28
    1bea:	ed 5a       	subi	r30, 0xAD	; 173
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a e7       	ldi	r20, 0x7A	; 122
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	fe 01       	movw	r30, r28
    1c08:	e6 5b       	subi	r30, 0xB6	; 182
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 83       	st	Z, r24
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	a2 83       	std	Z+2, r26	; 0x02
    1c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	8e 01       	movw	r16, r28
    1c16:	0a 5b       	subi	r16, 0xBA	; 186
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e6 5b       	subi	r30, 0xB6	; 182
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c42:	fe 01       	movw	r30, r28
    1c44:	ea 5b       	subi	r30, 0xBA	; 186
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	44 f4       	brge	.+16     	; 0x1c70 <LCD_Char+0x170>
		__ticks = 1;
    1c60:	fe 01       	movw	r30, r28
    1c62:	ec 5b       	subi	r30, 0xBC	; 188
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	64 c0       	rjmp	.+200    	; 0x1d38 <LCD_Char+0x238>
	else if (__tmp > 65535)
    1c70:	fe 01       	movw	r30, r28
    1c72:	ea 5b       	subi	r30, 0xBA	; 186
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	0c f0       	brlt	.+2      	; 0x1c90 <LCD_Char+0x190>
    1c8e:	43 c0       	rjmp	.+134    	; 0x1d16 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	fe 01       	movw	r30, r28
    1c92:	e6 5b       	subi	r30, 0xB6	; 182
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8e 01       	movw	r16, r28
    1cb0:	0c 5b       	subi	r16, 0xBC	; 188
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	1f c0       	rjmp	.+62     	; 0x1d06 <LCD_Char+0x206>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ee 5b       	subi	r30, 0xBE	; 190
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ee 5b       	subi	r30, 0xBE	; 190
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_Char+0x1e0>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ee 5b       	subi	r30, 0xBE	; 190
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cee:	de 01       	movw	r26, r28
    1cf0:	ac 5b       	subi	r26, 0xBC	; 188
    1cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ec 5b       	subi	r30, 0xBC	; 188
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	fe 01       	movw	r30, r28
    1d08:	ec 5b       	subi	r30, 0xBC	; 188
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	d1 f6       	brne	.-76     	; 0x1cc8 <LCD_Char+0x1c8>
    1d14:	42 c0       	rjmp	.+132    	; 0x1d9a <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	8e 01       	movw	r16, r28
    1d18:	0c 5b       	subi	r16, 0xBC	; 188
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ea 5b       	subi	r30, 0xBA	; 186
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	f8 01       	movw	r30, r16
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	de 01       	movw	r26, r28
    1d3a:	a0 5c       	subi	r26, 0xC0	; 192
    1d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ec 5b       	subi	r30, 0xBC	; 188
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e0 5c       	subi	r30, 0xC0	; 192
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_Char+0x258>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e0 5c       	subi	r30, 0xC0	; 192
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	19 c0       	rjmp	.+50     	; 0x1d9a <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	02 5b       	subi	r16, 0xB2	; 178
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e1 5b       	subi	r30, 0xB1	; 177
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e2 5b       	subi	r30, 0xB2	; 178
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d92:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d94:	8a 95       	dec	r24
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_Char+0x294>
    1d98:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1d9a:	a8 e3       	ldi	r26, 0x38	; 56
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e8 e3       	ldi	r30, 0x38	; 56
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8d 7f       	andi	r24, 0xFD	; 253
    1da6:	8c 93       	st	X, r24
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a8 e4       	ldi	r26, 0x48	; 72
    1dae:	b3 e4       	ldi	r27, 0x43	; 67
    1db0:	8b af       	std	Y+59, r24	; 0x3b
    1db2:	9c af       	std	Y+60, r25	; 0x3c
    1db4:	ad af       	std	Y+61, r26	; 0x3d
    1db6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1db8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dc0:	2b ea       	ldi	r18, 0xAB	; 171
    1dc2:	3a ea       	ldi	r19, 0xAA	; 170
    1dc4:	4a e2       	ldi	r20, 0x2A	; 42
    1dc6:	50 e4       	ldi	r21, 0x40	; 64
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8f ab       	std	Y+55, r24	; 0x37
    1dd2:	98 af       	std	Y+56, r25	; 0x38
    1dd4:	a9 af       	std	Y+57, r26	; 0x39
    1dd6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1dd8:	6f a9       	ldd	r22, Y+55	; 0x37
    1dda:	78 ad       	ldd	r23, Y+56	; 0x38
    1ddc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dde:	9a ad       	ldd	r25, Y+58	; 0x3a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	1c f4       	brge	.+6      	; 0x1df6 <LCD_Char+0x2f6>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	8e ab       	std	Y+54, r24	; 0x36
    1df4:	91 c0       	rjmp	.+290    	; 0x1f18 <LCD_Char+0x418>
	else if (__tmp > 255)
    1df6:	6f a9       	ldd	r22, Y+55	; 0x37
    1df8:	78 ad       	ldd	r23, Y+56	; 0x38
    1dfa:	89 ad       	ldd	r24, Y+57	; 0x39
    1dfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	53 e4       	ldi	r21, 0x43	; 67
    1e06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <LCD_Char+0x310>
    1e0e:	7b c0       	rjmp	.+246    	; 0x1f06 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    1e10:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e12:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8a ab       	std	Y+50, r24	; 0x32
    1e2a:	9b ab       	std	Y+51, r25	; 0x33
    1e2c:	ac ab       	std	Y+52, r26	; 0x34
    1e2e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6a a9       	ldd	r22, Y+50	; 0x32
    1e32:	7b a9       	ldd	r23, Y+51	; 0x33
    1e34:	8c a9       	ldd	r24, Y+52	; 0x34
    1e36:	9d a9       	ldd	r25, Y+53	; 0x35
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8e a7       	std	Y+46, r24	; 0x2e
    1e4a:	9f a7       	std	Y+47, r25	; 0x2f
    1e4c:	a8 ab       	std	Y+48, r26	; 0x30
    1e4e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e50:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e52:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e54:	88 a9       	ldd	r24, Y+48	; 0x30
    1e56:	99 a9       	ldd	r25, Y+49	; 0x31
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <LCD_Char+0x372>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9d a7       	std	Y+45, r25	; 0x2d
    1e6e:	8c a7       	std	Y+44, r24	; 0x2c
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    1e72:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e74:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e76:	88 a9       	ldd	r24, Y+48	; 0x30
    1e78:	99 a9       	ldd	r25, Y+49	; 0x31
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6a a9       	ldd	r22, Y+50	; 0x32
    1e8c:	7b a9       	ldd	r23, Y+51	; 0x33
    1e8e:	8c a9       	ldd	r24, Y+52	; 0x34
    1e90:	9d a9       	ldd	r25, Y+53	; 0x35
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9d a7       	std	Y+45, r25	; 0x2d
    1eb0:	8c a7       	std	Y+44, r24	; 0x2c
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_Char+0x3d2>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9b a7       	std	Y+43, r25	; 0x2b
    1eba:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ebc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ebe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_Char+0x3c0>
    1ec4:	9b a7       	std	Y+43, r25	; 0x2b
    1ec6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1eca:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9d a7       	std	Y+45, r25	; 0x2d
    1ed0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ed4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <LCD_Char+0x3b4>
    1eda:	24 c0       	rjmp	.+72     	; 0x1f24 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ede:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ee0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ee2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9d a7       	std	Y+45, r25	; 0x2d
    1eee:	8c a7       	std	Y+44, r24	; 0x2c
    1ef0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ef2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ef4:	99 a7       	std	Y+41, r25	; 0x29
    1ef6:	88 a7       	std	Y+40, r24	; 0x28
    1ef8:	88 a5       	ldd	r24, Y+40	; 0x28
    1efa:	99 a5       	ldd	r25, Y+41	; 0x29
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_Char+0x3fc>
    1f00:	99 a7       	std	Y+41, r25	; 0x29
    1f02:	88 a7       	std	Y+40, r24	; 0x28
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f06:	6f a9       	ldd	r22, Y+55	; 0x37
    1f08:	78 ad       	ldd	r23, Y+56	; 0x38
    1f0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8e ab       	std	Y+54, r24	; 0x36
    1f18:	8e a9       	ldd	r24, Y+54	; 0x36
    1f1a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f1c:	8f a1       	ldd	r24, Y+39	; 0x27
    1f1e:	8a 95       	dec	r24
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_Char+0x41e>
    1f22:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    1f24:	a8 e3       	ldi	r26, 0x38	; 56
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e8 e3       	ldi	r30, 0x38	; 56
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	2f 70       	andi	r18, 0x0F	; 15
    1f32:	fe 01       	movw	r30, r28
    1f34:	e9 5a       	subi	r30, 0xA9	; 169
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	82 95       	swap	r24
    1f40:	92 95       	swap	r25
    1f42:	90 7f       	andi	r25, 0xF0	; 240
    1f44:	98 27       	eor	r25, r24
    1f46:	80 7f       	andi	r24, 0xF0	; 240
    1f48:	98 27       	eor	r25, r24
    1f4a:	82 2b       	or	r24, r18
    1f4c:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1f4e:	a8 e3       	ldi	r26, 0x38	; 56
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e8 e3       	ldi	r30, 0x38	; 56
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	82 60       	ori	r24, 0x02	; 2
    1f5a:	8c 93       	st	X, r24
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	bf e3       	ldi	r27, 0x3F	; 63
    1f64:	8b a3       	std	Y+35, r24	; 0x23
    1f66:	9c a3       	std	Y+36, r25	; 0x24
    1f68:	ad a3       	std	Y+37, r26	; 0x25
    1f6a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	2b ea       	ldi	r18, 0xAB	; 171
    1f76:	3a ea       	ldi	r19, 0xAA	; 170
    1f78:	4a e2       	ldi	r20, 0x2A	; 42
    1f7a:	50 e4       	ldi	r21, 0x40	; 64
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
    1f86:	98 a3       	std	Y+32, r25	; 0x20
    1f88:	a9 a3       	std	Y+33, r26	; 0x21
    1f8a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f8c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f8e:	78 a1       	ldd	r23, Y+32	; 0x20
    1f90:	89 a1       	ldd	r24, Y+33	; 0x21
    1f92:	9a a1       	ldd	r25, Y+34	; 0x22
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	1c f4       	brge	.+6      	; 0x1faa <LCD_Char+0x4aa>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa8:	91 c0       	rjmp	.+290    	; 0x20cc <LCD_Char+0x5cc>
	else if (__tmp > 255)
    1faa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fac:	78 a1       	ldd	r23, Y+32	; 0x20
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	53 e4       	ldi	r21, 0x43	; 67
    1fba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <LCD_Char+0x4c4>
    1fc2:	7b c0       	rjmp	.+246    	; 0x20ba <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fde:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe0:	ac 8f       	std	Y+28, r26	; 0x1c
    1fe2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fe6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fe8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8e 8b       	std	Y+22, r24	; 0x16
    1ffe:	9f 8b       	std	Y+23, r25	; 0x17
    2000:	a8 8f       	std	Y+24, r26	; 0x18
    2002:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2004:	6e 89       	ldd	r22, Y+22	; 0x16
    2006:	7f 89       	ldd	r23, Y+23	; 0x17
    2008:	88 8d       	ldd	r24, Y+24	; 0x18
    200a:	99 8d       	ldd	r25, Y+25	; 0x19
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_Char+0x526>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9d 8b       	std	Y+21, r25	; 0x15
    2022:	8c 8b       	std	Y+20, r24	; 0x14
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    2026:	6e 89       	ldd	r22, Y+22	; 0x16
    2028:	7f 89       	ldd	r23, Y+23	; 0x17
    202a:	88 8d       	ldd	r24, Y+24	; 0x18
    202c:	99 8d       	ldd	r25, Y+25	; 0x19
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2040:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2042:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2044:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9d 8b       	std	Y+21, r25	; 0x15
    2064:	8c 8b       	std	Y+20, r24	; 0x14
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_Char+0x586>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9b 8b       	std	Y+19, r25	; 0x13
    206e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2070:	8a 89       	ldd	r24, Y+18	; 0x12
    2072:	9b 89       	ldd	r25, Y+19	; 0x13
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_Char+0x574>
    2078:	9b 8b       	std	Y+19, r25	; 0x13
    207a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8c 89       	ldd	r24, Y+20	; 0x14
    207e:	9d 89       	ldd	r25, Y+21	; 0x15
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9d 8b       	std	Y+21, r25	; 0x15
    2084:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8c 89       	ldd	r24, Y+20	; 0x14
    2088:	9d 89       	ldd	r25, Y+21	; 0x15
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_Char+0x568>
    208e:	24 c0       	rjmp	.+72     	; 0x20d8 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6e 89       	ldd	r22, Y+22	; 0x16
    2092:	7f 89       	ldd	r23, Y+23	; 0x17
    2094:	88 8d       	ldd	r24, Y+24	; 0x18
    2096:	99 8d       	ldd	r25, Y+25	; 0x19
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9d 8b       	std	Y+21, r25	; 0x15
    20a2:	8c 8b       	std	Y+20, r24	; 0x14
    20a4:	8c 89       	ldd	r24, Y+20	; 0x14
    20a6:	9d 89       	ldd	r25, Y+21	; 0x15
    20a8:	99 8b       	std	Y+17, r25	; 0x11
    20aa:	88 8b       	std	Y+16, r24	; 0x10
    20ac:	88 89       	ldd	r24, Y+16	; 0x10
    20ae:	99 89       	ldd	r25, Y+17	; 0x11
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_Char+0x5b0>
    20b4:	99 8b       	std	Y+17, r25	; 0x11
    20b6:	88 8b       	std	Y+16, r24	; 0x10
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20bc:	78 a1       	ldd	r23, Y+32	; 0x20
    20be:	89 a1       	ldd	r24, Y+33	; 0x21
    20c0:	9a a1       	ldd	r25, Y+34	; 0x22
    20c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8e 8f       	std	Y+30, r24	; 0x1e
    20cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ce:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d2:	8a 95       	dec	r24
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_Char+0x5d2>
    20d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    20d8:	a8 e3       	ldi	r26, 0x38	; 56
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e8 e3       	ldi	r30, 0x38	; 56
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8d 7f       	andi	r24, 0xFD	; 253
    20e4:	8c 93       	st	X, r24
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e4       	ldi	r27, 0x40	; 64
    20ee:	8b 87       	std	Y+11, r24	; 0x0b
    20f0:	9c 87       	std	Y+12, r25	; 0x0c
    20f2:	ad 87       	std	Y+13, r26	; 0x0d
    20f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f 83       	std	Y+7, r24	; 0x07
    2110:	98 87       	std	Y+8, r25	; 0x08
    2112:	a9 87       	std	Y+9, r26	; 0x09
    2114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <LCD_Char+0x638>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <LCD_Char+0x698>
    217a:	88 ec       	ldi	r24, 0xC8	; 200
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_Char+0x686>
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <LCD_Char+0x67a>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_Char+0x6c2>
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    21ca:	c9 5a       	subi	r28, 0xA9	; 169
    21cc:	df 4f       	sbci	r29, 0xFF	; 255
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	08 95       	ret

000021e2 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	6c 97       	sbiw	r28, 0x1c	; 28
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    21f6:	e7 e3       	ldi	r30, 0x37	; 55
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	80 83       	st	Z, r24
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 ea       	ldi	r26, 0xA0	; 160
    2204:	b1 e4       	ldi	r27, 0x41	; 65
    2206:	89 8f       	std	Y+25, r24	; 0x19
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	ab 8f       	std	Y+27, r26	; 0x1b
    220c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a ef       	ldi	r20, 0xFA	; 250
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8d 8b       	std	Y+21, r24	; 0x15
    2228:	9e 8b       	std	Y+22, r25	; 0x16
    222a:	af 8b       	std	Y+23, r26	; 0x17
    222c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_Init+0x6e>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_Init+0xec>
	else if (__tmp > 65535)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_Init+0xce>
    2292:	88 ec       	ldi	r24, 0xC8	; 200
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9a 8b       	std	Y+18, r25	; 0x12
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	89 89       	ldd	r24, Y+17	; 0x11
    229c:	9a 89       	ldd	r25, Y+18	; 0x12
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_Init+0xbc>
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8b 89       	ldd	r24, Y+19	; 0x13
    22a8:	9c 89       	ldd	r25, Y+20	; 0x14
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_Init+0xb0>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	98 8b       	std	Y+16, r25	; 0x10
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_Init+0xf8>
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);			/* LCD Power ON delay always >15ms */

	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    22e8:	88 e2       	ldi	r24, 0x28	; 40
    22ea:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    22ee:	8c e0       	ldi	r24, 0x0C	; 12
    22f0:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    22f4:	86 e0       	ldi	r24, 0x06	; 6
    22f6:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e0       	ldi	r26, 0x00	; 0
    2306:	b0 e4       	ldi	r27, 0x40	; 64
    2308:	8b 87       	std	Y+11, r24	; 0x0b
    230a:	9c 87       	std	Y+12, r25	; 0x0c
    230c:	ad 87       	std	Y+13, r26	; 0x0d
    230e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8f 83       	std	Y+7, r24	; 0x07
    232a:	98 87       	std	Y+8, r25	; 0x08
    232c:	a9 87       	std	Y+9, r26	; 0x09
    232e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_Init+0x170>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6b 85       	ldd	r22, Y+11	; 0x0b
    236c:	7c 85       	ldd	r23, Y+12	; 0x0c
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_Init+0x1d0>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_Init+0x1be>
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_Init+0x1b2>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_Init+0x1fa>
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23e4:	6c 96       	adiw	r28, 0x1c	; 28
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <LCD_String+0x6>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <LCD_String+0x8>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2406:	1a 82       	std	Y+2, r1	; 0x02
    2408:	19 82       	std	Y+1, r1	; 0x01
    240a:	0f c0       	rjmp	.+30     	; 0x242a <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    240c:	29 81       	ldd	r18, Y+1	; 0x01
    240e:	3a 81       	ldd	r19, Y+2	; 0x02
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	fc 01       	movw	r30, r24
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	01 96       	adiw	r24, 0x01	; 1
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	29 81       	ldd	r18, Y+1	; 0x01
    242c:	3a 81       	ldd	r19, Y+2	; 0x02
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	fc 01       	movw	r30, r24
    2434:	e2 0f       	add	r30, r18
    2436:	f3 1f       	adc	r31, r19
    2438:	80 81       	ld	r24, Z
    243a:	88 23       	and	r24, r24
    243c:	39 f7       	brne	.-50     	; 0x240c <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <LCD_String_xy+0x6>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <LCD_String_xy+0x8>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	6a 83       	std	Y+2, r22	; 0x02
    245c:	5c 83       	std	Y+4, r21	; 0x04
    245e:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	88 23       	and	r24, r24
    2464:	49 f4       	brne	.+18     	; 0x2478 <LCD_String_xy+0x2c>
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	80 31       	cpi	r24, 0x10	; 16
    246a:	30 f4       	brcc	.+12     	; 0x2478 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	8f 70       	andi	r24, 0x0F	; 15
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
    2476:	0b c0       	rjmp	.+22     	; 0x248e <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	41 f4       	brne	.+16     	; 0x248e <LCD_String_xy+0x42>
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	80 31       	cpi	r24, 0x10	; 16
    2482:	28 f4       	brcc	.+10     	; 0x248e <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	8f 70       	andi	r24, 0x0F	; 15
    2488:	80 6c       	ori	r24, 0xC0	; 192
    248a:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <LCD_String>
}
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <LCD_Clear>:

void LCD_Clear()
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	2e 97       	sbiw	r28, 0x0e	; 14
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e4       	ldi	r27, 0x40	; 64
    24c6:	8b 87       	std	Y+11, r24	; 0x0b
    24c8:	9c 87       	std	Y+12, r25	; 0x0c
    24ca:	ad 87       	std	Y+13, r26	; 0x0d
    24cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a ef       	ldi	r20, 0xFA	; 250
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	98 87       	std	Y+8, r25	; 0x08
    24ea:	a9 87       	std	Y+9, r26	; 0x09
    24ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_Clear+0x6c>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_Clear+0xcc>
    2552:	88 ec       	ldi	r24, 0xC8	; 200
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_Clear+0xba>
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_Clear+0xae>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_Clear+0xf6>
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    25a2:	80 e8       	ldi	r24, 0x80	; 128
    25a4:	0e 94 0f 0a 	call	0x141e	; 0x141e <LCD_Command>
}
    25a8:	2e 96       	adiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <__prologue_saves__>:
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	ca 1b       	sub	r28, r26
    25e4:	db 0b       	sbc	r29, r27
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	09 94       	ijmp

000025f2 <__epilogue_restores__>:
    25f2:	2a 88       	ldd	r2, Y+18	; 0x12
    25f4:	39 88       	ldd	r3, Y+17	; 0x11
    25f6:	48 88       	ldd	r4, Y+16	; 0x10
    25f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2600:	9b 84       	ldd	r9, Y+11	; 0x0b
    2602:	aa 84       	ldd	r10, Y+10	; 0x0a
    2604:	b9 84       	ldd	r11, Y+9	; 0x09
    2606:	c8 84       	ldd	r12, Y+8	; 0x08
    2608:	df 80       	ldd	r13, Y+7	; 0x07
    260a:	ee 80       	ldd	r14, Y+6	; 0x06
    260c:	fd 80       	ldd	r15, Y+5	; 0x05
    260e:	0c 81       	ldd	r16, Y+4	; 0x04
    2610:	1b 81       	ldd	r17, Y+3	; 0x03
    2612:	aa 81       	ldd	r26, Y+2	; 0x02
    2614:	b9 81       	ldd	r27, Y+1	; 0x01
    2616:	ce 0f       	add	r28, r30
    2618:	d1 1d       	adc	r29, r1
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	ed 01       	movw	r28, r26
    2626:	08 95       	ret

00002628 <sprintf>:
    2628:	ae e0       	ldi	r26, 0x0E	; 14
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ea e1       	ldi	r30, 0x1A	; 26
    262e:	f3 e1       	ldi	r31, 0x13	; 19
    2630:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__prologue_saves__+0x1c>
    2634:	0d 89       	ldd	r16, Y+21	; 0x15
    2636:	1e 89       	ldd	r17, Y+22	; 0x16
    2638:	86 e0       	ldi	r24, 0x06	; 6
    263a:	8c 83       	std	Y+4, r24	; 0x04
    263c:	1a 83       	std	Y+2, r17	; 0x02
    263e:	09 83       	std	Y+1, r16	; 0x01
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	9f e7       	ldi	r25, 0x7F	; 127
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	9e 01       	movw	r18, r28
    264a:	27 5e       	subi	r18, 0xE7	; 231
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	ce 01       	movw	r24, r28
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	6f 89       	ldd	r22, Y+23	; 0x17
    2654:	78 8d       	ldd	r23, Y+24	; 0x18
    2656:	a9 01       	movw	r20, r18
    2658:	0e 94 38 13 	call	0x2670	; 0x2670 <vfprintf>
    265c:	2f 81       	ldd	r18, Y+7	; 0x07
    265e:	38 85       	ldd	r19, Y+8	; 0x08
    2660:	02 0f       	add	r16, r18
    2662:	13 1f       	adc	r17, r19
    2664:	f8 01       	movw	r30, r16
    2666:	10 82       	st	Z, r1
    2668:	2e 96       	adiw	r28, 0x0e	; 14
    266a:	e4 e0       	ldi	r30, 0x04	; 4
    266c:	0c 94 07 13 	jmp	0x260e	; 0x260e <__epilogue_restores__+0x1c>

00002670 <vfprintf>:
    2670:	ab e0       	ldi	r26, 0x0B	; 11
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e3       	ldi	r30, 0x3E	; 62
    2676:	f3 e1       	ldi	r31, 0x13	; 19
    2678:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
    267c:	3c 01       	movw	r6, r24
    267e:	2b 01       	movw	r4, r22
    2680:	5a 01       	movw	r10, r20
    2682:	fc 01       	movw	r30, r24
    2684:	17 82       	std	Z+7, r1	; 0x07
    2686:	16 82       	std	Z+6, r1	; 0x06
    2688:	83 81       	ldd	r24, Z+3	; 0x03
    268a:	81 fd       	sbrc	r24, 1
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <vfprintf+0x24>
    268e:	6f ef       	ldi	r22, 0xFF	; 255
    2690:	7f ef       	ldi	r23, 0xFF	; 255
    2692:	c6 c1       	rjmp	.+908    	; 0x2a20 <vfprintf+0x3b0>
    2694:	9a e0       	ldi	r25, 0x0A	; 10
    2696:	89 2e       	mov	r8, r25
    2698:	1e 01       	movw	r2, r28
    269a:	08 94       	sec
    269c:	21 1c       	adc	r2, r1
    269e:	31 1c       	adc	r3, r1
    26a0:	f3 01       	movw	r30, r6
    26a2:	23 81       	ldd	r18, Z+3	; 0x03
    26a4:	f2 01       	movw	r30, r4
    26a6:	23 fd       	sbrc	r18, 3
    26a8:	85 91       	lpm	r24, Z+
    26aa:	23 ff       	sbrs	r18, 3
    26ac:	81 91       	ld	r24, Z+
    26ae:	2f 01       	movw	r4, r30
    26b0:	88 23       	and	r24, r24
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <vfprintf+0x46>
    26b4:	b2 c1       	rjmp	.+868    	; 0x2a1a <vfprintf+0x3aa>
    26b6:	85 32       	cpi	r24, 0x25	; 37
    26b8:	39 f4       	brne	.+14     	; 0x26c8 <vfprintf+0x58>
    26ba:	23 fd       	sbrc	r18, 3
    26bc:	85 91       	lpm	r24, Z+
    26be:	23 ff       	sbrs	r18, 3
    26c0:	81 91       	ld	r24, Z+
    26c2:	2f 01       	movw	r4, r30
    26c4:	85 32       	cpi	r24, 0x25	; 37
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <vfprintf+0x62>
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	b3 01       	movw	r22, r6
    26cc:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    26d0:	e7 cf       	rjmp	.-50     	; 0x26a0 <vfprintf+0x30>
    26d2:	98 2f       	mov	r25, r24
    26d4:	ff 24       	eor	r15, r15
    26d6:	ee 24       	eor	r14, r14
    26d8:	99 24       	eor	r9, r9
    26da:	ff e1       	ldi	r31, 0x1F	; 31
    26dc:	ff 15       	cp	r31, r15
    26de:	d0 f0       	brcs	.+52     	; 0x2714 <vfprintf+0xa4>
    26e0:	9b 32       	cpi	r25, 0x2B	; 43
    26e2:	69 f0       	breq	.+26     	; 0x26fe <vfprintf+0x8e>
    26e4:	9c 32       	cpi	r25, 0x2C	; 44
    26e6:	28 f4       	brcc	.+10     	; 0x26f2 <vfprintf+0x82>
    26e8:	90 32       	cpi	r25, 0x20	; 32
    26ea:	59 f0       	breq	.+22     	; 0x2702 <vfprintf+0x92>
    26ec:	93 32       	cpi	r25, 0x23	; 35
    26ee:	91 f4       	brne	.+36     	; 0x2714 <vfprintf+0xa4>
    26f0:	0e c0       	rjmp	.+28     	; 0x270e <vfprintf+0x9e>
    26f2:	9d 32       	cpi	r25, 0x2D	; 45
    26f4:	49 f0       	breq	.+18     	; 0x2708 <vfprintf+0x98>
    26f6:	90 33       	cpi	r25, 0x30	; 48
    26f8:	69 f4       	brne	.+26     	; 0x2714 <vfprintf+0xa4>
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	24 c0       	rjmp	.+72     	; 0x2746 <vfprintf+0xd6>
    26fe:	52 e0       	ldi	r21, 0x02	; 2
    2700:	f5 2a       	or	r15, r21
    2702:	84 e0       	ldi	r24, 0x04	; 4
    2704:	f8 2a       	or	r15, r24
    2706:	28 c0       	rjmp	.+80     	; 0x2758 <vfprintf+0xe8>
    2708:	98 e0       	ldi	r25, 0x08	; 8
    270a:	f9 2a       	or	r15, r25
    270c:	25 c0       	rjmp	.+74     	; 0x2758 <vfprintf+0xe8>
    270e:	e0 e1       	ldi	r30, 0x10	; 16
    2710:	fe 2a       	or	r15, r30
    2712:	22 c0       	rjmp	.+68     	; 0x2758 <vfprintf+0xe8>
    2714:	f7 fc       	sbrc	r15, 7
    2716:	29 c0       	rjmp	.+82     	; 0x276a <vfprintf+0xfa>
    2718:	89 2f       	mov	r24, r25
    271a:	80 53       	subi	r24, 0x30	; 48
    271c:	8a 30       	cpi	r24, 0x0A	; 10
    271e:	70 f4       	brcc	.+28     	; 0x273c <vfprintf+0xcc>
    2720:	f6 fe       	sbrs	r15, 6
    2722:	05 c0       	rjmp	.+10     	; 0x272e <vfprintf+0xbe>
    2724:	98 9c       	mul	r9, r8
    2726:	90 2c       	mov	r9, r0
    2728:	11 24       	eor	r1, r1
    272a:	98 0e       	add	r9, r24
    272c:	15 c0       	rjmp	.+42     	; 0x2758 <vfprintf+0xe8>
    272e:	e8 9c       	mul	r14, r8
    2730:	e0 2c       	mov	r14, r0
    2732:	11 24       	eor	r1, r1
    2734:	e8 0e       	add	r14, r24
    2736:	f0 e2       	ldi	r31, 0x20	; 32
    2738:	ff 2a       	or	r15, r31
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <vfprintf+0xe8>
    273c:	9e 32       	cpi	r25, 0x2E	; 46
    273e:	29 f4       	brne	.+10     	; 0x274a <vfprintf+0xda>
    2740:	f6 fc       	sbrc	r15, 6
    2742:	6b c1       	rjmp	.+726    	; 0x2a1a <vfprintf+0x3aa>
    2744:	40 e4       	ldi	r20, 0x40	; 64
    2746:	f4 2a       	or	r15, r20
    2748:	07 c0       	rjmp	.+14     	; 0x2758 <vfprintf+0xe8>
    274a:	9c 36       	cpi	r25, 0x6C	; 108
    274c:	19 f4       	brne	.+6      	; 0x2754 <vfprintf+0xe4>
    274e:	50 e8       	ldi	r21, 0x80	; 128
    2750:	f5 2a       	or	r15, r21
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0xe8>
    2754:	98 36       	cpi	r25, 0x68	; 104
    2756:	49 f4       	brne	.+18     	; 0x276a <vfprintf+0xfa>
    2758:	f2 01       	movw	r30, r4
    275a:	23 fd       	sbrc	r18, 3
    275c:	95 91       	lpm	r25, Z+
    275e:	23 ff       	sbrs	r18, 3
    2760:	91 91       	ld	r25, Z+
    2762:	2f 01       	movw	r4, r30
    2764:	99 23       	and	r25, r25
    2766:	09 f0       	breq	.+2      	; 0x276a <vfprintf+0xfa>
    2768:	b8 cf       	rjmp	.-144    	; 0x26da <vfprintf+0x6a>
    276a:	89 2f       	mov	r24, r25
    276c:	85 54       	subi	r24, 0x45	; 69
    276e:	83 30       	cpi	r24, 0x03	; 3
    2770:	18 f0       	brcs	.+6      	; 0x2778 <vfprintf+0x108>
    2772:	80 52       	subi	r24, 0x20	; 32
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	38 f4       	brcc	.+14     	; 0x2786 <vfprintf+0x116>
    2778:	44 e0       	ldi	r20, 0x04	; 4
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	a4 0e       	add	r10, r20
    277e:	b5 1e       	adc	r11, r21
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	59 83       	std	Y+1, r21	; 0x01
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <vfprintf+0x134>
    2786:	93 36       	cpi	r25, 0x63	; 99
    2788:	31 f0       	breq	.+12     	; 0x2796 <vfprintf+0x126>
    278a:	93 37       	cpi	r25, 0x73	; 115
    278c:	79 f0       	breq	.+30     	; 0x27ac <vfprintf+0x13c>
    278e:	93 35       	cpi	r25, 0x53	; 83
    2790:	09 f0       	breq	.+2      	; 0x2794 <vfprintf+0x124>
    2792:	56 c0       	rjmp	.+172    	; 0x2840 <vfprintf+0x1d0>
    2794:	20 c0       	rjmp	.+64     	; 0x27d6 <vfprintf+0x166>
    2796:	f5 01       	movw	r30, r10
    2798:	80 81       	ld	r24, Z
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	42 e0       	ldi	r20, 0x02	; 2
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	a4 0e       	add	r10, r20
    27a2:	b5 1e       	adc	r11, r21
    27a4:	61 01       	movw	r12, r2
    27a6:	01 e0       	ldi	r16, 0x01	; 1
    27a8:	10 e0       	ldi	r17, 0x00	; 0
    27aa:	12 c0       	rjmp	.+36     	; 0x27d0 <vfprintf+0x160>
    27ac:	f5 01       	movw	r30, r10
    27ae:	c0 80       	ld	r12, Z
    27b0:	d1 80       	ldd	r13, Z+1	; 0x01
    27b2:	f6 fc       	sbrc	r15, 6
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x14c>
    27b6:	6f ef       	ldi	r22, 0xFF	; 255
    27b8:	7f ef       	ldi	r23, 0xFF	; 255
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <vfprintf+0x150>
    27bc:	69 2d       	mov	r22, r9
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	42 e0       	ldi	r20, 0x02	; 2
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	a4 0e       	add	r10, r20
    27c6:	b5 1e       	adc	r11, r21
    27c8:	c6 01       	movw	r24, r12
    27ca:	0e 94 20 15 	call	0x2a40	; 0x2a40 <strnlen>
    27ce:	8c 01       	movw	r16, r24
    27d0:	5f e7       	ldi	r21, 0x7F	; 127
    27d2:	f5 22       	and	r15, r21
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <vfprintf+0x18e>
    27d6:	f5 01       	movw	r30, r10
    27d8:	c0 80       	ld	r12, Z
    27da:	d1 80       	ldd	r13, Z+1	; 0x01
    27dc:	f6 fc       	sbrc	r15, 6
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <vfprintf+0x176>
    27e0:	6f ef       	ldi	r22, 0xFF	; 255
    27e2:	7f ef       	ldi	r23, 0xFF	; 255
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <vfprintf+0x17a>
    27e6:	69 2d       	mov	r22, r9
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	42 e0       	ldi	r20, 0x02	; 2
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	a4 0e       	add	r10, r20
    27f0:	b5 1e       	adc	r11, r21
    27f2:	c6 01       	movw	r24, r12
    27f4:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <strnlen_P>
    27f8:	8c 01       	movw	r16, r24
    27fa:	50 e8       	ldi	r21, 0x80	; 128
    27fc:	f5 2a       	or	r15, r21
    27fe:	f3 fe       	sbrs	r15, 3
    2800:	07 c0       	rjmp	.+14     	; 0x2810 <vfprintf+0x1a0>
    2802:	1a c0       	rjmp	.+52     	; 0x2838 <vfprintf+0x1c8>
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	b3 01       	movw	r22, r6
    280a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    280e:	ea 94       	dec	r14
    2810:	8e 2d       	mov	r24, r14
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	08 17       	cp	r16, r24
    2816:	19 07       	cpc	r17, r25
    2818:	a8 f3       	brcs	.-22     	; 0x2804 <vfprintf+0x194>
    281a:	0e c0       	rjmp	.+28     	; 0x2838 <vfprintf+0x1c8>
    281c:	f6 01       	movw	r30, r12
    281e:	f7 fc       	sbrc	r15, 7
    2820:	85 91       	lpm	r24, Z+
    2822:	f7 fe       	sbrs	r15, 7
    2824:	81 91       	ld	r24, Z+
    2826:	6f 01       	movw	r12, r30
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	b3 01       	movw	r22, r6
    282c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    2830:	e1 10       	cpse	r14, r1
    2832:	ea 94       	dec	r14
    2834:	01 50       	subi	r16, 0x01	; 1
    2836:	10 40       	sbci	r17, 0x00	; 0
    2838:	01 15       	cp	r16, r1
    283a:	11 05       	cpc	r17, r1
    283c:	79 f7       	brne	.-34     	; 0x281c <vfprintf+0x1ac>
    283e:	ea c0       	rjmp	.+468    	; 0x2a14 <vfprintf+0x3a4>
    2840:	94 36       	cpi	r25, 0x64	; 100
    2842:	11 f0       	breq	.+4      	; 0x2848 <vfprintf+0x1d8>
    2844:	99 36       	cpi	r25, 0x69	; 105
    2846:	69 f5       	brne	.+90     	; 0x28a2 <vfprintf+0x232>
    2848:	f7 fe       	sbrs	r15, 7
    284a:	08 c0       	rjmp	.+16     	; 0x285c <vfprintf+0x1ec>
    284c:	f5 01       	movw	r30, r10
    284e:	20 81       	ld	r18, Z
    2850:	31 81       	ldd	r19, Z+1	; 0x01
    2852:	42 81       	ldd	r20, Z+2	; 0x02
    2854:	53 81       	ldd	r21, Z+3	; 0x03
    2856:	84 e0       	ldi	r24, 0x04	; 4
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <vfprintf+0x200>
    285c:	f5 01       	movw	r30, r10
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	9c 01       	movw	r18, r24
    2864:	44 27       	eor	r20, r20
    2866:	37 fd       	sbrc	r19, 7
    2868:	40 95       	com	r20
    286a:	54 2f       	mov	r21, r20
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a8 0e       	add	r10, r24
    2872:	b9 1e       	adc	r11, r25
    2874:	9f e6       	ldi	r25, 0x6F	; 111
    2876:	f9 22       	and	r15, r25
    2878:	57 ff       	sbrs	r21, 7
    287a:	09 c0       	rjmp	.+18     	; 0x288e <vfprintf+0x21e>
    287c:	50 95       	com	r21
    287e:	40 95       	com	r20
    2880:	30 95       	com	r19
    2882:	21 95       	neg	r18
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	4f 4f       	sbci	r20, 0xFF	; 255
    2888:	5f 4f       	sbci	r21, 0xFF	; 255
    288a:	e0 e8       	ldi	r30, 0x80	; 128
    288c:	fe 2a       	or	r15, r30
    288e:	ca 01       	movw	r24, r20
    2890:	b9 01       	movw	r22, r18
    2892:	a1 01       	movw	r20, r2
    2894:	2a e0       	ldi	r18, 0x0A	; 10
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	0e 94 57 15 	call	0x2aae	; 0x2aae <__ultoa_invert>
    289c:	d8 2e       	mov	r13, r24
    289e:	d2 18       	sub	r13, r2
    28a0:	40 c0       	rjmp	.+128    	; 0x2922 <vfprintf+0x2b2>
    28a2:	95 37       	cpi	r25, 0x75	; 117
    28a4:	29 f4       	brne	.+10     	; 0x28b0 <vfprintf+0x240>
    28a6:	1f 2d       	mov	r17, r15
    28a8:	1f 7e       	andi	r17, 0xEF	; 239
    28aa:	2a e0       	ldi	r18, 0x0A	; 10
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	1d c0       	rjmp	.+58     	; 0x28ea <vfprintf+0x27a>
    28b0:	1f 2d       	mov	r17, r15
    28b2:	19 7f       	andi	r17, 0xF9	; 249
    28b4:	9f 36       	cpi	r25, 0x6F	; 111
    28b6:	61 f0       	breq	.+24     	; 0x28d0 <vfprintf+0x260>
    28b8:	90 37       	cpi	r25, 0x70	; 112
    28ba:	20 f4       	brcc	.+8      	; 0x28c4 <vfprintf+0x254>
    28bc:	98 35       	cpi	r25, 0x58	; 88
    28be:	09 f0       	breq	.+2      	; 0x28c2 <vfprintf+0x252>
    28c0:	ac c0       	rjmp	.+344    	; 0x2a1a <vfprintf+0x3aa>
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <vfprintf+0x272>
    28c4:	90 37       	cpi	r25, 0x70	; 112
    28c6:	39 f0       	breq	.+14     	; 0x28d6 <vfprintf+0x266>
    28c8:	98 37       	cpi	r25, 0x78	; 120
    28ca:	09 f0       	breq	.+2      	; 0x28ce <vfprintf+0x25e>
    28cc:	a6 c0       	rjmp	.+332    	; 0x2a1a <vfprintf+0x3aa>
    28ce:	04 c0       	rjmp	.+8      	; 0x28d8 <vfprintf+0x268>
    28d0:	28 e0       	ldi	r18, 0x08	; 8
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	0a c0       	rjmp	.+20     	; 0x28ea <vfprintf+0x27a>
    28d6:	10 61       	ori	r17, 0x10	; 16
    28d8:	14 fd       	sbrc	r17, 4
    28da:	14 60       	ori	r17, 0x04	; 4
    28dc:	20 e1       	ldi	r18, 0x10	; 16
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <vfprintf+0x27a>
    28e2:	14 fd       	sbrc	r17, 4
    28e4:	16 60       	ori	r17, 0x06	; 6
    28e6:	20 e1       	ldi	r18, 0x10	; 16
    28e8:	32 e0       	ldi	r19, 0x02	; 2
    28ea:	17 ff       	sbrs	r17, 7
    28ec:	08 c0       	rjmp	.+16     	; 0x28fe <vfprintf+0x28e>
    28ee:	f5 01       	movw	r30, r10
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	44 e0       	ldi	r20, 0x04	; 4
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	08 c0       	rjmp	.+16     	; 0x290e <vfprintf+0x29e>
    28fe:	f5 01       	movw	r30, r10
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	bc 01       	movw	r22, r24
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	42 e0       	ldi	r20, 0x02	; 2
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	a4 0e       	add	r10, r20
    2910:	b5 1e       	adc	r11, r21
    2912:	a1 01       	movw	r20, r2
    2914:	0e 94 57 15 	call	0x2aae	; 0x2aae <__ultoa_invert>
    2918:	d8 2e       	mov	r13, r24
    291a:	d2 18       	sub	r13, r2
    291c:	8f e7       	ldi	r24, 0x7F	; 127
    291e:	f8 2e       	mov	r15, r24
    2920:	f1 22       	and	r15, r17
    2922:	f6 fe       	sbrs	r15, 6
    2924:	0b c0       	rjmp	.+22     	; 0x293c <vfprintf+0x2cc>
    2926:	5e ef       	ldi	r21, 0xFE	; 254
    2928:	f5 22       	and	r15, r21
    292a:	d9 14       	cp	r13, r9
    292c:	38 f4       	brcc	.+14     	; 0x293c <vfprintf+0x2cc>
    292e:	f4 fe       	sbrs	r15, 4
    2930:	07 c0       	rjmp	.+14     	; 0x2940 <vfprintf+0x2d0>
    2932:	f2 fc       	sbrc	r15, 2
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <vfprintf+0x2d0>
    2936:	8f ee       	ldi	r24, 0xEF	; 239
    2938:	f8 22       	and	r15, r24
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <vfprintf+0x2d0>
    293c:	1d 2d       	mov	r17, r13
    293e:	01 c0       	rjmp	.+2      	; 0x2942 <vfprintf+0x2d2>
    2940:	19 2d       	mov	r17, r9
    2942:	f4 fe       	sbrs	r15, 4
    2944:	0d c0       	rjmp	.+26     	; 0x2960 <vfprintf+0x2f0>
    2946:	fe 01       	movw	r30, r28
    2948:	ed 0d       	add	r30, r13
    294a:	f1 1d       	adc	r31, r1
    294c:	80 81       	ld	r24, Z
    294e:	80 33       	cpi	r24, 0x30	; 48
    2950:	19 f4       	brne	.+6      	; 0x2958 <vfprintf+0x2e8>
    2952:	99 ee       	ldi	r25, 0xE9	; 233
    2954:	f9 22       	and	r15, r25
    2956:	08 c0       	rjmp	.+16     	; 0x2968 <vfprintf+0x2f8>
    2958:	1f 5f       	subi	r17, 0xFF	; 255
    295a:	f2 fe       	sbrs	r15, 2
    295c:	05 c0       	rjmp	.+10     	; 0x2968 <vfprintf+0x2f8>
    295e:	03 c0       	rjmp	.+6      	; 0x2966 <vfprintf+0x2f6>
    2960:	8f 2d       	mov	r24, r15
    2962:	86 78       	andi	r24, 0x86	; 134
    2964:	09 f0       	breq	.+2      	; 0x2968 <vfprintf+0x2f8>
    2966:	1f 5f       	subi	r17, 0xFF	; 255
    2968:	0f 2d       	mov	r16, r15
    296a:	f3 fc       	sbrc	r15, 3
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <vfprintf+0x326>
    296e:	f0 fe       	sbrs	r15, 0
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <vfprintf+0x320>
    2972:	1e 15       	cp	r17, r14
    2974:	10 f0       	brcs	.+4      	; 0x297a <vfprintf+0x30a>
    2976:	9d 2c       	mov	r9, r13
    2978:	0b c0       	rjmp	.+22     	; 0x2990 <vfprintf+0x320>
    297a:	9d 2c       	mov	r9, r13
    297c:	9e 0c       	add	r9, r14
    297e:	91 1a       	sub	r9, r17
    2980:	1e 2d       	mov	r17, r14
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <vfprintf+0x320>
    2984:	80 e2       	ldi	r24, 0x20	; 32
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	b3 01       	movw	r22, r6
    298a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    298e:	1f 5f       	subi	r17, 0xFF	; 255
    2990:	1e 15       	cp	r17, r14
    2992:	c0 f3       	brcs	.-16     	; 0x2984 <vfprintf+0x314>
    2994:	04 c0       	rjmp	.+8      	; 0x299e <vfprintf+0x32e>
    2996:	1e 15       	cp	r17, r14
    2998:	10 f4       	brcc	.+4      	; 0x299e <vfprintf+0x32e>
    299a:	e1 1a       	sub	r14, r17
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <vfprintf+0x330>
    299e:	ee 24       	eor	r14, r14
    29a0:	04 ff       	sbrs	r16, 4
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <vfprintf+0x352>
    29a4:	80 e3       	ldi	r24, 0x30	; 48
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	b3 01       	movw	r22, r6
    29aa:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    29ae:	02 ff       	sbrs	r16, 2
    29b0:	1d c0       	rjmp	.+58     	; 0x29ec <vfprintf+0x37c>
    29b2:	01 fd       	sbrc	r16, 1
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <vfprintf+0x34c>
    29b6:	88 e7       	ldi	r24, 0x78	; 120
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <vfprintf+0x368>
    29bc:	88 e5       	ldi	r24, 0x58	; 88
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0b c0       	rjmp	.+22     	; 0x29d8 <vfprintf+0x368>
    29c2:	80 2f       	mov	r24, r16
    29c4:	86 78       	andi	r24, 0x86	; 134
    29c6:	91 f0       	breq	.+36     	; 0x29ec <vfprintf+0x37c>
    29c8:	01 ff       	sbrs	r16, 1
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <vfprintf+0x360>
    29cc:	8b e2       	ldi	r24, 0x2B	; 43
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <vfprintf+0x362>
    29d0:	80 e2       	ldi	r24, 0x20	; 32
    29d2:	f7 fc       	sbrc	r15, 7
    29d4:	8d e2       	ldi	r24, 0x2D	; 45
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	b3 01       	movw	r22, r6
    29da:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <vfprintf+0x37c>
    29e0:	80 e3       	ldi	r24, 0x30	; 48
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	b3 01       	movw	r22, r6
    29e6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    29ea:	9a 94       	dec	r9
    29ec:	d9 14       	cp	r13, r9
    29ee:	c0 f3       	brcs	.-16     	; 0x29e0 <vfprintf+0x370>
    29f0:	da 94       	dec	r13
    29f2:	f1 01       	movw	r30, r2
    29f4:	ed 0d       	add	r30, r13
    29f6:	f1 1d       	adc	r31, r1
    29f8:	80 81       	ld	r24, Z
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	b3 01       	movw	r22, r6
    29fe:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    2a02:	dd 20       	and	r13, r13
    2a04:	a9 f7       	brne	.-22     	; 0x29f0 <vfprintf+0x380>
    2a06:	06 c0       	rjmp	.+12     	; 0x2a14 <vfprintf+0x3a4>
    2a08:	80 e2       	ldi	r24, 0x20	; 32
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	b3 01       	movw	r22, r6
    2a0e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <fputc>
    2a12:	ea 94       	dec	r14
    2a14:	ee 20       	and	r14, r14
    2a16:	c1 f7       	brne	.-16     	; 0x2a08 <vfprintf+0x398>
    2a18:	43 ce       	rjmp	.-890    	; 0x26a0 <vfprintf+0x30>
    2a1a:	f3 01       	movw	r30, r6
    2a1c:	66 81       	ldd	r22, Z+6	; 0x06
    2a1e:	77 81       	ldd	r23, Z+7	; 0x07
    2a20:	cb 01       	movw	r24, r22
    2a22:	2b 96       	adiw	r28, 0x0b	; 11
    2a24:	e2 e1       	ldi	r30, 0x12	; 18
    2a26:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

00002a2a <strnlen_P>:
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	05 90       	lpm	r0, Z+
    2a2e:	61 50       	subi	r22, 0x01	; 1
    2a30:	70 40       	sbci	r23, 0x00	; 0
    2a32:	01 10       	cpse	r0, r1
    2a34:	d8 f7       	brcc	.-10     	; 0x2a2c <strnlen_P+0x2>
    2a36:	80 95       	com	r24
    2a38:	90 95       	com	r25
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	9f 1f       	adc	r25, r31
    2a3e:	08 95       	ret

00002a40 <strnlen>:
    2a40:	fc 01       	movw	r30, r24
    2a42:	61 50       	subi	r22, 0x01	; 1
    2a44:	70 40       	sbci	r23, 0x00	; 0
    2a46:	01 90       	ld	r0, Z+
    2a48:	01 10       	cpse	r0, r1
    2a4a:	d8 f7       	brcc	.-10     	; 0x2a42 <strnlen+0x2>
    2a4c:	80 95       	com	r24
    2a4e:	90 95       	com	r25
    2a50:	8e 0f       	add	r24, r30
    2a52:	9f 1f       	adc	r25, r31
    2a54:	08 95       	ret

00002a56 <fputc>:
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	8c 01       	movw	r16, r24
    2a60:	eb 01       	movw	r28, r22
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	81 ff       	sbrs	r24, 1
    2a66:	1b c0       	rjmp	.+54     	; 0x2a9e <fputc+0x48>
    2a68:	82 ff       	sbrs	r24, 2
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <fputc+0x30>
    2a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	64 f4       	brge	.+24     	; 0x2a92 <fputc+0x3c>
    2a7a:	e8 81       	ld	r30, Y
    2a7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a7e:	01 93       	st	Z+, r16
    2a80:	f9 83       	std	Y+1, r31	; 0x01
    2a82:	e8 83       	st	Y, r30
    2a84:	06 c0       	rjmp	.+12     	; 0x2a92 <fputc+0x3c>
    2a86:	e8 85       	ldd	r30, Y+8	; 0x08
    2a88:	f9 85       	ldd	r31, Y+9	; 0x09
    2a8a:	80 2f       	mov	r24, r16
    2a8c:	09 95       	icall
    2a8e:	89 2b       	or	r24, r25
    2a90:	31 f4       	brne	.+12     	; 0x2a9e <fputc+0x48>
    2a92:	8e 81       	ldd	r24, Y+6	; 0x06
    2a94:	9f 81       	ldd	r25, Y+7	; 0x07
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9f 83       	std	Y+7, r25	; 0x07
    2a9a:	8e 83       	std	Y+6, r24	; 0x06
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <fputc+0x4c>
    2a9e:	0f ef       	ldi	r16, 0xFF	; 255
    2aa0:	1f ef       	ldi	r17, 0xFF	; 255
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	08 95       	ret

00002aae <__ultoa_invert>:
    2aae:	fa 01       	movw	r30, r20
    2ab0:	aa 27       	eor	r26, r26
    2ab2:	28 30       	cpi	r18, 0x08	; 8
    2ab4:	51 f1       	breq	.+84     	; 0x2b0a <__ultoa_invert+0x5c>
    2ab6:	20 31       	cpi	r18, 0x10	; 16
    2ab8:	81 f1       	breq	.+96     	; 0x2b1a <__ultoa_invert+0x6c>
    2aba:	e8 94       	clt
    2abc:	6f 93       	push	r22
    2abe:	6e 7f       	andi	r22, 0xFE	; 254
    2ac0:	6e 5f       	subi	r22, 0xFE	; 254
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	af 4f       	sbci	r26, 0xFF	; 255
    2aca:	b1 e0       	ldi	r27, 0x01	; 1
    2acc:	3e d0       	rcall	.+124    	; 0x2b4a <__ultoa_invert+0x9c>
    2ace:	b4 e0       	ldi	r27, 0x04	; 4
    2ad0:	3c d0       	rcall	.+120    	; 0x2b4a <__ultoa_invert+0x9c>
    2ad2:	67 0f       	add	r22, r23
    2ad4:	78 1f       	adc	r23, r24
    2ad6:	89 1f       	adc	r24, r25
    2ad8:	9a 1f       	adc	r25, r26
    2ada:	a1 1d       	adc	r26, r1
    2adc:	68 0f       	add	r22, r24
    2ade:	79 1f       	adc	r23, r25
    2ae0:	8a 1f       	adc	r24, r26
    2ae2:	91 1d       	adc	r25, r1
    2ae4:	a1 1d       	adc	r26, r1
    2ae6:	6a 0f       	add	r22, r26
    2ae8:	71 1d       	adc	r23, r1
    2aea:	81 1d       	adc	r24, r1
    2aec:	91 1d       	adc	r25, r1
    2aee:	a1 1d       	adc	r26, r1
    2af0:	20 d0       	rcall	.+64     	; 0x2b32 <__ultoa_invert+0x84>
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__ultoa_invert+0x48>
    2af4:	68 94       	set
    2af6:	3f 91       	pop	r19
    2af8:	2a e0       	ldi	r18, 0x0A	; 10
    2afa:	26 9f       	mul	r18, r22
    2afc:	11 24       	eor	r1, r1
    2afe:	30 19       	sub	r19, r0
    2b00:	30 5d       	subi	r19, 0xD0	; 208
    2b02:	31 93       	st	Z+, r19
    2b04:	de f6       	brtc	.-74     	; 0x2abc <__ultoa_invert+0xe>
    2b06:	cf 01       	movw	r24, r30
    2b08:	08 95       	ret
    2b0a:	46 2f       	mov	r20, r22
    2b0c:	47 70       	andi	r20, 0x07	; 7
    2b0e:	40 5d       	subi	r20, 0xD0	; 208
    2b10:	41 93       	st	Z+, r20
    2b12:	b3 e0       	ldi	r27, 0x03	; 3
    2b14:	0f d0       	rcall	.+30     	; 0x2b34 <__ultoa_invert+0x86>
    2b16:	c9 f7       	brne	.-14     	; 0x2b0a <__ultoa_invert+0x5c>
    2b18:	f6 cf       	rjmp	.-20     	; 0x2b06 <__ultoa_invert+0x58>
    2b1a:	46 2f       	mov	r20, r22
    2b1c:	4f 70       	andi	r20, 0x0F	; 15
    2b1e:	40 5d       	subi	r20, 0xD0	; 208
    2b20:	4a 33       	cpi	r20, 0x3A	; 58
    2b22:	18 f0       	brcs	.+6      	; 0x2b2a <__ultoa_invert+0x7c>
    2b24:	49 5d       	subi	r20, 0xD9	; 217
    2b26:	31 fd       	sbrc	r19, 1
    2b28:	40 52       	subi	r20, 0x20	; 32
    2b2a:	41 93       	st	Z+, r20
    2b2c:	02 d0       	rcall	.+4      	; 0x2b32 <__ultoa_invert+0x84>
    2b2e:	a9 f7       	brne	.-22     	; 0x2b1a <__ultoa_invert+0x6c>
    2b30:	ea cf       	rjmp	.-44     	; 0x2b06 <__ultoa_invert+0x58>
    2b32:	b4 e0       	ldi	r27, 0x04	; 4
    2b34:	a6 95       	lsr	r26
    2b36:	97 95       	ror	r25
    2b38:	87 95       	ror	r24
    2b3a:	77 95       	ror	r23
    2b3c:	67 95       	ror	r22
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__ultoa_invert+0x86>
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	61 05       	cpc	r22, r1
    2b46:	71 05       	cpc	r23, r1
    2b48:	08 95       	ret
    2b4a:	9b 01       	movw	r18, r22
    2b4c:	ac 01       	movw	r20, r24
    2b4e:	0a 2e       	mov	r0, r26
    2b50:	06 94       	lsr	r0
    2b52:	57 95       	ror	r21
    2b54:	47 95       	ror	r20
    2b56:	37 95       	ror	r19
    2b58:	27 95       	ror	r18
    2b5a:	ba 95       	dec	r27
    2b5c:	c9 f7       	brne	.-14     	; 0x2b50 <__ultoa_invert+0xa2>
    2b5e:	62 0f       	add	r22, r18
    2b60:	73 1f       	adc	r23, r19
    2b62:	84 1f       	adc	r24, r20
    2b64:	95 1f       	adc	r25, r21
    2b66:	a0 1d       	adc	r26, r0
    2b68:	08 95       	ret

00002b6a <_exit>:
    2b6a:	f8 94       	cli

00002b6c <__stop_program>:
    2b6c:	ff cf       	rjmp	.-2      	; 0x2b6c <__stop_program>
