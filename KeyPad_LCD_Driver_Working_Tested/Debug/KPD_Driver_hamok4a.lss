
KPD_Driver_hamok4a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002708  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002708  0000277c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c98  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d5c  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000052e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005473  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000074b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000085b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000953c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000997e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <main>
      7a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e6       	ldi	r26, 0x64	; 100
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e6       	ldi	r22, 0x64	; 100
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:




void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 ef       	ldi	r24, 0xF0	; 240
     cac:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 ef       	ldi	r24, 0xF0	; 240
     cb4:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
     cbe:	e8 e3       	ldi	r30, 0x38	; 56
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
     cc4:	e5 e3       	ldi	r30, 0x35	; 53
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8f e0       	ldi	r24, 0x0F	; 15
     cca:	80 83       	st	Z, r24
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
     ccc:	e2 e3       	ldi	r30, 0x32	; 50
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	27 97       	sbiw	r28, 0x07	; 7
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	8c 83       	std	Y+4, r24	; 0x04
     cf0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
     cf2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	80 32       	cpi	r24, 0x20	; 32
     cf8:	30 f4       	brcc	.+12     	; 0xd06 <DIO_u8SetPinDirection+0x2c>
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	31 f0       	breq	.+12     	; 0xd0c <DIO_u8SetPinDirection+0x32>
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	88 23       	and	r24, r24
     d04:	19 f0       	breq	.+6      	; 0xd0c <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	8b 83       	std	Y+3, r24	; 0x03
     d0a:	ce c0       	rjmp	.+412    	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	87 70       	andi	r24, 0x07	; 7
     d10:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	86 95       	lsr	r24
     d16:	86 95       	lsr	r24
     d18:	86 95       	lsr	r24
     d1a:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	3f 83       	std	Y+7, r19	; 0x07
     d24:	2e 83       	std	Y+6, r18	; 0x06
     d26:	6e 81       	ldd	r22, Y+6	; 0x06
     d28:	7f 81       	ldd	r23, Y+7	; 0x07
     d2a:	61 30       	cpi	r22, 0x01	; 1
     d2c:	71 05       	cpc	r23, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <DIO_u8SetPinDirection+0x58>
     d30:	41 c0       	rjmp	.+130    	; 0xdb4 <DIO_u8SetPinDirection+0xda>
     d32:	8e 81       	ldd	r24, Y+6	; 0x06
     d34:	9f 81       	ldd	r25, Y+7	; 0x07
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	91 05       	cpc	r25, r1
     d3a:	34 f4       	brge	.+12     	; 0xd48 <DIO_u8SetPinDirection+0x6e>
     d3c:	2e 81       	ldd	r18, Y+6	; 0x06
     d3e:	3f 81       	ldd	r19, Y+7	; 0x07
     d40:	21 15       	cp	r18, r1
     d42:	31 05       	cpc	r19, r1
     d44:	71 f0       	breq	.+28     	; 0xd62 <DIO_u8SetPinDirection+0x88>
     d46:	b0 c0       	rjmp	.+352    	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
     d48:	6e 81       	ldd	r22, Y+6	; 0x06
     d4a:	7f 81       	ldd	r23, Y+7	; 0x07
     d4c:	62 30       	cpi	r22, 0x02	; 2
     d4e:	71 05       	cpc	r23, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO_u8SetPinDirection+0x7a>
     d52:	59 c0       	rjmp	.+178    	; 0xe06 <DIO_u8SetPinDirection+0x12c>
     d54:	8e 81       	ldd	r24, Y+6	; 0x06
     d56:	9f 81       	ldd	r25, Y+7	; 0x07
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	91 05       	cpc	r25, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <DIO_u8SetPinDirection+0x86>
     d5e:	7c c0       	rjmp	.+248    	; 0xe58 <DIO_u8SetPinDirection+0x17e>
     d60:	a3 c0       	rjmp	.+326    	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	88 23       	and	r24, r24
     d66:	21 f0       	breq	.+8      	; 0xd70 <DIO_u8SetPinDirection+0x96>
     d68:	8d 81       	ldd	r24, Y+5	; 0x05
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <DIO_u8SetPinDirection+0x96>
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	aa e3       	ldi	r26, 0x3A	; 58
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ea e3       	ldi	r30, 0x3A	; 58
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_u8SetPinDirection+0xb2>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	2a 95       	dec	r18
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_u8SetPinDirection+0xae>
     d90:	80 95       	com	r24
     d92:	48 23       	and	r20, r24
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	b9 01       	movw	r22, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_u8SetPinDirection+0xce>
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	8a 95       	dec	r24
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_u8SetPinDirection+0xca>
     dac:	cb 01       	movw	r24, r22
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	7a c0       	rjmp	.+244    	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	88 23       	and	r24, r24
     db8:	21 f0       	breq	.+8      	; 0xdc2 <DIO_u8SetPinDirection+0xe8>
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <DIO_u8SetPinDirection+0xe8>
     dc0:	1d 82       	std	Y+5, r1	; 0x05
     dc2:	a7 e3       	ldi	r26, 0x37	; 55
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e7 e3       	ldi	r30, 0x37	; 55
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_u8SetPinDirection+0x104>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	2a 95       	dec	r18
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_u8SetPinDirection+0x100>
     de2:	80 95       	com	r24
     de4:	48 23       	and	r20, r24
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	b9 01       	movw	r22, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_u8SetPinDirection+0x120>
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	8a 95       	dec	r24
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_u8SetPinDirection+0x11c>
     dfe:	cb 01       	movw	r24, r22
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	51 c0       	rjmp	.+162    	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	88 23       	and	r24, r24
     e0a:	21 f0       	breq	.+8      	; 0xe14 <DIO_u8SetPinDirection+0x13a>
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	09 f0       	breq	.+2      	; 0xe14 <DIO_u8SetPinDirection+0x13a>
     e12:	1d 82       	std	Y+5, r1	; 0x05
     e14:	a4 e3       	ldi	r26, 0x34	; 52
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e4 e3       	ldi	r30, 0x34	; 52
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_u8SetPinDirection+0x156>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	2a 95       	dec	r18
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_u8SetPinDirection+0x152>
     e34:	80 95       	com	r24
     e36:	48 23       	and	r20, r24
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b9 01       	movw	r22, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_u8SetPinDirection+0x172>
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_u8SetPinDirection+0x16e>
     e50:	cb 01       	movw	r24, r22
     e52:	84 2b       	or	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	28 c0       	rjmp	.+80     	; 0xea8 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	88 23       	and	r24, r24
     e5c:	21 f0       	breq	.+8      	; 0xe66 <DIO_u8SetPinDirection+0x18c>
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	09 f0       	breq	.+2      	; 0xe66 <DIO_u8SetPinDirection+0x18c>
     e64:	1d 82       	std	Y+5, r1	; 0x05
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x1a8>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	2a 95       	dec	r18
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x1a4>
     e86:	80 95       	com	r24
     e88:	48 23       	and	r20, r24
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	b9 01       	movw	r22, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_u8SetPinDirection+0x1c4>
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	8a 95       	dec	r24
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_u8SetPinDirection+0x1c0>
     ea2:	cb 01       	movw	r24, r22
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     eaa:	27 96       	adiw	r28, 0x07	; 7
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	27 97       	sbiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	8c 83       	std	Y+4, r24	; 0x04
     ed2:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
	/*	OUTPUT:                                              */
	/*			return ERROR STATE                           */
	/*********************************************************/
   u8 Local_u8Error=ERROR_OK;
     ed4:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	80 32       	cpi	r24, 0x20	; 32
     eda:	30 f4       	brcc	.+12     	; 0xee8 <DIO_u8SetPinValue+0x2c>
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	31 f0       	breq	.+12     	; 0xeee <DIO_u8SetPinValue+0x32>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	88 23       	and	r24, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	ce c0       	rjmp	.+412    	; 0x108a <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	87 70       	andi	r24, 0x07	; 7
     ef2:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	86 95       	lsr	r24
     ef8:	86 95       	lsr	r24
     efa:	86 95       	lsr	r24
     efc:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3f 83       	std	Y+7, r19	; 0x07
     f06:	2e 83       	std	Y+6, r18	; 0x06
     f08:	6e 81       	ldd	r22, Y+6	; 0x06
     f0a:	7f 81       	ldd	r23, Y+7	; 0x07
     f0c:	61 30       	cpi	r22, 0x01	; 1
     f0e:	71 05       	cpc	r23, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <DIO_u8SetPinValue+0x58>
     f12:	41 c0       	rjmp	.+130    	; 0xf96 <DIO_u8SetPinValue+0xda>
     f14:	8e 81       	ldd	r24, Y+6	; 0x06
     f16:	9f 81       	ldd	r25, Y+7	; 0x07
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	91 05       	cpc	r25, r1
     f1c:	34 f4       	brge	.+12     	; 0xf2a <DIO_u8SetPinValue+0x6e>
     f1e:	2e 81       	ldd	r18, Y+6	; 0x06
     f20:	3f 81       	ldd	r19, Y+7	; 0x07
     f22:	21 15       	cp	r18, r1
     f24:	31 05       	cpc	r19, r1
     f26:	71 f0       	breq	.+28     	; 0xf44 <DIO_u8SetPinValue+0x88>
     f28:	b0 c0       	rjmp	.+352    	; 0x108a <DIO_u8SetPinValue+0x1ce>
     f2a:	6e 81       	ldd	r22, Y+6	; 0x06
     f2c:	7f 81       	ldd	r23, Y+7	; 0x07
     f2e:	62 30       	cpi	r22, 0x02	; 2
     f30:	71 05       	cpc	r23, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <DIO_u8SetPinValue+0x7a>
     f34:	59 c0       	rjmp	.+178    	; 0xfe8 <DIO_u8SetPinValue+0x12c>
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	9f 81       	ldd	r25, Y+7	; 0x07
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <DIO_u8SetPinValue+0x86>
     f40:	7c c0       	rjmp	.+248    	; 0x103a <DIO_u8SetPinValue+0x17e>
     f42:	a3 c0       	rjmp	.+326    	; 0x108a <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	88 23       	and	r24, r24
     f48:	21 f0       	breq	.+8      	; 0xf52 <DIO_u8SetPinValue+0x96>
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	09 f0       	breq	.+2      	; 0xf52 <DIO_u8SetPinValue+0x96>
     f50:	1d 82       	std	Y+5, r1	; 0x05
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_u8SetPinValue+0xb2>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	2a 95       	dec	r18
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_u8SetPinValue+0xae>
     f72:	80 95       	com	r24
     f74:	48 23       	and	r20, r24
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_u8SetPinValue+0xce>
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_u8SetPinValue+0xca>
     f8e:	cb 01       	movw	r24, r22
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	7a c0       	rjmp	.+244    	; 0x108a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	88 23       	and	r24, r24
     f9a:	21 f0       	breq	.+8      	; 0xfa4 <DIO_u8SetPinValue+0xe8>
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <DIO_u8SetPinValue+0xe8>
     fa2:	1d 82       	std	Y+5, r1	; 0x05
     fa4:	a8 e3       	ldi	r26, 0x38	; 56
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e8 e3       	ldi	r30, 0x38	; 56
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_u8SetPinValue+0x104>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	2a 95       	dec	r18
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_u8SetPinValue+0x100>
     fc4:	80 95       	com	r24
     fc6:	48 23       	and	r20, r24
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b9 01       	movw	r22, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_u8SetPinValue+0x120>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	8a 95       	dec	r24
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_u8SetPinValue+0x11c>
     fe0:	cb 01       	movw	r24, r22
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	51 c0       	rjmp	.+162    	; 0x108a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	88 23       	and	r24, r24
     fec:	21 f0       	breq	.+8      	; 0xff6 <DIO_u8SetPinValue+0x13a>
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_u8SetPinValue+0x13a>
     ff4:	1d 82       	std	Y+5, r1	; 0x05
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8SetPinValue+0x156>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	2a 95       	dec	r18
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8SetPinValue+0x152>
    1016:	80 95       	com	r24
    1018:	48 23       	and	r20, r24
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	b9 01       	movw	r22, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_u8SetPinValue+0x172>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	8a 95       	dec	r24
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_u8SetPinValue+0x16e>
    1032:	cb 01       	movw	r24, r22
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	28 c0       	rjmp	.+80     	; 0x108a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	88 23       	and	r24, r24
    103e:	21 f0       	breq	.+8      	; 0x1048 <DIO_u8SetPinValue+0x18c>
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	09 f0       	breq	.+2      	; 0x1048 <DIO_u8SetPinValue+0x18c>
    1046:	1d 82       	std	Y+5, r1	; 0x05
    1048:	a2 e3       	ldi	r26, 0x32	; 50
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e2 e3       	ldi	r30, 0x32	; 50
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_u8SetPinValue+0x1a8>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	2a 95       	dec	r18
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_u8SetPinValue+0x1a4>
    1068:	80 95       	com	r24
    106a:	48 23       	and	r20, r24
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	b9 01       	movw	r22, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x1c4>
    107c:	66 0f       	add	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	8a 95       	dec	r24
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x1c0>
    1084:	cb 01       	movw	r24, r22
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    108c:	27 96       	adiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	28 97       	sbiw	r28, 0x08	; 8
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8c 83       	std	Y+4, r24	; 0x04
    10b4:	7e 83       	std	Y+6, r23	; 0x06
    10b6:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    10b8:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	80 32       	cpi	r24, 0x20	; 32
    10be:	20 f4       	brcc	.+8      	; 0x10c8 <DIO_u8GetPinValue+0x2a>
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	19 f4       	brne	.+6      	; 0x10ce <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	78 c0       	rjmp	.+240    	; 0x11be <DIO_u8GetPinValue+0x120>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	87 70       	andi	r24, 0x07	; 7
    10d2:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	86 95       	lsr	r24
    10d8:	86 95       	lsr	r24
    10da:	86 95       	lsr	r24
    10dc:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	38 87       	std	Y+8, r19	; 0x08
    10e6:	2f 83       	std	Y+7, r18	; 0x07
    10e8:	4f 81       	ldd	r20, Y+7	; 0x07
    10ea:	58 85       	ldd	r21, Y+8	; 0x08
    10ec:	41 30       	cpi	r20, 0x01	; 1
    10ee:	51 05       	cpc	r21, r1
    10f0:	59 f1       	breq	.+86     	; 0x1148 <DIO_u8GetPinValue+0xaa>
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	91 05       	cpc	r25, r1
    10fa:	34 f4       	brge	.+12     	; 0x1108 <DIO_u8GetPinValue+0x6a>
    10fc:	2f 81       	ldd	r18, Y+7	; 0x07
    10fe:	38 85       	ldd	r19, Y+8	; 0x08
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	69 f0       	breq	.+26     	; 0x1120 <DIO_u8GetPinValue+0x82>
    1106:	5b c0       	rjmp	.+182    	; 0x11be <DIO_u8GetPinValue+0x120>
    1108:	4f 81       	ldd	r20, Y+7	; 0x07
    110a:	58 85       	ldd	r21, Y+8	; 0x08
    110c:	42 30       	cpi	r20, 0x02	; 2
    110e:	51 05       	cpc	r21, r1
    1110:	79 f1       	breq	.+94     	; 0x1170 <DIO_u8GetPinValue+0xd2>
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_u8GetPinValue+0x80>
    111c:	3d c0       	rjmp	.+122    	; 0x1198 <DIO_u8GetPinValue+0xfa>
    111e:	4f c0       	rjmp	.+158    	; 0x11be <DIO_u8GetPinValue+0x120>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
    1120:	e9 e3       	ldi	r30, 0x39	; 57
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8GetPinValue+0x9a>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8GetPinValue+0x96>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ed 81       	ldd	r30, Y+5	; 0x05
    1142:	fe 81       	ldd	r31, Y+6	; 0x06
    1144:	80 83       	st	Z, r24
    1146:	3b c0       	rjmp	.+118    	; 0x11be <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
    1148:	e6 e3       	ldi	r30, 0x36	; 54
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8GetPinValue+0xc2>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_u8GetPinValue+0xbe>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	80 83       	st	Z, r24
    116e:	27 c0       	rjmp	.+78     	; 0x11be <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
    1170:	e3 e3       	ldi	r30, 0x33	; 51
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8GetPinValue+0xea>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8GetPinValue+0xe6>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ed 81       	ldd	r30, Y+5	; 0x05
    1192:	fe 81       	ldd	r31, Y+6	; 0x06
    1194:	80 83       	st	Z, r24
    1196:	13 c0       	rjmp	.+38     	; 0x11be <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
    1198:	e0 e3       	ldi	r30, 0x30	; 48
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8GetPinValue+0x112>
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8GetPinValue+0x10e>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ba:	fe 81       	ldd	r31, Y+6	; 0x06
    11bc:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11c0:	28 96       	adiw	r28, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_u8SetPortDirection+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    11e2:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_u8SetPortnValue+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_u8SetPortnValue+0x8>
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    1208:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	18 f0       	brcs	.+6      	; 0x1216 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	32 c0       	rjmp	.+100    	; 0x127a <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3d 83       	std	Y+5, r19	; 0x05
    121e:	2c 83       	std	Y+4, r18	; 0x04
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	d1 f0       	breq	.+52     	; 0x125e <DIO_u8SetPortnValue+0x68>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <DIO_u8SetPortnValue+0x48>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <DIO_u8SetPortnValue+0x5e>
    123c:	1e c0       	rjmp	.+60     	; 0x127a <DIO_u8SetPortnValue+0x84>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <DIO_u8SetPortnValue+0x72>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <DIO_u8SetPortnValue+0x7c>
    1252:	13 c0       	rjmp	.+38     	; 0x127a <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	80 83       	st	Z, r24
    125c:	0e c0       	rjmp	.+28     	; 0x127a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	80 83       	st	Z, r24
    1266:	09 c0       	rjmp	.+18     	; 0x127a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
    1268:	e5 e3       	ldi	r30, 0x35	; 53
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	80 83       	st	Z, r24
    1270:	04 c0       	rjmp	.+8      	; 0x127a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
    1272:	e2 e3       	ldi	r30, 0x32	; 50
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_u8GetPortnValue+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_u8GetPortnValue+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_u8GetPortnValue+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	7c 83       	std	Y+4, r23	; 0x04
    129e:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    12a0:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	18 f0       	brcs	.+6      	; 0x12ae <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	3a c0       	rjmp	.+116    	; 0x1322 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3e 83       	std	Y+6, r19	; 0x06
    12b6:	2d 83       	std	Y+5, r18	; 0x05
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	e1 f0       	breq	.+56     	; 0x12fa <DIO_u8GetPortnValue+0x6e>
    12c2:	2d 81       	ldd	r18, Y+5	; 0x05
    12c4:	3e 81       	ldd	r19, Y+6	; 0x06
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <DIO_u8GetPortnValue+0x4a>
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <DIO_u8GetPortnValue+0x60>
    12d4:	26 c0       	rjmp	.+76     	; 0x1322 <DIO_u8GetPortnValue+0x96>
    12d6:	2d 81       	ldd	r18, Y+5	; 0x05
    12d8:	3e 81       	ldd	r19, Y+6	; 0x06
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	a1 f0       	breq	.+40     	; 0x1308 <DIO_u8GetPortnValue+0x7c>
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	b1 f0       	breq	.+44     	; 0x1316 <DIO_u8GetPortnValue+0x8a>
    12ea:	1b c0       	rjmp	.+54     	; 0x1322 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
    12ec:	e9 e3       	ldi	r30, 0x39	; 57
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	eb 81       	ldd	r30, Y+3	; 0x03
    12f4:	fc 81       	ldd	r31, Y+4	; 0x04
    12f6:	80 83       	st	Z, r24
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
    12fa:	e6 e3       	ldi	r30, 0x36	; 54
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	eb 81       	ldd	r30, Y+3	; 0x03
    1302:	fc 81       	ldd	r31, Y+4	; 0x04
    1304:	80 83       	st	Z, r24
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
    1308:	e3 e3       	ldi	r30, 0x33	; 51
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	eb 81       	ldd	r30, Y+3	; 0x03
    1310:	fc 81       	ldd	r31, Y+4	; 0x04
    1312:	80 83       	st	Z, r24
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
    1316:	e0 e3       	ldi	r30, 0x30	; 48
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	eb 81       	ldd	r30, Y+3	; 0x03
    131e:	fc 81       	ldd	r31, Y+4	; 0x04
    1320:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	26 96       	adiw	r28, 0x06	; 6
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <DelayMs>:
 *      Author: Monika Ossama
 */
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <DelayMs+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <DelayMs+0x8>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DelayMs+0xa>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
	u16 i,j ;
	for(j=0;j<u16Time;j++){
    1348:	1a 82       	std	Y+2, r1	; 0x02
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <DelayMs+0x4e>
		for(i=0;i<295;i++){
    134e:	1c 82       	std	Y+4, r1	; 0x04
    1350:	1b 82       	std	Y+3, r1	; 0x03
    1352:	0d c0       	rjmp	.+26     	; 0x136e <DelayMs+0x38>
	...
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	87 32       	cpi	r24, 0x27	; 39
    1376:	92 07       	cpc	r25, r18
    1378:	68 f3       	brcs	.-38     	; 0x1354 <DelayMs+0x1e>
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
	u16 i,j ;
	for(j=0;j<u16Time;j++){
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	29 81       	ldd	r18, Y+1	; 0x01
    1386:	3a 81       	ldd	r19, Y+2	; 0x02
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	f0 f2       	brcs	.-68     	; 0x134e <DelayMs+0x18>
			asm("NOP");
			asm("NOP");
		}
	}

}
    1392:	26 96       	adiw	r28, 0x06	; 6
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <main>:
#define RightKey      		 4
#define LeftKey      	 	 4
#define NumberOFPics     	 9
#define JumpNumberOFPics     3

int main(void){
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	61 97       	sbiw	r28, 0x11	; 17
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
	//u8 u8LoopIndex;
	u8 keypad_Status[KPD_NUM_OF_INPUTS * KPD_NUM_OF_OUTPUTS];
	DIO_voidInit();
    13b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	LCD_Init();			/* Initialization of LCD*/
    13bc:	0e 94 5f 11 	call	0x22be	; 0x22be <LCD_Init>

	while(1)
	{
		KPD_u8GetKeysState(keypad_Status);
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	0e 94 03 0a 	call	0x1406	; 0x1406 <KPD_u8GetKeysState>
		if(keypad_Status[JumpKey]==KPD_u8_PRESSED){
    13c8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	51 f4       	brne	.+20     	; 0x13e2 <main+0x3e>
			LCD_String_xy(0,0,"5");
    13ce:	20 e6       	ldi	r18, 0x60	; 96
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	0e 94 94 12 	call	0x2528	; 0x2528 <LCD_String_xy>
    13e0:	ef cf       	rjmp	.-34     	; 0x13c0 <main+0x1c>
		}
		else if(keypad_Status[RightKey]==KPD_u8_PRESSED){
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	51 f4       	brne	.+20     	; 0x13fc <main+0x58>
			LCD_String_xy(0,0,"4");
    13e8:	22 e6       	ldi	r18, 0x62	; 98
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	0e 94 94 12 	call	0x2528	; 0x2528 <LCD_String_xy>
    13fa:	e2 cf       	rjmp	.-60     	; 0x13c0 <main+0x1c>
		}
		else if(keypad_Status[LeftKey]==KPD_u8_PRESSED){
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	f9 f2       	breq	.-66     	; 0x13c0 <main+0x1c>

		}
		else if(keypad_Status[SleepKey]==KPD_u8_PRESSED){
    1402:	8a 85       	ldd	r24, Y+10	; 0x0a
    1404:	dd cf       	rjmp	.-70     	; 0x13c0 <main+0x1c>

00001406 <KPD_u8GetKeysState>:

#include "KPD_interface.h"
#include "KPD_private.h"


u8 KPD_u8GetKeysState(u8 *Copy_PAu8KeyStates){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	28 97       	sbiw	r28, 0x08	; 8
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	98 87       	std	Y+8, r25	; 0x08
    141c:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8ErrorState = ERROR_OK;
    141e:	1d 82       	std	Y+5, r1	; 0x05
	if (Copy_PAu8KeyStates == NULL) Local_u8ErrorState = ERROR_NOK;
    1420:	8f 81       	ldd	r24, Y+7	; 0x07
    1422:	98 85       	ldd	r25, Y+8	; 0x08
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	11 f4       	brne	.+4      	; 0x142c <KPD_u8GetKeysState+0x26>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_outerLoopIndex = LOOP_INITAL_VALUE ;
    142c:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_outerLoopSetter= LOOP_INITAL_VALUE ;
    142e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_InnerLoopIndex = LOOP_INITAL_VALUE ;
    1430:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_pinValue ;
	u8 Local_ArrIndex = ARRAY_INITAL_INDEX;
    1432:	19 82       	std	Y+1, r1	; 0x01
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){
    1434:	1c 82       	std	Y+4, r1	; 0x04
    1436:	53 c0       	rjmp	.+166    	; 0x14de <KPD_u8GetKeysState+0xd8>


				for(Local_outerLoopSetter = LOOP_INITAL_VALUE; Local_outerLoopSetter < KPD_NUM_OF_OUTPUTS; Local_outerLoopSetter++){
    1438:	1b 82       	std	Y+3, r1	; 0x03
    143a:	1c c0       	rjmp	.+56     	; 0x1474 <KPD_u8GetKeysState+0x6e>
					if (Local_outerLoopIndex == Local_outerLoopSetter){
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	98 17       	cp	r25, r24
    1442:	59 f4       	brne	.+22     	; 0x145a <KPD_u8GetKeysState+0x54>
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_LOW);
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	fc 01       	movw	r30, r24
    144c:	e0 59       	subi	r30, 0x90	; 144
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_u8SetPinValue>
    1458:	0a c0       	rjmp	.+20     	; 0x146e <KPD_u8GetKeysState+0x68>
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	e0 59       	subi	r30, 0x90	; 144
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_u8SetPinValue>
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){


				for(Local_outerLoopSetter = LOOP_INITAL_VALUE; Local_outerLoopSetter < KPD_NUM_OF_OUTPUTS; Local_outerLoopSetter++){
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	08 f3       	brcs	.-62     	; 0x143c <KPD_u8GetKeysState+0x36>
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
					}
				}

				for(Local_InnerLoopIndex = LOOP_INITAL_VALUE; Local_InnerLoopIndex < KPD_NUM_OF_INPUTS; Local_InnerLoopIndex++){
    147a:	1a 82       	std	Y+2, r1	; 0x02
    147c:	2a c0       	rjmp	.+84     	; 0x14d2 <KPD_u8GetKeysState+0xcc>
					 DIO_u8GetPinValue(KPD_Au8KpdInputConnection[Local_InnerLoopIndex], &Local_pinValue);
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	e4 59       	subi	r30, 0x94	; 148
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 81       	ld	r24, Z
    148c:	9e 01       	movw	r18, r28
    148e:	2a 5f       	subi	r18, 0xFA	; 250
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	b9 01       	movw	r22, r18
    1494:	0e 94 4f 08 	call	0x109e	; 0x109e <DIO_u8GetPinValue>
					 if(Local_pinValue == DIO_u8_PIN_LOW){
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	88 23       	and	r24, r24
    149c:	59 f4       	brne	.+22     	; 0x14b4 <KPD_u8GetKeysState+0xae>
						 Copy_PAu8KeyStates[Local_ArrIndex]= KPD_u8_PRESSED;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8f 81       	ldd	r24, Y+7	; 0x07
    14a6:	98 85       	ldd	r25, Y+8	; 0x08
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	80 83       	st	Z, r24
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <KPD_u8GetKeysState+0xc0>
					 }else{
						 Copy_PAu8KeyStates[Local_ArrIndex]= KPD_u8_RELEASED;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	98 85       	ldd	r25, Y+8	; 0x08
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	10 82       	st	Z, r1
					 }
					 Local_ArrIndex++;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	89 83       	std	Y+1, r24	; 0x01
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
					}
				}

				for(Local_InnerLoopIndex = LOOP_INITAL_VALUE; Local_InnerLoopIndex < KPD_NUM_OF_INPUTS; Local_InnerLoopIndex++){
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	98 f2       	brcs	.-90     	; 0x147e <KPD_u8GetKeysState+0x78>
	u8 Local_InnerLoopIndex = LOOP_INITAL_VALUE ;
	u8 Local_pinValue ;
	u8 Local_ArrIndex = ARRAY_INITAL_INDEX;
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <KPD_u8GetKeysState+0xe0>
    14e4:	a9 cf       	rjmp	.-174    	; 0x1438 <KPD_u8GetKeysState+0x32>





	return Local_u8ErrorState;
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14e8:	28 96       	adiw	r28, 0x08	; 8
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LCD_Command>:
#define RS PB0				/* Define Register Select pin */
#define EN PB1 				/* Define Enable signal pin */


void LCD_Command( unsigned char cmnd )
{
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	c7 55       	subi	r28, 0x57	; 87
    1508:	d0 40       	sbci	r29, 0x00	; 0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	fe 01       	movw	r30, r28
    1516:	e9 5a       	subi	r30, 0xA9	; 169
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	98 2f       	mov	r25, r24
    1528:	9f 70       	andi	r25, 0x0F	; 15
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5a       	subi	r30, 0xA9	; 169
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	80 7f       	andi	r24, 0xF0	; 240
    1534:	89 2b       	or	r24, r25
    1536:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8e 7f       	andi	r24, 0xFE	; 254
    1544:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	8c 93       	st	X, r24
    1554:	fe 01       	movw	r30, r28
    1556:	ed 5a       	subi	r30, 0xAD	; 173
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e8       	ldi	r26, 0x80	; 128
    1560:	bf e3       	ldi	r27, 0x3F	; 63
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    156a:	8e 01       	movw	r16, r28
    156c:	01 5b       	subi	r16, 0xB1	; 177
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	ed 5a       	subi	r30, 0xAD	; 173
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	2b ea       	ldi	r18, 0xAB	; 171
    1580:	3a ea       	ldi	r19, 0xAA	; 170
    1582:	4a e2       	ldi	r20, 0x2A	; 42
    1584:	50 e4       	ldi	r21, 0x40	; 64
    1586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	f8 01       	movw	r30, r16
    1590:	80 83       	st	Z, r24
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	a2 83       	std	Z+2, r26	; 0x02
    1596:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1598:	fe 01       	movw	r30, r28
    159a:	e1 5b       	subi	r30, 0xB1	; 177
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	34 f4       	brge	.+12     	; 0x15c2 <LCD_Command+0xc8>
		__ticks = 1;
    15b6:	fe 01       	movw	r30, r28
    15b8:	e2 5b       	subi	r30, 0xB2	; 178
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 83       	st	Z, r24
    15c0:	e0 c0       	rjmp	.+448    	; 0x1782 <LCD_Command+0x288>
	else if (__tmp > 255)
    15c2:	fe 01       	movw	r30, r28
    15c4:	e1 5b       	subi	r30, 0xB1	; 177
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	53 e4       	ldi	r21, 0x43	; 67
    15d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15dc:	18 16       	cp	r1, r24
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <LCD_Command+0xe8>
    15e0:	c0 c0       	rjmp	.+384    	; 0x1762 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    15e2:	fe 01       	movw	r30, r28
    15e4:	ed 5a       	subi	r30, 0xAD	; 173
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	54 e4       	ldi	r21, 0x44	; 68
    15f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	fe 01       	movw	r30, r28
    1602:	e6 5b       	subi	r30, 0xB6	; 182
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 83       	st	Z, r24
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	a2 83       	std	Z+2, r26	; 0x02
    160c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160e:	8e 01       	movw	r16, r28
    1610:	0a 5b       	subi	r16, 0xBA	; 186
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	fe 01       	movw	r30, r28
    1616:	e6 5b       	subi	r30, 0xB6	; 182
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	4a ef       	ldi	r20, 0xFA	; 250
    1628:	54 e4       	ldi	r21, 0x44	; 68
    162a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	f8 01       	movw	r30, r16
    1634:	80 83       	st	Z, r24
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	a2 83       	std	Z+2, r26	; 0x02
    163a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163c:	fe 01       	movw	r30, r28
    163e:	ea 5b       	subi	r30, 0xBA	; 186
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	44 f4       	brge	.+16     	; 0x166a <LCD_Command+0x170>
		__ticks = 1;
    165a:	fe 01       	movw	r30, r28
    165c:	ec 5b       	subi	r30, 0xBC	; 188
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	64 c0       	rjmp	.+200    	; 0x1732 <LCD_Command+0x238>
	else if (__tmp > 65535)
    166a:	fe 01       	movw	r30, r28
    166c:	ea 5b       	subi	r30, 0xBA	; 186
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	0c f0       	brlt	.+2      	; 0x168a <LCD_Command+0x190>
    1688:	43 c0       	rjmp	.+134    	; 0x1710 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	fe 01       	movw	r30, r28
    168c:	e6 5b       	subi	r30, 0xB6	; 182
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e2       	ldi	r20, 0x20	; 32
    169e:	51 e4       	ldi	r21, 0x41	; 65
    16a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8e 01       	movw	r16, r28
    16aa:	0c 5b       	subi	r16, 0xBC	; 188
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	f8 01       	movw	r30, r16
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
    16c0:	1f c0       	rjmp	.+62     	; 0x1700 <LCD_Command+0x206>
    16c2:	fe 01       	movw	r30, r28
    16c4:	ee 5b       	subi	r30, 0xBE	; 190
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	88 ec       	ldi	r24, 0xC8	; 200
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d0:	fe 01       	movw	r30, r28
    16d2:	ee 5b       	subi	r30, 0xBE	; 190
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCD_Command+0x1e0>
    16de:	fe 01       	movw	r30, r28
    16e0:	ee 5b       	subi	r30, 0xBE	; 190
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	de 01       	movw	r26, r28
    16ea:	ac 5b       	subi	r26, 0xBC	; 188
    16ec:	bf 4f       	sbci	r27, 0xFF	; 255
    16ee:	fe 01       	movw	r30, r28
    16f0:	ec 5b       	subi	r30, 0xBC	; 188
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1700:	fe 01       	movw	r30, r28
    1702:	ec 5b       	subi	r30, 0xBC	; 188
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	d1 f6       	brne	.-76     	; 0x16c2 <LCD_Command+0x1c8>
    170e:	42 c0       	rjmp	.+132    	; 0x1794 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1710:	8e 01       	movw	r16, r28
    1712:	0c 5b       	subi	r16, 0xBC	; 188
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	fe 01       	movw	r30, r28
    1718:	ea 5b       	subi	r30, 0xBA	; 186
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	de 01       	movw	r26, r28
    1734:	a0 5c       	subi	r26, 0xC0	; 192
    1736:	bf 4f       	sbci	r27, 0xFF	; 255
    1738:	fe 01       	movw	r30, r28
    173a:	ec 5b       	subi	r30, 0xBC	; 188
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
    1748:	fe 01       	movw	r30, r28
    174a:	e0 5c       	subi	r30, 0xC0	; 192
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_Command+0x258>
    1756:	fe 01       	movw	r30, r28
    1758:	e0 5c       	subi	r30, 0xC0	; 192
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	19 c0       	rjmp	.+50     	; 0x1794 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1762:	8e 01       	movw	r16, r28
    1764:	02 5b       	subi	r16, 0xB2	; 178
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	fe 01       	movw	r30, r28
    176a:	e1 5b       	subi	r30, 0xB1	; 177
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	f8 01       	movw	r30, r16
    1780:	80 83       	st	Z, r24
    1782:	fe 01       	movw	r30, r28
    1784:	e2 5b       	subi	r30, 0xB2	; 178
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    178c:	8f ad       	ldd	r24, Y+63	; 0x3f
    178e:	8a 95       	dec	r24
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_Command+0x294>
    1792:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1794:	a8 e3       	ldi	r26, 0x38	; 56
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e3       	ldi	r30, 0x38	; 56
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	8c 93       	st	X, r24
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a8 e4       	ldi	r26, 0x48	; 72
    17a8:	b3 e4       	ldi	r27, 0x43	; 67
    17aa:	8b af       	std	Y+59, r24	; 0x3b
    17ac:	9c af       	std	Y+60, r25	; 0x3c
    17ae:	ad af       	std	Y+61, r26	; 0x3d
    17b0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    17b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ba:	2b ea       	ldi	r18, 0xAB	; 171
    17bc:	3a ea       	ldi	r19, 0xAA	; 170
    17be:	4a e2       	ldi	r20, 0x2A	; 42
    17c0:	50 e4       	ldi	r21, 0x40	; 64
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8f ab       	std	Y+55, r24	; 0x37
    17cc:	98 af       	std	Y+56, r25	; 0x38
    17ce:	a9 af       	std	Y+57, r26	; 0x39
    17d0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17d2:	6f a9       	ldd	r22, Y+55	; 0x37
    17d4:	78 ad       	ldd	r23, Y+56	; 0x38
    17d6:	89 ad       	ldd	r24, Y+57	; 0x39
    17d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	1c f4       	brge	.+6      	; 0x17f0 <LCD_Command+0x2f6>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8e ab       	std	Y+54, r24	; 0x36
    17ee:	91 c0       	rjmp	.+290    	; 0x1912 <LCD_Command+0x418>
	else if (__tmp > 255)
    17f0:	6f a9       	ldd	r22, Y+55	; 0x37
    17f2:	78 ad       	ldd	r23, Y+56	; 0x38
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f0       	brlt	.+2      	; 0x180a <LCD_Command+0x310>
    1808:	7b c0       	rjmp	.+246    	; 0x1900 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    180a:	6b ad       	ldd	r22, Y+59	; 0x3b
    180c:	7c ad       	ldd	r23, Y+60	; 0x3c
    180e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1810:	9e ad       	ldd	r25, Y+62	; 0x3e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8a ab       	std	Y+50, r24	; 0x32
    1824:	9b ab       	std	Y+51, r25	; 0x33
    1826:	ac ab       	std	Y+52, r26	; 0x34
    1828:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6a a9       	ldd	r22, Y+50	; 0x32
    182c:	7b a9       	ldd	r23, Y+51	; 0x33
    182e:	8c a9       	ldd	r24, Y+52	; 0x34
    1830:	9d a9       	ldd	r25, Y+53	; 0x35
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a ef       	ldi	r20, 0xFA	; 250
    1838:	54 e4       	ldi	r21, 0x44	; 68
    183a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8e a7       	std	Y+46, r24	; 0x2e
    1844:	9f a7       	std	Y+47, r25	; 0x2f
    1846:	a8 ab       	std	Y+48, r26	; 0x30
    1848:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    184a:	6e a5       	ldd	r22, Y+46	; 0x2e
    184c:	7f a5       	ldd	r23, Y+47	; 0x2f
    184e:	88 a9       	ldd	r24, Y+48	; 0x30
    1850:	99 a9       	ldd	r25, Y+49	; 0x31
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <LCD_Command+0x372>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9d a7       	std	Y+45, r25	; 0x2d
    1868:	8c a7       	std	Y+44, r24	; 0x2c
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    186c:	6e a5       	ldd	r22, Y+46	; 0x2e
    186e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1870:	88 a9       	ldd	r24, Y+48	; 0x30
    1872:	99 a9       	ldd	r25, Y+49	; 0x31
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6a a9       	ldd	r22, Y+50	; 0x32
    1886:	7b a9       	ldd	r23, Y+51	; 0x33
    1888:	8c a9       	ldd	r24, Y+52	; 0x34
    188a:	9d a9       	ldd	r25, Y+53	; 0x35
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9d a7       	std	Y+45, r25	; 0x2d
    18aa:	8c a7       	std	Y+44, r24	; 0x2c
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <LCD_Command+0x3d2>
    18ae:	88 ec       	ldi	r24, 0xC8	; 200
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9b a7       	std	Y+43, r25	; 0x2b
    18b4:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    18b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_Command+0x3c0>
    18be:	9b a7       	std	Y+43, r25	; 0x2b
    18c0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    18c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9d a7       	std	Y+45, r25	; 0x2d
    18ca:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <LCD_Command+0x3b4>
    18d4:	24 c0       	rjmp	.+72     	; 0x191e <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    18d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    18da:	88 a9       	ldd	r24, Y+48	; 0x30
    18dc:	99 a9       	ldd	r25, Y+49	; 0x31
    18de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9d a7       	std	Y+45, r25	; 0x2d
    18e8:	8c a7       	std	Y+44, r24	; 0x2c
    18ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ee:	99 a7       	std	Y+41, r25	; 0x29
    18f0:	88 a7       	std	Y+40, r24	; 0x28
    18f2:	88 a5       	ldd	r24, Y+40	; 0x28
    18f4:	99 a5       	ldd	r25, Y+41	; 0x29
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_Command+0x3fc>
    18fa:	99 a7       	std	Y+41, r25	; 0x29
    18fc:	88 a7       	std	Y+40, r24	; 0x28
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1900:	6f a9       	ldd	r22, Y+55	; 0x37
    1902:	78 ad       	ldd	r23, Y+56	; 0x38
    1904:	89 ad       	ldd	r24, Y+57	; 0x39
    1906:	9a ad       	ldd	r25, Y+58	; 0x3a
    1908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e ab       	std	Y+54, r24	; 0x36
    1912:	8e a9       	ldd	r24, Y+54	; 0x36
    1914:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1916:	8f a1       	ldd	r24, Y+39	; 0x27
    1918:	8a 95       	dec	r24
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_Command+0x41e>
    191c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    191e:	a8 e3       	ldi	r26, 0x38	; 56
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	28 2f       	mov	r18, r24
    192a:	2f 70       	andi	r18, 0x0F	; 15
    192c:	fe 01       	movw	r30, r28
    192e:	e9 5a       	subi	r30, 0xA9	; 169
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	82 95       	swap	r24
    193a:	92 95       	swap	r25
    193c:	90 7f       	andi	r25, 0xF0	; 240
    193e:	98 27       	eor	r25, r24
    1940:	80 7f       	andi	r24, 0xF0	; 240
    1942:	98 27       	eor	r25, r24
    1944:	82 2b       	or	r24, r18
    1946:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1948:	a8 e3       	ldi	r26, 0x38	; 56
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e3       	ldi	r30, 0x38	; 56
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	82 60       	ori	r24, 0x02	; 2
    1954:	8c 93       	st	X, r24
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e8       	ldi	r26, 0x80	; 128
    195c:	bf e3       	ldi	r27, 0x3F	; 63
    195e:	8b a3       	std	Y+35, r24	; 0x23
    1960:	9c a3       	std	Y+36, r25	; 0x24
    1962:	ad a3       	std	Y+37, r26	; 0x25
    1964:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	2b ea       	ldi	r18, 0xAB	; 171
    1970:	3a ea       	ldi	r19, 0xAA	; 170
    1972:	4a e2       	ldi	r20, 0x2A	; 42
    1974:	50 e4       	ldi	r21, 0x40	; 64
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8f 8f       	std	Y+31, r24	; 0x1f
    1980:	98 a3       	std	Y+32, r25	; 0x20
    1982:	a9 a3       	std	Y+33, r26	; 0x21
    1984:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1986:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1988:	78 a1       	ldd	r23, Y+32	; 0x20
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e8       	ldi	r20, 0x80	; 128
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199a:	88 23       	and	r24, r24
    199c:	1c f4       	brge	.+6      	; 0x19a4 <LCD_Command+0x4aa>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8e 8f       	std	Y+30, r24	; 0x1e
    19a2:	91 c0       	rjmp	.+290    	; 0x1ac6 <LCD_Command+0x5cc>
	else if (__tmp > 255)
    19a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19a6:	78 a1       	ldd	r23, Y+32	; 0x20
    19a8:	89 a1       	ldd	r24, Y+33	; 0x21
    19aa:	9a a1       	ldd	r25, Y+34	; 0x22
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	53 e4       	ldi	r21, 0x43	; 67
    19b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	0c f0       	brlt	.+2      	; 0x19be <LCD_Command+0x4c4>
    19bc:	7b c0       	rjmp	.+246    	; 0x1ab4 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a e7       	ldi	r20, 0x7A	; 122
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8a 8f       	std	Y+26, r24	; 0x1a
    19d8:	9b 8f       	std	Y+27, r25	; 0x1b
    19da:	ac 8f       	std	Y+28, r26	; 0x1c
    19dc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8e 8b       	std	Y+22, r24	; 0x16
    19f8:	9f 8b       	std	Y+23, r25	; 0x17
    19fa:	a8 8f       	std	Y+24, r26	; 0x18
    19fc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19fe:	6e 89       	ldd	r22, Y+22	; 0x16
    1a00:	7f 89       	ldd	r23, Y+23	; 0x17
    1a02:	88 8d       	ldd	r24, Y+24	; 0x18
    1a04:	99 8d       	ldd	r25, Y+25	; 0x19
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_Command+0x526>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9d 8b       	std	Y+21, r25	; 0x15
    1a1c:	8c 8b       	std	Y+20, r24	; 0x14
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    1a20:	6e 89       	ldd	r22, Y+22	; 0x16
    1a22:	7f 89       	ldd	r23, Y+23	; 0x17
    1a24:	88 8d       	ldd	r24, Y+24	; 0x18
    1a26:	99 8d       	ldd	r25, Y+25	; 0x19
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a3a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9d 8b       	std	Y+21, r25	; 0x15
    1a5e:	8c 8b       	std	Y+20, r24	; 0x14
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_Command+0x586>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9b 8b       	std	Y+19, r25	; 0x13
    1a68:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_Command+0x574>
    1a72:	9b 8b       	std	Y+19, r25	; 0x13
    1a74:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8c 89       	ldd	r24, Y+20	; 0x14
    1a78:	9d 89       	ldd	r25, Y+21	; 0x15
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9d 8b       	std	Y+21, r25	; 0x15
    1a7e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8c 89       	ldd	r24, Y+20	; 0x14
    1a82:	9d 89       	ldd	r25, Y+21	; 0x15
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_Command+0x568>
    1a88:	24 c0       	rjmp	.+72     	; 0x1ad2 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a8c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a90:	99 8d       	ldd	r25, Y+25	; 0x19
    1a92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9d 8b       	std	Y+21, r25	; 0x15
    1a9c:	8c 8b       	std	Y+20, r24	; 0x14
    1a9e:	8c 89       	ldd	r24, Y+20	; 0x14
    1aa0:	9d 89       	ldd	r25, Y+21	; 0x15
    1aa2:	99 8b       	std	Y+17, r25	; 0x11
    1aa4:	88 8b       	std	Y+16, r24	; 0x10
    1aa6:	88 89       	ldd	r24, Y+16	; 0x10
    1aa8:	99 89       	ldd	r25, Y+17	; 0x11
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_Command+0x5b0>
    1aae:	99 8b       	std	Y+17, r25	; 0x11
    1ab0:	88 8b       	std	Y+16, r24	; 0x10
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ab4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ab6:	78 a1       	ldd	r23, Y+32	; 0x20
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1acc:	8a 95       	dec	r24
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_Command+0x5d2>
    1ad0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1ad2:	a8 e3       	ldi	r26, 0x38	; 56
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e8 e3       	ldi	r30, 0x38	; 56
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8d 7f       	andi	r24, 0xFD	; 253
    1ade:	8c 93       	st	X, r24
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e4       	ldi	r27, 0x40	; 64
    1ae8:	8b 87       	std	Y+11, r24	; 0x0b
    1aea:	9c 87       	std	Y+12, r25	; 0x0c
    1aec:	ad 87       	std	Y+13, r26	; 0x0d
    1aee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a ef       	ldi	r20, 0xFA	; 250
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8f 83       	std	Y+7, r24	; 0x07
    1b0a:	98 87       	std	Y+8, r25	; 0x08
    1b0c:	a9 87       	std	Y+9, r26	; 0x09
    1b0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <LCD_Command+0x638>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <LCD_Command+0x698>
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_Command+0x686>
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <LCD_Command+0x67a>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_Command+0x6c2>
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1bc4:	c9 5a       	subi	r28, 0xA9	; 169
    1bc6:	df 4f       	sbci	r29, 0xFF	; 255
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	c7 55       	subi	r28, 0x57	; 87
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 5a       	subi	r30, 0xA9	; 169
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1bfe:	a8 e3       	ldi	r26, 0x38	; 56
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e8 e3       	ldi	r30, 0x38	; 56
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	98 2f       	mov	r25, r24
    1c0a:	9f 70       	andi	r25, 0x0F	; 15
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e9 5a       	subi	r30, 0xA9	; 169
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	80 7f       	andi	r24, 0xF0	; 240
    1c16:	89 2b       	or	r24, r25
    1c18:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1c1a:	a8 e3       	ldi	r26, 0x38	; 56
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	81 60       	ori	r24, 0x01	; 1
    1c26:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    1c28:	a8 e3       	ldi	r26, 0x38	; 56
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	82 60       	ori	r24, 0x02	; 2
    1c34:	8c 93       	st	X, r24
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 5a       	subi	r30, 0xAD	; 173
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e8       	ldi	r26, 0x80	; 128
    1c42:	bf e3       	ldi	r27, 0x3F	; 63
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	01 5b       	subi	r16, 0xB1	; 177
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 5a       	subi	r30, 0xAD	; 173
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	2b ea       	ldi	r18, 0xAB	; 171
    1c62:	3a ea       	ldi	r19, 0xAA	; 170
    1c64:	4a e2       	ldi	r20, 0x2A	; 42
    1c66:	50 e4       	ldi	r21, 0x40	; 64
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e1 5b       	subi	r30, 0xB1	; 177
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	34 f4       	brge	.+12     	; 0x1ca4 <LCD_Char+0xc8>
		__ticks = 1;
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e2 5b       	subi	r30, 0xB2	; 178
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	80 83       	st	Z, r24
    1ca2:	e0 c0       	rjmp	.+448    	; 0x1e64 <LCD_Char+0x288>
	else if (__tmp > 255)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e1 5b       	subi	r30, 0xB1	; 177
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	53 e4       	ldi	r21, 0x43	; 67
    1cba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	0c f0       	brlt	.+2      	; 0x1cc4 <LCD_Char+0xe8>
    1cc2:	c0 c0       	rjmp	.+384    	; 0x1e44 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ed 5a       	subi	r30, 0xAD	; 173
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e6 5b       	subi	r30, 0xB6	; 182
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 83       	st	Z, r24
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	a2 83       	std	Z+2, r26	; 0x02
    1cee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	0a 5b       	subi	r16, 0xBA	; 186
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e6 5b       	subi	r30, 0xB6	; 182
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a ef       	ldi	r20, 0xFA	; 250
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 83       	st	Z, r24
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	a2 83       	std	Z+2, r26	; 0x02
    1d1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ea 5b       	subi	r30, 0xBA	; 186
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	44 f4       	brge	.+16     	; 0x1d4c <LCD_Char+0x170>
		__ticks = 1;
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ec 5b       	subi	r30, 0xBC	; 188
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	64 c0       	rjmp	.+200    	; 0x1e14 <LCD_Char+0x238>
	else if (__tmp > 65535)
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ea 5b       	subi	r30, 0xBA	; 186
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <LCD_Char+0x190>
    1d6a:	43 c0       	rjmp	.+134    	; 0x1df2 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e6 5b       	subi	r30, 0xB6	; 182
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	0c 5b       	subi	r16, 0xBC	; 188
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	1f c0       	rjmp	.+62     	; 0x1de2 <LCD_Char+0x206>
    1da4:	fe 01       	movw	r30, r28
    1da6:	ee 5b       	subi	r30, 0xBE	; 190
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	fe 01       	movw	r30, r28
    1db4:	ee 5b       	subi	r30, 0xBE	; 190
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_Char+0x1e0>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ee 5b       	subi	r30, 0xBE	; 190
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	de 01       	movw	r26, r28
    1dcc:	ac 5b       	subi	r26, 0xBC	; 188
    1dce:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ec 5b       	subi	r30, 0xBC	; 188
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	11 96       	adiw	r26, 0x01	; 1
    1dde:	9c 93       	st	X, r25
    1de0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	fe 01       	movw	r30, r28
    1de4:	ec 5b       	subi	r30, 0xBC	; 188
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	d1 f6       	brne	.-76     	; 0x1da4 <LCD_Char+0x1c8>
    1df0:	42 c0       	rjmp	.+132    	; 0x1e76 <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	8e 01       	movw	r16, r28
    1df4:	0c 5b       	subi	r16, 0xBC	; 188
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ea 5b       	subi	r30, 0xBA	; 186
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    1e14:	de 01       	movw	r26, r28
    1e16:	a0 5c       	subi	r26, 0xC0	; 192
    1e18:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ec 5b       	subi	r30, 0xBC	; 188
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	9c 93       	st	X, r25
    1e28:	8e 93       	st	-X, r24
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e0 5c       	subi	r30, 0xC0	; 192
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_Char+0x258>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e0 5c       	subi	r30, 0xC0	; 192
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
    1e42:	19 c0       	rjmp	.+50     	; 0x1e76 <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e44:	8e 01       	movw	r16, r28
    1e46:	02 5b       	subi	r16, 0xB2	; 178
    1e48:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e1 5b       	subi	r30, 0xB1	; 177
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	f8 01       	movw	r30, r16
    1e62:	80 83       	st	Z, r24
    1e64:	fe 01       	movw	r30, r28
    1e66:	e2 5b       	subi	r30, 0xB2	; 178
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e6e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e70:	8a 95       	dec	r24
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_Char+0x294>
    1e74:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1e76:	a8 e3       	ldi	r26, 0x38	; 56
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8d 7f       	andi	r24, 0xFD	; 253
    1e82:	8c 93       	st	X, r24
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a8 e4       	ldi	r26, 0x48	; 72
    1e8a:	b3 e4       	ldi	r27, 0x43	; 67
    1e8c:	8b af       	std	Y+59, r24	; 0x3b
    1e8e:	9c af       	std	Y+60, r25	; 0x3c
    1e90:	ad af       	std	Y+61, r26	; 0x3d
    1e92:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e94:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e96:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9c:	2b ea       	ldi	r18, 0xAB	; 171
    1e9e:	3a ea       	ldi	r19, 0xAA	; 170
    1ea0:	4a e2       	ldi	r20, 0x2A	; 42
    1ea2:	50 e4       	ldi	r21, 0x40	; 64
    1ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f ab       	std	Y+55, r24	; 0x37
    1eae:	98 af       	std	Y+56, r25	; 0x38
    1eb0:	a9 af       	std	Y+57, r26	; 0x39
    1eb2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1eb4:	6f a9       	ldd	r22, Y+55	; 0x37
    1eb6:	78 ad       	ldd	r23, Y+56	; 0x38
    1eb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	1c f4       	brge	.+6      	; 0x1ed2 <LCD_Char+0x2f6>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	8e ab       	std	Y+54, r24	; 0x36
    1ed0:	91 c0       	rjmp	.+290    	; 0x1ff4 <LCD_Char+0x418>
	else if (__tmp > 255)
    1ed2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ed4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ed6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	53 e4       	ldi	r21, 0x43	; 67
    1ee2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <LCD_Char+0x310>
    1eea:	7b c0       	rjmp	.+246    	; 0x1fe2 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    1eec:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eee:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ef0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ef2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	8a ab       	std	Y+50, r24	; 0x32
    1f06:	9b ab       	std	Y+51, r25	; 0x33
    1f08:	ac ab       	std	Y+52, r26	; 0x34
    1f0a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6a a9       	ldd	r22, Y+50	; 0x32
    1f0e:	7b a9       	ldd	r23, Y+51	; 0x33
    1f10:	8c a9       	ldd	r24, Y+52	; 0x34
    1f12:	9d a9       	ldd	r25, Y+53	; 0x35
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a ef       	ldi	r20, 0xFA	; 250
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8e a7       	std	Y+46, r24	; 0x2e
    1f26:	9f a7       	std	Y+47, r25	; 0x2f
    1f28:	a8 ab       	std	Y+48, r26	; 0x30
    1f2a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f2c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f2e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f30:	88 a9       	ldd	r24, Y+48	; 0x30
    1f32:	99 a9       	ldd	r25, Y+49	; 0x31
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_Char+0x372>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9d a7       	std	Y+45, r25	; 0x2d
    1f4a:	8c a7       	std	Y+44, r24	; 0x2c
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    1f4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f50:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f52:	88 a9       	ldd	r24, Y+48	; 0x30
    1f54:	99 a9       	ldd	r25, Y+49	; 0x31
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6a a9       	ldd	r22, Y+50	; 0x32
    1f68:	7b a9       	ldd	r23, Y+51	; 0x33
    1f6a:	8c a9       	ldd	r24, Y+52	; 0x34
    1f6c:	9d a9       	ldd	r25, Y+53	; 0x35
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9d a7       	std	Y+45, r25	; 0x2d
    1f8c:	8c a7       	std	Y+44, r24	; 0x2c
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_Char+0x3d2>
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9b a7       	std	Y+43, r25	; 0x2b
    1f96:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f98:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f9a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_Char+0x3c0>
    1fa0:	9b a7       	std	Y+43, r25	; 0x2b
    1fa2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fa6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9d a7       	std	Y+45, r25	; 0x2d
    1fac:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fb0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_Char+0x3b4>
    1fb6:	24 c0       	rjmp	.+72     	; 0x2000 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fba:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fbc:	88 a9       	ldd	r24, Y+48	; 0x30
    1fbe:	99 a9       	ldd	r25, Y+49	; 0x31
    1fc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9d a7       	std	Y+45, r25	; 0x2d
    1fca:	8c a7       	std	Y+44, r24	; 0x2c
    1fcc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fce:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fd0:	99 a7       	std	Y+41, r25	; 0x29
    1fd2:	88 a7       	std	Y+40, r24	; 0x28
    1fd4:	88 a5       	ldd	r24, Y+40	; 0x28
    1fd6:	99 a5       	ldd	r25, Y+41	; 0x29
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_Char+0x3fc>
    1fdc:	99 a7       	std	Y+41, r25	; 0x29
    1fde:	88 a7       	std	Y+40, r24	; 0x28
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe2:	6f a9       	ldd	r22, Y+55	; 0x37
    1fe4:	78 ad       	ldd	r23, Y+56	; 0x38
    1fe6:	89 ad       	ldd	r24, Y+57	; 0x39
    1fe8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8e ab       	std	Y+54, r24	; 0x36
    1ff4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ff6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff8:	8f a1       	ldd	r24, Y+39	; 0x27
    1ffa:	8a 95       	dec	r24
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_Char+0x41e>
    1ffe:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    2000:	a8 e3       	ldi	r26, 0x38	; 56
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e8 e3       	ldi	r30, 0x38	; 56
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	28 2f       	mov	r18, r24
    200c:	2f 70       	andi	r18, 0x0F	; 15
    200e:	fe 01       	movw	r30, r28
    2010:	e9 5a       	subi	r30, 0xA9	; 169
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	82 95       	swap	r24
    201c:	92 95       	swap	r25
    201e:	90 7f       	andi	r25, 0xF0	; 240
    2020:	98 27       	eor	r25, r24
    2022:	80 7f       	andi	r24, 0xF0	; 240
    2024:	98 27       	eor	r25, r24
    2026:	82 2b       	or	r24, r18
    2028:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    202a:	a8 e3       	ldi	r26, 0x38	; 56
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e8 e3       	ldi	r30, 0x38	; 56
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	82 60       	ori	r24, 0x02	; 2
    2036:	8c 93       	st	X, r24
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e8       	ldi	r26, 0x80	; 128
    203e:	bf e3       	ldi	r27, 0x3F	; 63
    2040:	8b a3       	std	Y+35, r24	; 0x23
    2042:	9c a3       	std	Y+36, r25	; 0x24
    2044:	ad a3       	std	Y+37, r26	; 0x25
    2046:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	2b ea       	ldi	r18, 0xAB	; 171
    2052:	3a ea       	ldi	r19, 0xAA	; 170
    2054:	4a e2       	ldi	r20, 0x2A	; 42
    2056:	50 e4       	ldi	r21, 0x40	; 64
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8f 8f       	std	Y+31, r24	; 0x1f
    2062:	98 a3       	std	Y+32, r25	; 0x20
    2064:	a9 a3       	std	Y+33, r26	; 0x21
    2066:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2068:	6f 8d       	ldd	r22, Y+31	; 0x1f
    206a:	78 a1       	ldd	r23, Y+32	; 0x20
    206c:	89 a1       	ldd	r24, Y+33	; 0x21
    206e:	9a a1       	ldd	r25, Y+34	; 0x22
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	1c f4       	brge	.+6      	; 0x2086 <LCD_Char+0x4aa>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	8e 8f       	std	Y+30, r24	; 0x1e
    2084:	91 c0       	rjmp	.+290    	; 0x21a8 <LCD_Char+0x5cc>
	else if (__tmp > 255)
    2086:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2088:	78 a1       	ldd	r23, Y+32	; 0x20
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	53 e4       	ldi	r21, 0x43	; 67
    2096:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	0c f0       	brlt	.+2      	; 0x20a0 <LCD_Char+0x4c4>
    209e:	7b c0       	rjmp	.+246    	; 0x2196 <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8a 8f       	std	Y+26, r24	; 0x1a
    20ba:	9b 8f       	std	Y+27, r25	; 0x1b
    20bc:	ac 8f       	std	Y+28, r26	; 0x1c
    20be:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20c2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8e 8b       	std	Y+22, r24	; 0x16
    20da:	9f 8b       	std	Y+23, r25	; 0x17
    20dc:	a8 8f       	std	Y+24, r26	; 0x18
    20de:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    20e0:	6e 89       	ldd	r22, Y+22	; 0x16
    20e2:	7f 89       	ldd	r23, Y+23	; 0x17
    20e4:	88 8d       	ldd	r24, Y+24	; 0x18
    20e6:	99 8d       	ldd	r25, Y+25	; 0x19
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <LCD_Char+0x526>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9d 8b       	std	Y+21, r25	; 0x15
    20fe:	8c 8b       	std	Y+20, r24	; 0x14
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    2102:	6e 89       	ldd	r22, Y+22	; 0x16
    2104:	7f 89       	ldd	r23, Y+23	; 0x17
    2106:	88 8d       	ldd	r24, Y+24	; 0x18
    2108:	99 8d       	ldd	r25, Y+25	; 0x19
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    211c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    211e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2120:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9d 8b       	std	Y+21, r25	; 0x15
    2140:	8c 8b       	std	Y+20, r24	; 0x14
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <LCD_Char+0x586>
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9b 8b       	std	Y+19, r25	; 0x13
    214a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    214c:	8a 89       	ldd	r24, Y+18	; 0x12
    214e:	9b 89       	ldd	r25, Y+19	; 0x13
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_Char+0x574>
    2154:	9b 8b       	std	Y+19, r25	; 0x13
    2156:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8c 89       	ldd	r24, Y+20	; 0x14
    215a:	9d 89       	ldd	r25, Y+21	; 0x15
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9d 8b       	std	Y+21, r25	; 0x15
    2160:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8c 89       	ldd	r24, Y+20	; 0x14
    2164:	9d 89       	ldd	r25, Y+21	; 0x15
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <LCD_Char+0x568>
    216a:	24 c0       	rjmp	.+72     	; 0x21b4 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6e 89       	ldd	r22, Y+22	; 0x16
    216e:	7f 89       	ldd	r23, Y+23	; 0x17
    2170:	88 8d       	ldd	r24, Y+24	; 0x18
    2172:	99 8d       	ldd	r25, Y+25	; 0x19
    2174:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9d 8b       	std	Y+21, r25	; 0x15
    217e:	8c 8b       	std	Y+20, r24	; 0x14
    2180:	8c 89       	ldd	r24, Y+20	; 0x14
    2182:	9d 89       	ldd	r25, Y+21	; 0x15
    2184:	99 8b       	std	Y+17, r25	; 0x11
    2186:	88 8b       	std	Y+16, r24	; 0x10
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	99 89       	ldd	r25, Y+17	; 0x11
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_Char+0x5b0>
    2190:	99 8b       	std	Y+17, r25	; 0x11
    2192:	88 8b       	std	Y+16, r24	; 0x10
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2196:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2198:	78 a1       	ldd	r23, Y+32	; 0x20
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	9a a1       	ldd	r25, Y+34	; 0x22
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8e 8f       	std	Y+30, r24	; 0x1e
    21a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21aa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ae:	8a 95       	dec	r24
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_Char+0x5d2>
    21b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    21b4:	a8 e3       	ldi	r26, 0x38	; 56
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e8 e3       	ldi	r30, 0x38	; 56
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8d 7f       	andi	r24, 0xFD	; 253
    21c0:	8c 93       	st	X, r24
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e0       	ldi	r26, 0x00	; 0
    21c8:	b0 e4       	ldi	r27, 0x40	; 64
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	9c 87       	std	Y+12, r25	; 0x0c
    21ce:	ad 87       	std	Y+13, r26	; 0x0d
    21d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f 83       	std	Y+7, r24	; 0x07
    21ec:	98 87       	std	Y+8, r25	; 0x08
    21ee:	a9 87       	std	Y+9, r26	; 0x09
    21f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <LCD_Char+0x638>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <LCD_Char+0x698>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_Char+0x686>
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <LCD_Char+0x67a>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_Char+0x6c2>
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    22a6:	c9 5a       	subi	r28, 0xA9	; 169
    22a8:	df 4f       	sbci	r29, 0xFF	; 255
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	6c 97       	sbiw	r28, 0x1c	; 28
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    22d2:	e7 e3       	ldi	r30, 0x37	; 55
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8f ef       	ldi	r24, 0xFF	; 255
    22d8:	80 83       	st	Z, r24
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 ea       	ldi	r26, 0xA0	; 160
    22e0:	b1 e4       	ldi	r27, 0x41	; 65
    22e2:	89 8f       	std	Y+25, r24	; 0x19
    22e4:	9a 8f       	std	Y+26, r25	; 0x1a
    22e6:	ab 8f       	std	Y+27, r26	; 0x1b
    22e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	69 8d       	ldd	r22, Y+25	; 0x19
    22ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a ef       	ldi	r20, 0xFA	; 250
    22f8:	54 e4       	ldi	r21, 0x44	; 68
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8d 8b       	std	Y+21, r24	; 0x15
    2304:	9e 8b       	std	Y+22, r25	; 0x16
    2306:	af 8b       	std	Y+23, r26	; 0x17
    2308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230a:	6d 89       	ldd	r22, Y+21	; 0x15
    230c:	7e 89       	ldd	r23, Y+22	; 0x16
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e8       	ldi	r20, 0x80	; 128
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    231e:	88 23       	and	r24, r24
    2320:	2c f4       	brge	.+10     	; 0x232c <LCD_Init+0x6e>
		__ticks = 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	3f c0       	rjmp	.+126    	; 0x23aa <LCD_Init+0xec>
	else if (__tmp > 65535)
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	3f ef       	ldi	r19, 0xFF	; 255
    2338:	4f e7       	ldi	r20, 0x7F	; 127
    233a:	57 e4       	ldi	r21, 0x47	; 71
    233c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2340:	18 16       	cp	r1, r24
    2342:	4c f5       	brge	.+82     	; 0x2396 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	69 8d       	ldd	r22, Y+25	; 0x19
    2346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e2       	ldi	r20, 0x20	; 32
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	0f c0       	rjmp	.+30     	; 0x238c <LCD_Init+0xce>
    236e:	88 ec       	ldi	r24, 0xC8	; 200
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9a 8b       	std	Y+18, r25	; 0x12
    2374:	89 8b       	std	Y+17, r24	; 0x11
    2376:	89 89       	ldd	r24, Y+17	; 0x11
    2378:	9a 89       	ldd	r25, Y+18	; 0x12
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_Init+0xbc>
    237e:	9a 8b       	std	Y+18, r25	; 0x12
    2380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	69 f7       	brne	.-38     	; 0x236e <LCD_Init+0xb0>
    2394:	14 c0       	rjmp	.+40     	; 0x23be <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	6d 89       	ldd	r22, Y+21	; 0x15
    2398:	7e 89       	ldd	r23, Y+22	; 0x16
    239a:	8f 89       	ldd	r24, Y+23	; 0x17
    239c:	98 8d       	ldd	r25, Y+24	; 0x18
    239e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	9c 89       	ldd	r25, Y+20	; 0x14
    23ae:	98 8b       	std	Y+16, r25	; 0x10
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
    23b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b4:	98 89       	ldd	r25, Y+16	; 0x10
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_Init+0xf8>
    23ba:	98 8b       	std	Y+16, r25	; 0x10
    23bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);			/* LCD Power ON delay always >15ms */

	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    23c4:	88 e2       	ldi	r24, 0x28	; 40
    23c6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    23ca:	8c e0       	ldi	r24, 0x0C	; 12
    23cc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    23d0:	86 e0       	ldi	r24, 0x06	; 6
    23d2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e4       	ldi	r27, 0x40	; 64
    23e4:	8b 87       	std	Y+11, r24	; 0x0b
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	ad 87       	std	Y+13, r26	; 0x0d
    23ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a ef       	ldi	r20, 0xFA	; 250
    23fa:	54 e4       	ldi	r21, 0x44	; 68
    23fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8f 83       	std	Y+7, r24	; 0x07
    2406:	98 87       	std	Y+8, r25	; 0x08
    2408:	a9 87       	std	Y+9, r26	; 0x09
    240a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <LCD_Init+0x170>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	0f c0       	rjmp	.+30     	; 0x248e <LCD_Init+0x1d0>
    2470:	88 ec       	ldi	r24, 0xC8	; 200
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_Init+0x1be>
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <LCD_Init+0x1b2>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_Init+0x1fa>
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    24c0:	6c 96       	adiw	r28, 0x1c	; 28
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_String+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <LCD_String+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    24e2:	1a 82       	std	Y+2, r1	; 0x02
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    24e8:	29 81       	ldd	r18, Y+1	; 0x01
    24ea:	3a 81       	ldd	r19, Y+2	; 0x02
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	29 81       	ldd	r18, Y+1	; 0x01
    2508:	3a 81       	ldd	r19, Y+2	; 0x02
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	80 81       	ld	r24, Z
    2516:	88 23       	and	r24, r24
    2518:	39 f7       	brne	.-50     	; 0x24e8 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <LCD_String_xy+0x6>
    252e:	00 d0       	rcall	.+0      	; 0x2530 <LCD_String_xy+0x8>
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	6a 83       	std	Y+2, r22	; 0x02
    2538:	5c 83       	std	Y+4, r21	; 0x04
    253a:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	88 23       	and	r24, r24
    2540:	49 f4       	brne	.+18     	; 0x2554 <LCD_String_xy+0x2c>
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	80 31       	cpi	r24, 0x10	; 16
    2546:	30 f4       	brcc	.+12     	; 0x2554 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	8f 70       	andi	r24, 0x0F	; 15
    254c:	80 68       	ori	r24, 0x80	; 128
    254e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
    2552:	0b c0       	rjmp	.+22     	; 0x256a <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	41 f4       	brne	.+16     	; 0x256a <LCD_String_xy+0x42>
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	80 31       	cpi	r24, 0x10	; 16
    255e:	28 f4       	brcc	.+10     	; 0x256a <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	8f 70       	andi	r24, 0x0F	; 15
    2564:	80 6c       	ori	r24, 0xC0	; 192
    2566:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <LCD_String>
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <LCD_Clear>:

void LCD_Clear()
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	2e 97       	sbiw	r28, 0x0e	; 14
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e4       	ldi	r27, 0x40	; 64
    25a2:	8b 87       	std	Y+11, r24	; 0x0b
    25a4:	9c 87       	std	Y+12, r25	; 0x0c
    25a6:	ad 87       	std	Y+13, r26	; 0x0d
    25a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	8f 83       	std	Y+7, r24	; 0x07
    25c4:	98 87       	std	Y+8, r25	; 0x08
    25c6:	a9 87       	std	Y+9, r26	; 0x09
    25c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <LCD_Clear+0x6c>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <LCD_Clear+0xea>
	else if (__tmp > 65535)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	0f c0       	rjmp	.+30     	; 0x264c <LCD_Clear+0xcc>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_Clear+0xba>
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <LCD_Clear+0xae>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	6f 81       	ldd	r22, Y+7	; 0x07
    2658:	78 85       	ldd	r23, Y+8	; 0x08
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_Clear+0xf6>
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    267e:	80 e8       	ldi	r24, 0x80	; 128
    2680:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_Command>
}
    2684:	2e 96       	adiw	r28, 0x0e	; 14
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <__prologue_saves__>:
    2696:	2f 92       	push	r2
    2698:	3f 92       	push	r3
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	ca 1b       	sub	r28, r26
    26c0:	db 0b       	sbc	r29, r27
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	09 94       	ijmp

000026ce <__epilogue_restores__>:
    26ce:	2a 88       	ldd	r2, Y+18	; 0x12
    26d0:	39 88       	ldd	r3, Y+17	; 0x11
    26d2:	48 88       	ldd	r4, Y+16	; 0x10
    26d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26da:	8c 84       	ldd	r8, Y+12	; 0x0c
    26dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    26de:	aa 84       	ldd	r10, Y+10	; 0x0a
    26e0:	b9 84       	ldd	r11, Y+9	; 0x09
    26e2:	c8 84       	ldd	r12, Y+8	; 0x08
    26e4:	df 80       	ldd	r13, Y+7	; 0x07
    26e6:	ee 80       	ldd	r14, Y+6	; 0x06
    26e8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ea:	0c 81       	ldd	r16, Y+4	; 0x04
    26ec:	1b 81       	ldd	r17, Y+3	; 0x03
    26ee:	aa 81       	ldd	r26, Y+2	; 0x02
    26f0:	b9 81       	ldd	r27, Y+1	; 0x01
    26f2:	ce 0f       	add	r28, r30
    26f4:	d1 1d       	adc	r29, r1
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	ed 01       	movw	r28, r26
    2702:	08 95       	ret

00002704 <_exit>:
    2704:	f8 94       	cli

00002706 <__stop_program>:
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <__stop_program>
