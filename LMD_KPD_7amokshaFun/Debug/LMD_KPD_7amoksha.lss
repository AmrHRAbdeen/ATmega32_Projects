
LMD_KPD_7amoksha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00000b54  00000bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010f8  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000865  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 cb 03 	call	0x796	; 0x796 <main>
  7a:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:




void DIO_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
  aa:	eb e3       	ldi	r30, 0x3B	; 59
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
  b0:	e8 e3       	ldi	r30, 0x38	; 56
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	80 83       	st	Z, r24
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
  be:	e2 e3       	ldi	r30, 0x32	; 50
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	27 97       	sbiw	r28, 0x07	; 7
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	8c 83       	std	Y+4, r24	; 0x04
  e2:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
  e4:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	30 f4       	brcc	.+12     	; 0xf8 <DIO_u8SetPinDirection+0x2c>
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	31 f0       	breq	.+12     	; 0xfe <DIO_u8SetPinDirection+0x32>
  f2:	8d 81       	ldd	r24, Y+5	; 0x05
  f4:	88 23       	and	r24, r24
  f6:	19 f0       	breq	.+6      	; 0xfe <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8b 83       	std	Y+3, r24	; 0x03
  fc:	ce c0       	rjmp	.+412    	; 0x29a <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	87 70       	andi	r24, 0x07	; 7
 102:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 104:	8c 81       	ldd	r24, Y+4	; 0x04
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	86 95       	lsr	r24
 10c:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	3f 83       	std	Y+7, r19	; 0x07
 116:	2e 83       	std	Y+6, r18	; 0x06
 118:	6e 81       	ldd	r22, Y+6	; 0x06
 11a:	7f 81       	ldd	r23, Y+7	; 0x07
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	71 05       	cpc	r23, r1
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_u8SetPinDirection+0x58>
 122:	41 c0       	rjmp	.+130    	; 0x1a6 <DIO_u8SetPinDirection+0xda>
 124:	8e 81       	ldd	r24, Y+6	; 0x06
 126:	9f 81       	ldd	r25, Y+7	; 0x07
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	34 f4       	brge	.+12     	; 0x13a <DIO_u8SetPinDirection+0x6e>
 12e:	2e 81       	ldd	r18, Y+6	; 0x06
 130:	3f 81       	ldd	r19, Y+7	; 0x07
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	71 f0       	breq	.+28     	; 0x154 <DIO_u8SetPinDirection+0x88>
 138:	b0 c0       	rjmp	.+352    	; 0x29a <DIO_u8SetPinDirection+0x1ce>
 13a:	6e 81       	ldd	r22, Y+6	; 0x06
 13c:	7f 81       	ldd	r23, Y+7	; 0x07
 13e:	62 30       	cpi	r22, 0x02	; 2
 140:	71 05       	cpc	r23, r1
 142:	09 f4       	brne	.+2      	; 0x146 <DIO_u8SetPinDirection+0x7a>
 144:	59 c0       	rjmp	.+178    	; 0x1f8 <DIO_u8SetPinDirection+0x12c>
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	9f 81       	ldd	r25, Y+7	; 0x07
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	91 05       	cpc	r25, r1
 14e:	09 f4       	brne	.+2      	; 0x152 <DIO_u8SetPinDirection+0x86>
 150:	7c c0       	rjmp	.+248    	; 0x24a <DIO_u8SetPinDirection+0x17e>
 152:	a3 c0       	rjmp	.+326    	; 0x29a <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
 154:	8d 81       	ldd	r24, Y+5	; 0x05
 156:	88 23       	and	r24, r24
 158:	21 f0       	breq	.+8      	; 0x162 <DIO_u8SetPinDirection+0x96>
 15a:	8d 81       	ldd	r24, Y+5	; 0x05
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	09 f0       	breq	.+2      	; 0x162 <DIO_u8SetPinDirection+0x96>
 160:	1d 82       	std	Y+5, r1	; 0x05
 162:	aa e3       	ldi	r26, 0x3A	; 58
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	ea e3       	ldi	r30, 0x3A	; 58
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	48 2f       	mov	r20, r24
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_u8SetPinDirection+0xb2>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_u8SetPinDirection+0xae>
 182:	80 95       	com	r24
 184:	48 23       	and	r20, r24
 186:	8d 81       	ldd	r24, Y+5	; 0x05
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinDirection+0xce>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinDirection+0xca>
 19e:	cb 01       	movw	r24, r22
 1a0:	84 2b       	or	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7a c0       	rjmp	.+244    	; 0x29a <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1a6:	8d 81       	ldd	r24, Y+5	; 0x05
 1a8:	88 23       	and	r24, r24
 1aa:	21 f0       	breq	.+8      	; 0x1b4 <DIO_u8SetPinDirection+0xe8>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinDirection+0xe8>
 1b2:	1d 82       	std	Y+5, r1	; 0x05
 1b4:	a7 e3       	ldi	r26, 0x37	; 55
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e7 e3       	ldi	r30, 0x37	; 55
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	48 2f       	mov	r20, r24
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_u8SetPinDirection+0x104>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	2a 95       	dec	r18
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_u8SetPinDirection+0x100>
 1d4:	80 95       	com	r24
 1d6:	48 23       	and	r20, r24
 1d8:	8d 81       	ldd	r24, Y+5	; 0x05
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinDirection+0x120>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	8a 95       	dec	r24
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinDirection+0x11c>
 1f0:	cb 01       	movw	r24, r22
 1f2:	84 2b       	or	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	51 c0       	rjmp	.+162    	; 0x29a <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1f8:	8d 81       	ldd	r24, Y+5	; 0x05
 1fa:	88 23       	and	r24, r24
 1fc:	21 f0       	breq	.+8      	; 0x206 <DIO_u8SetPinDirection+0x13a>
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	09 f0       	breq	.+2      	; 0x206 <DIO_u8SetPinDirection+0x13a>
 204:	1d 82       	std	Y+5, r1	; 0x05
 206:	a4 e3       	ldi	r26, 0x34	; 52
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e4 e3       	ldi	r30, 0x34	; 52
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinDirection+0x156>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinDirection+0x152>
 226:	80 95       	com	r24
 228:	48 23       	and	r20, r24
 22a:	8d 81       	ldd	r24, Y+5	; 0x05
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8SetPinDirection+0x172>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8SetPinDirection+0x16e>
 242:	cb 01       	movw	r24, r22
 244:	84 2b       	or	r24, r20
 246:	8c 93       	st	X, r24
 248:	28 c0       	rjmp	.+80     	; 0x29a <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
 24a:	8d 81       	ldd	r24, Y+5	; 0x05
 24c:	88 23       	and	r24, r24
 24e:	21 f0       	breq	.+8      	; 0x258 <DIO_u8SetPinDirection+0x18c>
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	09 f0       	breq	.+2      	; 0x258 <DIO_u8SetPinDirection+0x18c>
 256:	1d 82       	std	Y+5, r1	; 0x05
 258:	a1 e3       	ldi	r26, 0x31	; 49
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e1 e3       	ldi	r30, 0x31	; 49
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	48 2f       	mov	r20, r24
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8SetPinDirection+0x1a8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	2a 95       	dec	r18
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8SetPinDirection+0x1a4>
 278:	80 95       	com	r24
 27a:	48 23       	and	r20, r24
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8SetPinDirection+0x1c4>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8SetPinDirection+0x1c0>
 294:	cb 01       	movw	r24, r22
 296:	84 2b       	or	r24, r20
 298:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 29c:	27 96       	adiw	r28, 0x07	; 7
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	08 95       	ret

000002ae <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	27 97       	sbiw	r28, 0x07	; 7
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	8c 83       	std	Y+4, r24	; 0x04
 2c4:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
	/*	OUTPUT:                                              */
	/*			return ERROR STATE                           */
	/*********************************************************/
   u8 Local_u8Error=ERROR_OK;
 2c6:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	80 32       	cpi	r24, 0x20	; 32
 2cc:	30 f4       	brcc	.+12     	; 0x2da <DIO_u8SetPinValue+0x2c>
 2ce:	8d 81       	ldd	r24, Y+5	; 0x05
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <DIO_u8SetPinValue+0x32>
 2d4:	8d 81       	ldd	r24, Y+5	; 0x05
 2d6:	88 23       	and	r24, r24
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	8b 83       	std	Y+3, r24	; 0x03
 2de:	ce c0       	rjmp	.+412    	; 0x47c <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	87 70       	andi	r24, 0x07	; 7
 2e4:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	86 95       	lsr	r24
 2ea:	86 95       	lsr	r24
 2ec:	86 95       	lsr	r24
 2ee:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	3f 83       	std	Y+7, r19	; 0x07
 2f8:	2e 83       	std	Y+6, r18	; 0x06
 2fa:	6e 81       	ldd	r22, Y+6	; 0x06
 2fc:	7f 81       	ldd	r23, Y+7	; 0x07
 2fe:	61 30       	cpi	r22, 0x01	; 1
 300:	71 05       	cpc	r23, r1
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_u8SetPinValue+0x58>
 304:	41 c0       	rjmp	.+130    	; 0x388 <DIO_u8SetPinValue+0xda>
 306:	8e 81       	ldd	r24, Y+6	; 0x06
 308:	9f 81       	ldd	r25, Y+7	; 0x07
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	91 05       	cpc	r25, r1
 30e:	34 f4       	brge	.+12     	; 0x31c <DIO_u8SetPinValue+0x6e>
 310:	2e 81       	ldd	r18, Y+6	; 0x06
 312:	3f 81       	ldd	r19, Y+7	; 0x07
 314:	21 15       	cp	r18, r1
 316:	31 05       	cpc	r19, r1
 318:	71 f0       	breq	.+28     	; 0x336 <DIO_u8SetPinValue+0x88>
 31a:	b0 c0       	rjmp	.+352    	; 0x47c <DIO_u8SetPinValue+0x1ce>
 31c:	6e 81       	ldd	r22, Y+6	; 0x06
 31e:	7f 81       	ldd	r23, Y+7	; 0x07
 320:	62 30       	cpi	r22, 0x02	; 2
 322:	71 05       	cpc	r23, r1
 324:	09 f4       	brne	.+2      	; 0x328 <DIO_u8SetPinValue+0x7a>
 326:	59 c0       	rjmp	.+178    	; 0x3da <DIO_u8SetPinValue+0x12c>
 328:	8e 81       	ldd	r24, Y+6	; 0x06
 32a:	9f 81       	ldd	r25, Y+7	; 0x07
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_u8SetPinValue+0x86>
 332:	7c c0       	rjmp	.+248    	; 0x42c <DIO_u8SetPinValue+0x17e>
 334:	a3 c0       	rjmp	.+326    	; 0x47c <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 336:	8d 81       	ldd	r24, Y+5	; 0x05
 338:	88 23       	and	r24, r24
 33a:	21 f0       	breq	.+8      	; 0x344 <DIO_u8SetPinValue+0x96>
 33c:	8d 81       	ldd	r24, Y+5	; 0x05
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_u8SetPinValue+0x96>
 342:	1d 82       	std	Y+5, r1	; 0x05
 344:	ab e3       	ldi	r26, 0x3B	; 59
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	eb e3       	ldi	r30, 0x3B	; 59
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_u8SetPinValue+0xb2>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	2a 95       	dec	r18
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_u8SetPinValue+0xae>
 364:	80 95       	com	r24
 366:	48 23       	and	r20, r24
 368:	8d 81       	ldd	r24, Y+5	; 0x05
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	88 2f       	mov	r24, r24
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_u8SetPinValue+0xce>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_u8SetPinValue+0xca>
 380:	cb 01       	movw	r24, r22
 382:	84 2b       	or	r24, r20
 384:	8c 93       	st	X, r24
 386:	7a c0       	rjmp	.+244    	; 0x47c <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 388:	8d 81       	ldd	r24, Y+5	; 0x05
 38a:	88 23       	and	r24, r24
 38c:	21 f0       	breq	.+8      	; 0x396 <DIO_u8SetPinValue+0xe8>
 38e:	8d 81       	ldd	r24, Y+5	; 0x05
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_u8SetPinValue+0xe8>
 394:	1d 82       	std	Y+5, r1	; 0x05
 396:	a8 e3       	ldi	r26, 0x38	; 56
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e8 e3       	ldi	r30, 0x38	; 56
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8SetPinValue+0x104>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	2a 95       	dec	r18
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8SetPinValue+0x100>
 3b6:	80 95       	com	r24
 3b8:	48 23       	and	r20, r24
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	88 2f       	mov	r24, r24
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_u8SetPinValue+0x120>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_u8SetPinValue+0x11c>
 3d2:	cb 01       	movw	r24, r22
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	51 c0       	rjmp	.+162    	; 0x47c <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 3da:	8d 81       	ldd	r24, Y+5	; 0x05
 3dc:	88 23       	and	r24, r24
 3de:	21 f0       	breq	.+8      	; 0x3e8 <DIO_u8SetPinValue+0x13a>
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <DIO_u8SetPinValue+0x13a>
 3e6:	1d 82       	std	Y+5, r1	; 0x05
 3e8:	a5 e3       	ldi	r26, 0x35	; 53
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	e5 e3       	ldi	r30, 0x35	; 53
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_u8SetPinValue+0x156>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	2a 95       	dec	r18
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_u8SetPinValue+0x152>
 408:	80 95       	com	r24
 40a:	48 23       	and	r20, r24
 40c:	8d 81       	ldd	r24, Y+5	; 0x05
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8SetPinValue+0x172>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8SetPinValue+0x16e>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	28 c0       	rjmp	.+80     	; 0x47c <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 42c:	8d 81       	ldd	r24, Y+5	; 0x05
 42e:	88 23       	and	r24, r24
 430:	21 f0       	breq	.+8      	; 0x43a <DIO_u8SetPinValue+0x18c>
 432:	8d 81       	ldd	r24, Y+5	; 0x05
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	09 f0       	breq	.+2      	; 0x43a <DIO_u8SetPinValue+0x18c>
 438:	1d 82       	std	Y+5, r1	; 0x05
 43a:	a2 e3       	ldi	r26, 0x32	; 50
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e2 e3       	ldi	r30, 0x32	; 50
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	48 2f       	mov	r20, r24
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_u8SetPinValue+0x1a8>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	2a 95       	dec	r18
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_u8SetPinValue+0x1a4>
 45a:	80 95       	com	r24
 45c:	48 23       	and	r20, r24
 45e:	8d 81       	ldd	r24, Y+5	; 0x05
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	88 2f       	mov	r24, r24
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	b9 01       	movw	r22, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_u8SetPinValue+0x1c4>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_u8SetPinValue+0x1c0>
 476:	cb 01       	movw	r24, r22
 478:	84 2b       	or	r24, r20
 47a:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 47e:	27 96       	adiw	r28, 0x07	; 7
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	28 97       	sbiw	r28, 0x08	; 8
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	8c 83       	std	Y+4, r24	; 0x04
 4a6:	7e 83       	std	Y+6, r23	; 0x06
 4a8:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 4aa:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	80 32       	cpi	r24, 0x20	; 32
 4b0:	20 f4       	brcc	.+8      	; 0x4ba <DIO_u8GetPinValue+0x2a>
 4b2:	8d 81       	ldd	r24, Y+5	; 0x05
 4b4:	9e 81       	ldd	r25, Y+6	; 0x06
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	19 f4       	brne	.+6      	; 0x4c0 <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	8b 83       	std	Y+3, r24	; 0x03
 4be:	78 c0       	rjmp	.+240    	; 0x5b0 <DIO_u8GetPinValue+0x120>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	87 70       	andi	r24, 0x07	; 7
 4c4:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	86 95       	lsr	r24
 4ca:	86 95       	lsr	r24
 4cc:	86 95       	lsr	r24
 4ce:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	38 87       	std	Y+8, r19	; 0x08
 4d8:	2f 83       	std	Y+7, r18	; 0x07
 4da:	4f 81       	ldd	r20, Y+7	; 0x07
 4dc:	58 85       	ldd	r21, Y+8	; 0x08
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	51 05       	cpc	r21, r1
 4e2:	59 f1       	breq	.+86     	; 0x53a <DIO_u8GetPinValue+0xaa>
 4e4:	8f 81       	ldd	r24, Y+7	; 0x07
 4e6:	98 85       	ldd	r25, Y+8	; 0x08
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	91 05       	cpc	r25, r1
 4ec:	34 f4       	brge	.+12     	; 0x4fa <DIO_u8GetPinValue+0x6a>
 4ee:	2f 81       	ldd	r18, Y+7	; 0x07
 4f0:	38 85       	ldd	r19, Y+8	; 0x08
 4f2:	21 15       	cp	r18, r1
 4f4:	31 05       	cpc	r19, r1
 4f6:	69 f0       	breq	.+26     	; 0x512 <DIO_u8GetPinValue+0x82>
 4f8:	5b c0       	rjmp	.+182    	; 0x5b0 <DIO_u8GetPinValue+0x120>
 4fa:	4f 81       	ldd	r20, Y+7	; 0x07
 4fc:	58 85       	ldd	r21, Y+8	; 0x08
 4fe:	42 30       	cpi	r20, 0x02	; 2
 500:	51 05       	cpc	r21, r1
 502:	79 f1       	breq	.+94     	; 0x562 <DIO_u8GetPinValue+0xd2>
 504:	8f 81       	ldd	r24, Y+7	; 0x07
 506:	98 85       	ldd	r25, Y+8	; 0x08
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	91 05       	cpc	r25, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <DIO_u8GetPinValue+0x80>
 50e:	3d c0       	rjmp	.+122    	; 0x58a <DIO_u8GetPinValue+0xfa>
 510:	4f c0       	rjmp	.+158    	; 0x5b0 <DIO_u8GetPinValue+0x120>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
 512:	e9 e3       	ldi	r30, 0x39	; 57
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a9 01       	movw	r20, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_u8GetPinValue+0x9a>
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_u8GetPinValue+0x96>
 52e:	ca 01       	movw	r24, r20
 530:	81 70       	andi	r24, 0x01	; 1
 532:	ed 81       	ldd	r30, Y+5	; 0x05
 534:	fe 81       	ldd	r31, Y+6	; 0x06
 536:	80 83       	st	Z, r24
 538:	3b c0       	rjmp	.+118    	; 0x5b0 <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
 53a:	e6 e3       	ldi	r30, 0x36	; 54
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	88 2f       	mov	r24, r24
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	a9 01       	movw	r20, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_u8GetPinValue+0xc2>
 54e:	55 95       	asr	r21
 550:	47 95       	ror	r20
 552:	8a 95       	dec	r24
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_u8GetPinValue+0xbe>
 556:	ca 01       	movw	r24, r20
 558:	81 70       	andi	r24, 0x01	; 1
 55a:	ed 81       	ldd	r30, Y+5	; 0x05
 55c:	fe 81       	ldd	r31, Y+6	; 0x06
 55e:	80 83       	st	Z, r24
 560:	27 c0       	rjmp	.+78     	; 0x5b0 <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
 562:	e3 e3       	ldi	r30, 0x33	; 51
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	a9 01       	movw	r20, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_u8GetPinValue+0xea>
 576:	55 95       	asr	r21
 578:	47 95       	ror	r20
 57a:	8a 95       	dec	r24
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_u8GetPinValue+0xe6>
 57e:	ca 01       	movw	r24, r20
 580:	81 70       	andi	r24, 0x01	; 1
 582:	ed 81       	ldd	r30, Y+5	; 0x05
 584:	fe 81       	ldd	r31, Y+6	; 0x06
 586:	80 83       	st	Z, r24
 588:	13 c0       	rjmp	.+38     	; 0x5b0 <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
 58a:	e0 e3       	ldi	r30, 0x30	; 48
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a9 01       	movw	r20, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8GetPinValue+0x112>
 59e:	55 95       	asr	r21
 5a0:	47 95       	ror	r20
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_u8GetPinValue+0x10e>
 5a6:	ca 01       	movw	r24, r20
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	ed 81       	ldd	r30, Y+5	; 0x05
 5ac:	fe 81       	ldd	r31, Y+6	; 0x06
 5ae:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5b2:	28 96       	adiw	r28, 0x08	; 8
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	00 d0       	rcall	.+0      	; 0x5ca <DIO_u8SetPortDirection+0x6>
 5ca:	0f 92       	push	r0
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	8a 83       	std	Y+2, r24	; 0x02
 5d2:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5d4:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
 5da:	89 81       	ldd	r24, Y+1	; 0x01
}
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	08 95       	ret

000005e8 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <DIO_u8SetPortnValue+0x6>
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <DIO_u8SetPortnValue+0x8>
 5f0:	0f 92       	push	r0
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	8a 83       	std	Y+2, r24	; 0x02
 5f8:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5fa:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	84 30       	cpi	r24, 0x04	; 4
 600:	18 f0       	brcs	.+6      	; 0x608 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	32 c0       	rjmp	.+100    	; 0x66c <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	3d 83       	std	Y+5, r19	; 0x05
 610:	2c 83       	std	Y+4, r18	; 0x04
 612:	8c 81       	ldd	r24, Y+4	; 0x04
 614:	9d 81       	ldd	r25, Y+5	; 0x05
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	d1 f0       	breq	.+52     	; 0x650 <DIO_u8SetPortnValue+0x68>
 61c:	2c 81       	ldd	r18, Y+4	; 0x04
 61e:	3d 81       	ldd	r19, Y+5	; 0x05
 620:	22 30       	cpi	r18, 0x02	; 2
 622:	31 05       	cpc	r19, r1
 624:	2c f4       	brge	.+10     	; 0x630 <DIO_u8SetPortnValue+0x48>
 626:	8c 81       	ldd	r24, Y+4	; 0x04
 628:	9d 81       	ldd	r25, Y+5	; 0x05
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	61 f0       	breq	.+24     	; 0x646 <DIO_u8SetPortnValue+0x5e>
 62e:	1e c0       	rjmp	.+60     	; 0x66c <DIO_u8SetPortnValue+0x84>
 630:	2c 81       	ldd	r18, Y+4	; 0x04
 632:	3d 81       	ldd	r19, Y+5	; 0x05
 634:	22 30       	cpi	r18, 0x02	; 2
 636:	31 05       	cpc	r19, r1
 638:	81 f0       	breq	.+32     	; 0x65a <DIO_u8SetPortnValue+0x72>
 63a:	8c 81       	ldd	r24, Y+4	; 0x04
 63c:	9d 81       	ldd	r25, Y+5	; 0x05
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	91 05       	cpc	r25, r1
 642:	81 f0       	breq	.+32     	; 0x664 <DIO_u8SetPortnValue+0x7c>
 644:	13 c0       	rjmp	.+38     	; 0x66c <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
 646:	eb e3       	ldi	r30, 0x3B	; 59
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	80 83       	st	Z, r24
 64e:	0e c0       	rjmp	.+28     	; 0x66c <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
 650:	e8 e3       	ldi	r30, 0x38	; 56
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8b 81       	ldd	r24, Y+3	; 0x03
 656:	80 83       	st	Z, r24
 658:	09 c0       	rjmp	.+18     	; 0x66c <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
 65a:	e5 e3       	ldi	r30, 0x35	; 53
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	80 83       	st	Z, r24
 662:	04 c0       	rjmp	.+8      	; 0x66c <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
 664:	e2 e3       	ldi	r30, 0x32	; 50
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 66c:	89 81       	ldd	r24, Y+1	; 0x01
}
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	cf 91       	pop	r28
 67a:	df 91       	pop	r29
 67c:	08 95       	ret

0000067e <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
 67e:	df 93       	push	r29
 680:	cf 93       	push	r28
 682:	00 d0       	rcall	.+0      	; 0x684 <DIO_u8GetPortnValue+0x6>
 684:	00 d0       	rcall	.+0      	; 0x686 <DIO_u8GetPortnValue+0x8>
 686:	00 d0       	rcall	.+0      	; 0x688 <DIO_u8GetPortnValue+0xa>
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	8a 83       	std	Y+2, r24	; 0x02
 68e:	7c 83       	std	Y+4, r23	; 0x04
 690:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 692:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	18 f0       	brcs	.+6      	; 0x6a0 <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	3a c0       	rjmp	.+116    	; 0x714 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	3e 83       	std	Y+6, r19	; 0x06
 6a8:	2d 83       	std	Y+5, r18	; 0x05
 6aa:	8d 81       	ldd	r24, Y+5	; 0x05
 6ac:	9e 81       	ldd	r25, Y+6	; 0x06
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	91 05       	cpc	r25, r1
 6b2:	e1 f0       	breq	.+56     	; 0x6ec <DIO_u8GetPortnValue+0x6e>
 6b4:	2d 81       	ldd	r18, Y+5	; 0x05
 6b6:	3e 81       	ldd	r19, Y+6	; 0x06
 6b8:	22 30       	cpi	r18, 0x02	; 2
 6ba:	31 05       	cpc	r19, r1
 6bc:	2c f4       	brge	.+10     	; 0x6c8 <DIO_u8GetPortnValue+0x4a>
 6be:	8d 81       	ldd	r24, Y+5	; 0x05
 6c0:	9e 81       	ldd	r25, Y+6	; 0x06
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	61 f0       	breq	.+24     	; 0x6de <DIO_u8GetPortnValue+0x60>
 6c6:	26 c0       	rjmp	.+76     	; 0x714 <DIO_u8GetPortnValue+0x96>
 6c8:	2d 81       	ldd	r18, Y+5	; 0x05
 6ca:	3e 81       	ldd	r19, Y+6	; 0x06
 6cc:	22 30       	cpi	r18, 0x02	; 2
 6ce:	31 05       	cpc	r19, r1
 6d0:	a1 f0       	breq	.+40     	; 0x6fa <DIO_u8GetPortnValue+0x7c>
 6d2:	8d 81       	ldd	r24, Y+5	; 0x05
 6d4:	9e 81       	ldd	r25, Y+6	; 0x06
 6d6:	83 30       	cpi	r24, 0x03	; 3
 6d8:	91 05       	cpc	r25, r1
 6da:	b1 f0       	breq	.+44     	; 0x708 <DIO_u8GetPortnValue+0x8a>
 6dc:	1b c0       	rjmp	.+54     	; 0x714 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
 6de:	e9 e3       	ldi	r30, 0x39	; 57
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	eb 81       	ldd	r30, Y+3	; 0x03
 6e6:	fc 81       	ldd	r31, Y+4	; 0x04
 6e8:	80 83       	st	Z, r24
 6ea:	14 c0       	rjmp	.+40     	; 0x714 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
 6ec:	e6 e3       	ldi	r30, 0x36	; 54
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	eb 81       	ldd	r30, Y+3	; 0x03
 6f4:	fc 81       	ldd	r31, Y+4	; 0x04
 6f6:	80 83       	st	Z, r24
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
 6fa:	e3 e3       	ldi	r30, 0x33	; 51
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	eb 81       	ldd	r30, Y+3	; 0x03
 702:	fc 81       	ldd	r31, Y+4	; 0x04
 704:	80 83       	st	Z, r24
 706:	06 c0       	rjmp	.+12     	; 0x714 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
 708:	e0 e3       	ldi	r30, 0x30	; 48
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	eb 81       	ldd	r30, Y+3	; 0x03
 710:	fc 81       	ldd	r31, Y+4	; 0x04
 712:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 714:	89 81       	ldd	r24, Y+1	; 0x01
}
 716:	26 96       	adiw	r28, 0x06	; 6
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <DelayMs>:
 *      Author: Monika Ossama
 */
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	00 d0       	rcall	.+0      	; 0x72e <DelayMs+0x6>
 72e:	00 d0       	rcall	.+0      	; 0x730 <DelayMs+0x8>
 730:	00 d0       	rcall	.+0      	; 0x732 <DelayMs+0xa>
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	9e 83       	std	Y+6, r25	; 0x06
 738:	8d 83       	std	Y+5, r24	; 0x05
	u16 i,j ;
	for(j=0;j<u16Time;j++){
 73a:	1a 82       	std	Y+2, r1	; 0x02
 73c:	19 82       	std	Y+1, r1	; 0x01
 73e:	1b c0       	rjmp	.+54     	; 0x776 <DelayMs+0x4e>
		for(i=0;i<295;i++){
 740:	1c 82       	std	Y+4, r1	; 0x04
 742:	1b 82       	std	Y+3, r1	; 0x03
 744:	0d c0       	rjmp	.+26     	; 0x760 <DelayMs+0x38>
	...
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	9c 81       	ldd	r25, Y+4	; 0x04
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	9c 83       	std	Y+4, r25	; 0x04
 75e:	8b 83       	std	Y+3, r24	; 0x03
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	9c 81       	ldd	r25, Y+4	; 0x04
 764:	21 e0       	ldi	r18, 0x01	; 1
 766:	87 32       	cpi	r24, 0x27	; 39
 768:	92 07       	cpc	r25, r18
 76a:	68 f3       	brcs	.-38     	; 0x746 <DelayMs+0x1e>
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
	u16 i,j ;
	for(j=0;j<u16Time;j++){
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	9a 81       	ldd	r25, Y+2	; 0x02
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	9a 83       	std	Y+2, r25	; 0x02
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	29 81       	ldd	r18, Y+1	; 0x01
 778:	3a 81       	ldd	r19, Y+2	; 0x02
 77a:	8d 81       	ldd	r24, Y+5	; 0x05
 77c:	9e 81       	ldd	r25, Y+6	; 0x06
 77e:	28 17       	cp	r18, r24
 780:	39 07       	cpc	r19, r25
 782:	f0 f2       	brcs	.-68     	; 0x740 <DelayMs+0x18>
			asm("NOP");
			asm("NOP");
		}
	}

}
 784:	26 96       	adiw	r28, 0x06	; 6
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <main>:
		//247, 246, 21, 67, 21, 246, 247, 255
		//247, 246, 21, 67, 21, 246, 247, 255
		227, 235, 227, 247, 128, 247, 235, 221
};

int main(void){
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	63 97       	sbiw	r28, 0x13	; 19
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
	//u8 u8LoopIndex;
	u8 keypad_Status[KPD_NUM_OF_INPUTS * KPD_NUM_OF_OUTPUTS];
	DIO_voidInit();
 7aa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	u8 u8LoopDelay;
	u8 u8Counter=1;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8LoopNumberOFPics;
	while(1)
	{
		KPD_u8GetKeysState(keypad_Status);
 7b2:	ce 01       	movw	r24, r28
 7b4:	04 96       	adiw	r24, 0x04	; 4
 7b6:	0e 94 c0 04 	call	0x980	; 0x980 <KPD_u8GetKeysState>
		if(keypad_Status[JumpKey]==KPD_u8_PRESSED){
 7ba:	89 85       	ldd	r24, Y+9	; 0x09
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	09 f5       	brne	.+66     	; 0x802 <main+0x6c>
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<JumpNumberOFPics;u8LoopNumberOFPics++){
 7c0:	19 82       	std	Y+1, r1	; 0x01
 7c2:	1b c0       	rjmp	.+54     	; 0x7fa <main+0x64>
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 7c4:	1b 82       	std	Y+3, r1	; 0x03
 7c6:	13 c0       	rjmp	.+38     	; 0x7ee <main+0x58>
					LMD_u8SetPattern(u8JumpAnimations[u8LoopNumberOFPics],LMD_u8_RED_COLOR);
 7c8:	20 e6       	ldi	r18, 0x60	; 96
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	88 0f       	add	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	82 0f       	add	r24, r18
 7e0:	93 1f       	adc	r25, r19
 7e2:	61 e0       	ldi	r22, 0x01	; 1
 7e4:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
	while(1)
	{
		KPD_u8GetKeysState(keypad_Status);
		if(keypad_Status[JumpKey]==KPD_u8_PRESSED){
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<JumpNumberOFPics;u8LoopNumberOFPics++){
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	8f 5f       	subi	r24, 0xFF	; 255
 7ec:	8b 83       	std	Y+3, r24	; 0x03
 7ee:	8b 81       	ldd	r24, Y+3	; 0x03
 7f0:	82 31       	cpi	r24, 0x12	; 18
 7f2:	50 f3       	brcs	.-44     	; 0x7c8 <main+0x32>
	u8 u8LoopNumberOFPics;
	while(1)
	{
		KPD_u8GetKeysState(keypad_Status);
		if(keypad_Status[JumpKey]==KPD_u8_PRESSED){
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<JumpNumberOFPics;u8LoopNumberOFPics++){
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	8f 5f       	subi	r24, 0xFF	; 255
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	10 f3       	brcs	.-60     	; 0x7c4 <main+0x2e>
 800:	d8 cf       	rjmp	.-80     	; 0x7b2 <main+0x1c>
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
					LMD_u8SetPattern(u8JumpAnimations[u8LoopNumberOFPics],LMD_u8_RED_COLOR);
				}
			}
		}
		else if(keypad_Status[RightKey]==KPD_u8_PRESSED){
 802:	8a 85       	ldd	r24, Y+10	; 0x0a
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	49 f5       	brne	.+82     	; 0x85a <main+0xc4>
			u8Counter++;
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	8f 5f       	subi	r24, 0xFF	; 255
 80c:	8a 83       	std	Y+2, r24	; 0x02
			if(u8Counter==NumberOFPics){
 80e:	8a 81       	ldd	r24, Y+2	; 0x02
 810:	89 30       	cpi	r24, 0x09	; 9
 812:	11 f4       	brne	.+4      	; 0x818 <main+0x82>
				u8Counter=1;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	8a 83       	std	Y+2, r24	; 0x02
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 818:	19 82       	std	Y+1, r1	; 0x01
 81a:	1b c0       	rjmp	.+54     	; 0x852 <main+0xbc>
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
 81c:	1b 82       	std	Y+3, r1	; 0x03
 81e:	13 c0       	rjmp	.+38     	; 0x846 <main+0xb0>
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
 820:	28 e7       	ldi	r18, 0x78	; 120
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	88 2f       	mov	r24, r24
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	82 0f       	add	r24, r18
 838:	93 1f       	adc	r25, r19
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
			u8Counter++;
			if(u8Counter==NumberOFPics){
				u8Counter=1;
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	8f 5f       	subi	r24, 0xFF	; 255
 844:	8b 83       	std	Y+3, r24	; 0x03
 846:	8b 81       	ldd	r24, Y+3	; 0x03
 848:	85 30       	cpi	r24, 0x05	; 5
 84a:	50 f3       	brcs	.-44     	; 0x820 <main+0x8a>
		else if(keypad_Status[RightKey]==KPD_u8_PRESSED){
			u8Counter++;
			if(u8Counter==NumberOFPics){
				u8Counter=1;
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	89 83       	std	Y+1, r24	; 0x01
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	89 30       	cpi	r24, 0x09	; 9
 856:	10 f3       	brcs	.-60     	; 0x81c <main+0x86>
 858:	ac cf       	rjmp	.-168    	; 0x7b2 <main+0x1c>
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
				}
			}
		}
		else if(keypad_Status[LeftKey]==KPD_u8_PRESSED){
 85a:	88 85       	ldd	r24, Y+8	; 0x08
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	49 f5       	brne	.+82     	; 0x8b2 <__stack+0x53>
			u8Counter--;
 860:	8a 81       	ldd	r24, Y+2	; 0x02
 862:	81 50       	subi	r24, 0x01	; 1
 864:	8a 83       	std	Y+2, r24	; 0x02
			if(u8Counter==0){
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	88 23       	and	r24, r24
 86a:	11 f4       	brne	.+4      	; 0x870 <__stack+0x11>
				u8Counter=NumberOFPics-1;
 86c:	88 e0       	ldi	r24, 0x08	; 8
 86e:	8a 83       	std	Y+2, r24	; 0x02
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 870:	19 82       	std	Y+1, r1	; 0x01
 872:	1b c0       	rjmp	.+54     	; 0x8aa <__stack+0x4b>
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
 874:	1b 82       	std	Y+3, r1	; 0x03
 876:	13 c0       	rjmp	.+38     	; 0x89e <__stack+0x3f>
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
 878:	28 e7       	ldi	r18, 0x78	; 120
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	82 0f       	add	r24, r18
 890:	93 1f       	adc	r25, r19
 892:	61 e0       	ldi	r22, 0x01	; 1
 894:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
			u8Counter--;
			if(u8Counter==0){
				u8Counter=NumberOFPics-1;
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	8f 5f       	subi	r24, 0xFF	; 255
 89c:	8b 83       	std	Y+3, r24	; 0x03
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	85 30       	cpi	r24, 0x05	; 5
 8a2:	50 f3       	brcs	.-44     	; 0x878 <__stack+0x19>
		else if(keypad_Status[LeftKey]==KPD_u8_PRESSED){
			u8Counter--;
			if(u8Counter==0){
				u8Counter=NumberOFPics-1;
			}
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	8f 5f       	subi	r24, 0xFF	; 255
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	89 30       	cpi	r24, 0x09	; 9
 8ae:	10 f3       	brcs	.-60     	; 0x874 <__stack+0x15>
 8b0:	80 cf       	rjmp	.-256    	; 0x7b2 <main+0x1c>
				for(u8LoopDelay=0;u8LoopDelay<5;u8LoopDelay++){
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
				}
			}
		}
		else if(keypad_Status[SleepKey]==KPD_u8_PRESSED){
 8b2:	8d 85       	ldd	r24, Y+13	; 0x0d
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	11 f5       	brne	.+68     	; 0x8fc <__stack+0x9d>
			u8Counter=0;
 8b8:	1a 82       	std	Y+2, r1	; 0x02
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 8ba:	19 82       	std	Y+1, r1	; 0x01
 8bc:	1b c0       	rjmp	.+54     	; 0x8f4 <__stack+0x95>
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 8be:	1b 82       	std	Y+3, r1	; 0x03
 8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <__stack+0x89>
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
 8c2:	28 e7       	ldi	r18, 0x78	; 120
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
			}
		}
		else if(keypad_Status[SleepKey]==KPD_u8_PRESSED){
			u8Counter=0;
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	8b 83       	std	Y+3, r24	; 0x03
 8e8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ea:	82 31       	cpi	r24, 0x12	; 18
 8ec:	50 f3       	brcs	.-44     	; 0x8c2 <__stack+0x63>
				}
			}
		}
		else if(keypad_Status[SleepKey]==KPD_u8_PRESSED){
			u8Counter=0;
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
 8f0:	8f 5f       	subi	r24, 0xFF	; 255
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	89 30       	cpi	r24, 0x09	; 9
 8f8:	10 f3       	brcs	.-60     	; 0x8be <__stack+0x5f>
 8fa:	5b cf       	rjmp	.-330    	; 0x7b2 <main+0x1c>
				for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
					LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
				}
			}
		}
		else if(keypad_Status[WakeUpKey]==KPD_u8_PRESSED){
 8fc:	8d 81       	ldd	r24, Y+5	; 0x05
 8fe:	81 30       	cpi	r24, 0x01	; 1
 900:	31 f5       	brne	.+76     	; 0x94e <__stack+0xef>
			if(u8Counter==0){
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	88 23       	and	r24, r24
 906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xad>
				u8Counter=1;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	8a 83       	std	Y+2, r24	; 0x02
			}
				for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 90c:	19 82       	std	Y+1, r1	; 0x01
 90e:	1b c0       	rjmp	.+54     	; 0x946 <__stack+0xe7>
					for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 910:	1b 82       	std	Y+3, r1	; 0x03
 912:	13 c0       	rjmp	.+38     	; 0x93a <__stack+0xdb>
						LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
 914:	28 e7       	ldi	r18, 0x78	; 120
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	88 2f       	mov	r24, r24
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	82 0f       	add	r24, r18
 92c:	93 1f       	adc	r25, r19
 92e:	61 e0       	ldi	r22, 0x01	; 1
 930:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
		else if(keypad_Status[WakeUpKey]==KPD_u8_PRESSED){
			if(u8Counter==0){
				u8Counter=1;
			}
				for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
					for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 934:	8b 81       	ldd	r24, Y+3	; 0x03
 936:	8f 5f       	subi	r24, 0xFF	; 255
 938:	8b 83       	std	Y+3, r24	; 0x03
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	82 31       	cpi	r24, 0x12	; 18
 93e:	50 f3       	brcs	.-44     	; 0x914 <__stack+0xb5>
		}
		else if(keypad_Status[WakeUpKey]==KPD_u8_PRESSED){
			if(u8Counter==0){
				u8Counter=1;
			}
				for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	8f 5f       	subi	r24, 0xFF	; 255
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	89 30       	cpi	r24, 0x09	; 9
 94a:	10 f3       	brcs	.-60     	; 0x910 <__stack+0xb1>
 94c:	32 cf       	rjmp	.-412    	; 0x7b2 <main+0x1c>
					}
				}

		}
		else{
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 94e:	19 82       	std	Y+1, r1	; 0x01
 950:	13 c0       	rjmp	.+38     	; 0x978 <__stack+0x119>
				LMD_u8SetPattern(u8Animations[u8Counter],LMD_u8_RED_COLOR);
 952:	28 e7       	ldi	r18, 0x78	; 120
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	88 2f       	mov	r24, r24
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	61 e0       	ldi	r22, 0x01	; 1
 96e:	0e 94 3a 05 	call	0xa74	; 0xa74 <LMD_u8SetPattern>
					}
				}

		}
		else{
			for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 972:	89 81       	ldd	r24, Y+1	; 0x01
 974:	8f 5f       	subi	r24, 0xFF	; 255
 976:	89 83       	std	Y+1, r24	; 0x01
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	89 30       	cpi	r24, 0x09	; 9
 97c:	50 f3       	brcs	.-44     	; 0x952 <__stack+0xf3>
 97e:	19 cf       	rjmp	.-462    	; 0x7b2 <main+0x1c>

00000980 <KPD_u8GetKeysState>:

#include "KPD_interface.h"
#include "KPD_private.h"


u8 KPD_u8GetKeysState(u8 *Copy_PAu8KeyStates){
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	28 97       	sbiw	r28, 0x08	; 8
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	98 87       	std	Y+8, r25	; 0x08
 996:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8ErrorState = ERROR_OK;
 998:	1d 82       	std	Y+5, r1	; 0x05
	if (Copy_PAu8KeyStates == NULL) Local_u8ErrorState = ERROR_NOK;
 99a:	8f 81       	ldd	r24, Y+7	; 0x07
 99c:	98 85       	ldd	r25, Y+8	; 0x08
 99e:	00 97       	sbiw	r24, 0x00	; 0
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <KPD_u8GetKeysState+0x26>
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_outerLoopIndex = LOOP_INITAL_VALUE ;
 9a6:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_outerLoopSetter= LOOP_INITAL_VALUE ;
 9a8:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_InnerLoopIndex = LOOP_INITAL_VALUE ;
 9aa:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_pinValue ;
	u8 Local_ArrIndex = ARRAY_INITAL_INDEX;
 9ac:	19 82       	std	Y+1, r1	; 0x01
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){
 9ae:	1c 82       	std	Y+4, r1	; 0x04
 9b0:	53 c0       	rjmp	.+166    	; 0xa58 <KPD_u8GetKeysState+0xd8>


				for(Local_outerLoopSetter = LOOP_INITAL_VALUE; Local_outerLoopSetter < KPD_NUM_OF_OUTPUTS; Local_outerLoopSetter++){
 9b2:	1b 82       	std	Y+3, r1	; 0x03
 9b4:	1c c0       	rjmp	.+56     	; 0x9ee <KPD_u8GetKeysState+0x6e>
					if (Local_outerLoopIndex == Local_outerLoopSetter){
 9b6:	9c 81       	ldd	r25, Y+4	; 0x04
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ba:	98 17       	cp	r25, r24
 9bc:	59 f4       	brne	.+22     	; 0x9d4 <KPD_u8GetKeysState+0x54>
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_LOW);
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	fc 01       	movw	r30, r24
 9c6:	e4 53       	subi	r30, 0x34	; 52
 9c8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ca:	80 81       	ld	r24, Z
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_u8SetPinValue>
 9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <KPD_u8GetKeysState+0x68>
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
 9d4:	8b 81       	ldd	r24, Y+3	; 0x03
 9d6:	88 2f       	mov	r24, r24
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	fc 01       	movw	r30, r24
 9dc:	e4 53       	subi	r30, 0x34	; 52
 9de:	ff 4f       	sbci	r31, 0xFF	; 255
 9e0:	80 81       	ld	r24, Z
 9e2:	61 e0       	ldi	r22, 0x01	; 1
 9e4:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_u8SetPinValue>
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){


				for(Local_outerLoopSetter = LOOP_INITAL_VALUE; Local_outerLoopSetter < KPD_NUM_OF_OUTPUTS; Local_outerLoopSetter++){
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	8f 5f       	subi	r24, 0xFF	; 255
 9ec:	8b 83       	std	Y+3, r24	; 0x03
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	84 30       	cpi	r24, 0x04	; 4
 9f2:	08 f3       	brcs	.-62     	; 0x9b6 <KPD_u8GetKeysState+0x36>
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
					}
				}

				for(Local_InnerLoopIndex = LOOP_INITAL_VALUE; Local_InnerLoopIndex < KPD_NUM_OF_INPUTS; Local_InnerLoopIndex++){
 9f4:	1a 82       	std	Y+2, r1	; 0x02
 9f6:	2a c0       	rjmp	.+84     	; 0xa4c <KPD_u8GetKeysState+0xcc>
					 DIO_u8GetPinValue(KPD_Au8KpdInputConnection[Local_InnerLoopIndex], &Local_pinValue);
 9f8:	8a 81       	ldd	r24, Y+2	; 0x02
 9fa:	88 2f       	mov	r24, r24
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	e8 53       	subi	r30, 0x38	; 56
 a02:	ff 4f       	sbci	r31, 0xFF	; 255
 a04:	80 81       	ld	r24, Z
 a06:	9e 01       	movw	r18, r28
 a08:	2a 5f       	subi	r18, 0xFA	; 250
 a0a:	3f 4f       	sbci	r19, 0xFF	; 255
 a0c:	b9 01       	movw	r22, r18
 a0e:	0e 94 48 02 	call	0x490	; 0x490 <DIO_u8GetPinValue>
					 if(Local_pinValue == DIO_u8_PIN_LOW){
 a12:	8e 81       	ldd	r24, Y+6	; 0x06
 a14:	88 23       	and	r24, r24
 a16:	59 f4       	brne	.+22     	; 0xa2e <KPD_u8GetKeysState+0xae>
						 Copy_PAu8KeyStates[Local_ArrIndex]= KPD_u8_PRESSED;
 a18:	89 81       	ldd	r24, Y+1	; 0x01
 a1a:	28 2f       	mov	r18, r24
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	8f 81       	ldd	r24, Y+7	; 0x07
 a20:	98 85       	ldd	r25, Y+8	; 0x08
 a22:	fc 01       	movw	r30, r24
 a24:	e2 0f       	add	r30, r18
 a26:	f3 1f       	adc	r31, r19
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	80 83       	st	Z, r24
 a2c:	09 c0       	rjmp	.+18     	; 0xa40 <KPD_u8GetKeysState+0xc0>
					 }else{
						 Copy_PAu8KeyStates[Local_ArrIndex]= KPD_u8_RELEASED;
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	28 2f       	mov	r18, r24
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	8f 81       	ldd	r24, Y+7	; 0x07
 a36:	98 85       	ldd	r25, Y+8	; 0x08
 a38:	fc 01       	movw	r30, r24
 a3a:	e2 0f       	add	r30, r18
 a3c:	f3 1f       	adc	r31, r19
 a3e:	10 82       	st	Z, r1
					 }
					 Local_ArrIndex++;
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	8f 5f       	subi	r24, 0xFF	; 255
 a44:	89 83       	std	Y+1, r24	; 0x01
					}else{
						DIO_u8SetPinValue(KPD_Au8KpdOutputConnection[Local_outerLoopSetter],DIO_u8_PIN_HIGH);
					}
				}

				for(Local_InnerLoopIndex = LOOP_INITAL_VALUE; Local_InnerLoopIndex < KPD_NUM_OF_INPUTS; Local_InnerLoopIndex++){
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	8f 5f       	subi	r24, 0xFF	; 255
 a4a:	8a 83       	std	Y+2, r24	; 0x02
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	84 30       	cpi	r24, 0x04	; 4
 a50:	98 f2       	brcs	.-90     	; 0x9f8 <KPD_u8GetKeysState+0x78>
	u8 Local_InnerLoopIndex = LOOP_INITAL_VALUE ;
	u8 Local_pinValue ;
	u8 Local_ArrIndex = ARRAY_INITAL_INDEX;
	switch (KPD_TYPE){
		case KPD_u8_PULL_UP :
			for(Local_outerLoopIndex = LOOP_INITAL_VALUE; Local_outerLoopIndex < KPD_NUM_OF_OUTPUTS ; Local_outerLoopIndex++){
 a52:	8c 81       	ldd	r24, Y+4	; 0x04
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	8c 83       	std	Y+4, r24	; 0x04
 a58:	8c 81       	ldd	r24, Y+4	; 0x04
 a5a:	84 30       	cpi	r24, 0x04	; 4
 a5c:	08 f4       	brcc	.+2      	; 0xa60 <KPD_u8GetKeysState+0xe0>
 a5e:	a9 cf       	rjmp	.-174    	; 0x9b2 <KPD_u8GetKeysState+0x32>





	return Local_u8ErrorState;
 a60:	8d 81       	ldd	r24, Y+5	; 0x05
}
 a62:	28 96       	adiw	r28, 0x08	; 8
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	cf 91       	pop	r28
 a70:	df 91       	pop	r29
 a72:	08 95       	ret

00000a74 <LMD_u8SetPattern>:

#include "LMD_private.h"
#include "DelayMs.h"


u8 LMD_u8SetPattern(u8 *Copy_Pu8LedmPattern,u8 Copy_u8LedmColor){
 a74:	df 93       	push	r29
 a76:	cf 93       	push	r28
 a78:	00 d0       	rcall	.+0      	; 0xa7a <LMD_u8SetPattern+0x6>
 a7a:	00 d0       	rcall	.+0      	; 0xa7c <LMD_u8SetPattern+0x8>
 a7c:	0f 92       	push	r0
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
 a82:	9c 83       	std	Y+4, r25	; 0x04
 a84:	8b 83       	std	Y+3, r24	; 0x03
 a86:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = ERROR_OK;
 a88:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8LoopIndex;
	if(Copy_Pu8LedmPattern==NULL )
 a8a:	8b 81       	ldd	r24, Y+3	; 0x03
 a8c:	9c 81       	ldd	r25, Y+4	; 0x04
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	19 f4       	brne	.+6      	; 0xa98 <LMD_u8SetPattern+0x24>
	{
		Local_u8Error=ERROR_NOK;
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	8a 83       	std	Y+2, r24	; 0x02
 a96:	53 c0       	rjmp	.+166    	; 0xb3e <LMD_u8SetPattern+0xca>
	}
	else
	{
		if(Copy_u8LedmColor==LMD_u8_GREEN_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
 a98:	8d 81       	ldd	r24, Y+5	; 0x05
 a9a:	82 30       	cpi	r24, 0x02	; 2
 a9c:	39 f5       	brne	.+78     	; 0xaec <LMD_u8SetPattern+0x78>
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 a9e:	19 82       	std	Y+1, r1	; 0x01
 aa0:	21 c0       	rjmp	.+66     	; 0xae4 <LMD_u8SetPattern+0x70>
				DIO_u8SetPortnValue(LMD_u8_ACTIVE_PORT,~LMD_u8ActiveLowSide[u8LoopIndex]);// rows on port A HIGH
 aa2:	89 81       	ldd	r24, Y+1	; 0x01
 aa4:	88 2f       	mov	r24, r24
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	fc 01       	movw	r30, r24
 aaa:	e0 53       	subi	r30, 0x30	; 48
 aac:	ff 4f       	sbci	r31, 0xFF	; 255
 aae:	80 81       	ld	r24, Z
 ab0:	98 2f       	mov	r25, r24
 ab2:	90 95       	com	r25
 ab4:	83 e0       	ldi	r24, 0x03	; 3
 ab6:	69 2f       	mov	r22, r25
 ab8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_u8SetPortnValue>
				DIO_u8SetPortnValue(LMD_u8_GREEN_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	28 2f       	mov	r18, r24
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	8b 81       	ldd	r24, Y+3	; 0x03
 ac4:	9c 81       	ldd	r25, Y+4	; 0x04
 ac6:	fc 01       	movw	r30, r24
 ac8:	e2 0f       	add	r30, r18
 aca:	f3 1f       	adc	r31, r19
 acc:	90 81       	ld	r25, Z
 ace:	82 e0       	ldi	r24, 0x02	; 2
 ad0:	69 2f       	mov	r22, r25
 ad2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_u8SetPortnValue>
				DelayMs(1);
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 94 03 	call	0x728	; 0x728 <DelayMs>
		Local_u8Error=ERROR_NOK;
	}
	else
	{
		if(Copy_u8LedmColor==LMD_u8_GREEN_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 ade:	89 81       	ldd	r24, Y+1	; 0x01
 ae0:	8f 5f       	subi	r24, 0xFF	; 255
 ae2:	89 83       	std	Y+1, r24	; 0x01
 ae4:	89 81       	ldd	r24, Y+1	; 0x01
 ae6:	88 30       	cpi	r24, 0x08	; 8
 ae8:	e0 f2       	brcs	.-72     	; 0xaa2 <LMD_u8SetPattern+0x2e>
 aea:	29 c0       	rjmp	.+82     	; 0xb3e <LMD_u8SetPattern+0xca>
				DIO_u8SetPortnValue(LMD_u8_GREEN_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
				DelayMs(1);

			}
		}
		else if(Copy_u8LedmColor==LMD_u8_RED_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
 aec:	8d 81       	ldd	r24, Y+5	; 0x05
 aee:	81 30       	cpi	r24, 0x01	; 1
 af0:	31 f5       	brne	.+76     	; 0xb3e <LMD_u8SetPattern+0xca>
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 af2:	19 82       	std	Y+1, r1	; 0x01
 af4:	21 c0       	rjmp	.+66     	; 0xb38 <LMD_u8SetPattern+0xc4>
				DIO_u8SetPortnValue(LMD_u8_ACTIVE_PORT,~LMD_u8ActiveLowSide[u8LoopIndex]);// rows on port A HIGH
 af6:	89 81       	ldd	r24, Y+1	; 0x01
 af8:	88 2f       	mov	r24, r24
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	fc 01       	movw	r30, r24
 afe:	e0 53       	subi	r30, 0x30	; 48
 b00:	ff 4f       	sbci	r31, 0xFF	; 255
 b02:	80 81       	ld	r24, Z
 b04:	98 2f       	mov	r25, r24
 b06:	90 95       	com	r25
 b08:	83 e0       	ldi	r24, 0x03	; 3
 b0a:	69 2f       	mov	r22, r25
 b0c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_u8SetPortnValue>
				DIO_u8SetPortnValue(LMD_u8_RED_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
 b10:	89 81       	ldd	r24, Y+1	; 0x01
 b12:	28 2f       	mov	r18, r24
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	8b 81       	ldd	r24, Y+3	; 0x03
 b18:	9c 81       	ldd	r25, Y+4	; 0x04
 b1a:	fc 01       	movw	r30, r24
 b1c:	e2 0f       	add	r30, r18
 b1e:	f3 1f       	adc	r31, r19
 b20:	90 81       	ld	r25, Z
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	69 2f       	mov	r22, r25
 b26:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_u8SetPortnValue>
				DelayMs(1);
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 94 03 	call	0x728	; 0x728 <DelayMs>
				DelayMs(1);

			}
		}
		else if(Copy_u8LedmColor==LMD_u8_RED_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 b32:	89 81       	ldd	r24, Y+1	; 0x01
 b34:	8f 5f       	subi	r24, 0xFF	; 255
 b36:	89 83       	std	Y+1, r24	; 0x01
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	88 30       	cpi	r24, 0x08	; 8
 b3c:	e0 f2       	brcs	.-72     	; 0xaf6 <LMD_u8SetPattern+0x82>
				DelayMs(1);

			}
		}
	}
	return Local_u8Error;
 b3e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 b40:	0f 90       	pop	r0
 b42:	0f 90       	pop	r0
 b44:	0f 90       	pop	r0
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	cf 91       	pop	r28
 b4c:	df 91       	pop	r29
 b4e:	08 95       	ret

00000b50 <_exit>:
 b50:	f8 94       	cli

00000b52 <__stop_program>:
 b52:	ff cf       	rjmp	.-2      	; 0xb52 <__stop_program>
