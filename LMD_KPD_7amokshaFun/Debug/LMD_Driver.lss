
LMD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000008c4  00000938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c78  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006af  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  7a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:




void DIO_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
  aa:	eb e3       	ldi	r30, 0x3B	; 59
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
  b0:	e8 e3       	ldi	r30, 0x38	; 56
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
  bc:	e2 e3       	ldi	r30, 0x32	; 50
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	27 97       	sbiw	r28, 0x07	; 7
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	8c 83       	std	Y+4, r24	; 0x04
  e0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
  e2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	80 32       	cpi	r24, 0x20	; 32
  e8:	30 f4       	brcc	.+12     	; 0xf6 <DIO_u8SetPinDirection+0x2c>
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	31 f0       	breq	.+12     	; 0xfc <DIO_u8SetPinDirection+0x32>
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	88 23       	and	r24, r24
  f4:	19 f0       	breq	.+6      	; 0xfc <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8b 83       	std	Y+3, r24	; 0x03
  fa:	ce c0       	rjmp	.+412    	; 0x298 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	87 70       	andi	r24, 0x07	; 7
 100:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	3f 83       	std	Y+7, r19	; 0x07
 114:	2e 83       	std	Y+6, r18	; 0x06
 116:	6e 81       	ldd	r22, Y+6	; 0x06
 118:	7f 81       	ldd	r23, Y+7	; 0x07
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	71 05       	cpc	r23, r1
 11e:	09 f4       	brne	.+2      	; 0x122 <DIO_u8SetPinDirection+0x58>
 120:	41 c0       	rjmp	.+130    	; 0x1a4 <DIO_u8SetPinDirection+0xda>
 122:	8e 81       	ldd	r24, Y+6	; 0x06
 124:	9f 81       	ldd	r25, Y+7	; 0x07
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	34 f4       	brge	.+12     	; 0x138 <DIO_u8SetPinDirection+0x6e>
 12c:	2e 81       	ldd	r18, Y+6	; 0x06
 12e:	3f 81       	ldd	r19, Y+7	; 0x07
 130:	21 15       	cp	r18, r1
 132:	31 05       	cpc	r19, r1
 134:	71 f0       	breq	.+28     	; 0x152 <DIO_u8SetPinDirection+0x88>
 136:	b0 c0       	rjmp	.+352    	; 0x298 <DIO_u8SetPinDirection+0x1ce>
 138:	6e 81       	ldd	r22, Y+6	; 0x06
 13a:	7f 81       	ldd	r23, Y+7	; 0x07
 13c:	62 30       	cpi	r22, 0x02	; 2
 13e:	71 05       	cpc	r23, r1
 140:	09 f4       	brne	.+2      	; 0x144 <DIO_u8SetPinDirection+0x7a>
 142:	59 c0       	rjmp	.+178    	; 0x1f6 <DIO_u8SetPinDirection+0x12c>
 144:	8e 81       	ldd	r24, Y+6	; 0x06
 146:	9f 81       	ldd	r25, Y+7	; 0x07
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	91 05       	cpc	r25, r1
 14c:	09 f4       	brne	.+2      	; 0x150 <DIO_u8SetPinDirection+0x86>
 14e:	7c c0       	rjmp	.+248    	; 0x248 <DIO_u8SetPinDirection+0x17e>
 150:	a3 c0       	rjmp	.+326    	; 0x298 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
 152:	8d 81       	ldd	r24, Y+5	; 0x05
 154:	88 23       	and	r24, r24
 156:	21 f0       	breq	.+8      	; 0x160 <DIO_u8SetPinDirection+0x96>
 158:	8d 81       	ldd	r24, Y+5	; 0x05
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	09 f0       	breq	.+2      	; 0x160 <DIO_u8SetPinDirection+0x96>
 15e:	1d 82       	std	Y+5, r1	; 0x05
 160:	aa e3       	ldi	r26, 0x3A	; 58
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	ea e3       	ldi	r30, 0x3A	; 58
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinDirection+0xb2>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	2a 95       	dec	r18
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinDirection+0xae>
 180:	80 95       	com	r24
 182:	48 23       	and	r20, r24
 184:	8d 81       	ldd	r24, Y+5	; 0x05
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8SetPinDirection+0xce>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8SetPinDirection+0xca>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	7a c0       	rjmp	.+244    	; 0x298 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1a4:	8d 81       	ldd	r24, Y+5	; 0x05
 1a6:	88 23       	and	r24, r24
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <DIO_u8SetPinDirection+0xe8>
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <DIO_u8SetPinDirection+0xe8>
 1b0:	1d 82       	std	Y+5, r1	; 0x05
 1b2:	a7 e3       	ldi	r26, 0x37	; 55
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e7 e3       	ldi	r30, 0x37	; 55
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_u8SetPinDirection+0x104>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_u8SetPinDirection+0x100>
 1d2:	80 95       	com	r24
 1d4:	48 23       	and	r20, r24
 1d6:	8d 81       	ldd	r24, Y+5	; 0x05
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	88 2f       	mov	r24, r24
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_u8SetPinDirection+0x120>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_u8SetPinDirection+0x11c>
 1ee:	cb 01       	movw	r24, r22
 1f0:	84 2b       	or	r24, r20
 1f2:	8c 93       	st	X, r24
 1f4:	51 c0       	rjmp	.+162    	; 0x298 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	88 23       	and	r24, r24
 1fa:	21 f0       	breq	.+8      	; 0x204 <DIO_u8SetPinDirection+0x13a>
 1fc:	8d 81       	ldd	r24, Y+5	; 0x05
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_u8SetPinDirection+0x13a>
 202:	1d 82       	std	Y+5, r1	; 0x05
 204:	a4 e3       	ldi	r26, 0x34	; 52
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e4 e3       	ldi	r30, 0x34	; 52
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinDirection+0x156>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinDirection+0x152>
 224:	80 95       	com	r24
 226:	48 23       	and	r20, r24
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8SetPinDirection+0x172>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8SetPinDirection+0x16e>
 240:	cb 01       	movw	r24, r22
 242:	84 2b       	or	r24, r20
 244:	8c 93       	st	X, r24
 246:	28 c0       	rjmp	.+80     	; 0x298 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
 248:	8d 81       	ldd	r24, Y+5	; 0x05
 24a:	88 23       	and	r24, r24
 24c:	21 f0       	breq	.+8      	; 0x256 <DIO_u8SetPinDirection+0x18c>
 24e:	8d 81       	ldd	r24, Y+5	; 0x05
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	09 f0       	breq	.+2      	; 0x256 <DIO_u8SetPinDirection+0x18c>
 254:	1d 82       	std	Y+5, r1	; 0x05
 256:	a1 e3       	ldi	r26, 0x31	; 49
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e1 e3       	ldi	r30, 0x31	; 49
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinDirection+0x1a8>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	2a 95       	dec	r18
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinDirection+0x1a4>
 276:	80 95       	com	r24
 278:	48 23       	and	r20, r24
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	88 2f       	mov	r24, r24
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8SetPinDirection+0x1c4>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_u8SetPinDirection+0x1c0>
 292:	cb 01       	movw	r24, r22
 294:	84 2b       	or	r24, r20
 296:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
 298:	8b 81       	ldd	r24, Y+3	; 0x03
}
 29a:	27 96       	adiw	r28, 0x07	; 7
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	cf 91       	pop	r28
 2a8:	df 91       	pop	r29
 2aa:	08 95       	ret

000002ac <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	27 97       	sbiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	8c 83       	std	Y+4, r24	; 0x04
 2c2:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
	/*	OUTPUT:                                              */
	/*			return ERROR STATE                           */
	/*********************************************************/
   u8 Local_u8Error=ERROR_OK;
 2c4:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	30 f4       	brcc	.+12     	; 0x2d8 <DIO_u8SetPinValue+0x2c>
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	31 f0       	breq	.+12     	; 0x2de <DIO_u8SetPinValue+0x32>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	88 23       	and	r24, r24
 2d6:	19 f0       	breq	.+6      	; 0x2de <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	8b 83       	std	Y+3, r24	; 0x03
 2dc:	ce c0       	rjmp	.+412    	; 0x47a <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	87 70       	andi	r24, 0x07	; 7
 2e2:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	86 95       	lsr	r24
 2e8:	86 95       	lsr	r24
 2ea:	86 95       	lsr	r24
 2ec:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	3f 83       	std	Y+7, r19	; 0x07
 2f6:	2e 83       	std	Y+6, r18	; 0x06
 2f8:	6e 81       	ldd	r22, Y+6	; 0x06
 2fa:	7f 81       	ldd	r23, Y+7	; 0x07
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	71 05       	cpc	r23, r1
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_u8SetPinValue+0x58>
 302:	41 c0       	rjmp	.+130    	; 0x386 <DIO_u8SetPinValue+0xda>
 304:	8e 81       	ldd	r24, Y+6	; 0x06
 306:	9f 81       	ldd	r25, Y+7	; 0x07
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	91 05       	cpc	r25, r1
 30c:	34 f4       	brge	.+12     	; 0x31a <DIO_u8SetPinValue+0x6e>
 30e:	2e 81       	ldd	r18, Y+6	; 0x06
 310:	3f 81       	ldd	r19, Y+7	; 0x07
 312:	21 15       	cp	r18, r1
 314:	31 05       	cpc	r19, r1
 316:	71 f0       	breq	.+28     	; 0x334 <DIO_u8SetPinValue+0x88>
 318:	b0 c0       	rjmp	.+352    	; 0x47a <DIO_u8SetPinValue+0x1ce>
 31a:	6e 81       	ldd	r22, Y+6	; 0x06
 31c:	7f 81       	ldd	r23, Y+7	; 0x07
 31e:	62 30       	cpi	r22, 0x02	; 2
 320:	71 05       	cpc	r23, r1
 322:	09 f4       	brne	.+2      	; 0x326 <DIO_u8SetPinValue+0x7a>
 324:	59 c0       	rjmp	.+178    	; 0x3d8 <DIO_u8SetPinValue+0x12c>
 326:	8e 81       	ldd	r24, Y+6	; 0x06
 328:	9f 81       	ldd	r25, Y+7	; 0x07
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	91 05       	cpc	r25, r1
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_u8SetPinValue+0x86>
 330:	7c c0       	rjmp	.+248    	; 0x42a <DIO_u8SetPinValue+0x17e>
 332:	a3 c0       	rjmp	.+326    	; 0x47a <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	88 23       	and	r24, r24
 338:	21 f0       	breq	.+8      	; 0x342 <DIO_u8SetPinValue+0x96>
 33a:	8d 81       	ldd	r24, Y+5	; 0x05
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	09 f0       	breq	.+2      	; 0x342 <DIO_u8SetPinValue+0x96>
 340:	1d 82       	std	Y+5, r1	; 0x05
 342:	ab e3       	ldi	r26, 0x3B	; 59
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	eb e3       	ldi	r30, 0x3B	; 59
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinValue+0xb2>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8SetPinValue+0xae>
 362:	80 95       	com	r24
 364:	48 23       	and	r20, r24
 366:	8d 81       	ldd	r24, Y+5	; 0x05
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	88 2f       	mov	r24, r24
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_u8SetPinValue+0xce>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_u8SetPinValue+0xca>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	7a c0       	rjmp	.+244    	; 0x47a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 386:	8d 81       	ldd	r24, Y+5	; 0x05
 388:	88 23       	and	r24, r24
 38a:	21 f0       	breq	.+8      	; 0x394 <DIO_u8SetPinValue+0xe8>
 38c:	8d 81       	ldd	r24, Y+5	; 0x05
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	09 f0       	breq	.+2      	; 0x394 <DIO_u8SetPinValue+0xe8>
 392:	1d 82       	std	Y+5, r1	; 0x05
 394:	a8 e3       	ldi	r26, 0x38	; 56
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	e8 e3       	ldi	r30, 0x38	; 56
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	48 2f       	mov	r20, r24
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_u8SetPinValue+0x104>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	2a 95       	dec	r18
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_u8SetPinValue+0x100>
 3b4:	80 95       	com	r24
 3b6:	48 23       	and	r20, r24
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8SetPinValue+0x120>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8SetPinValue+0x11c>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	8c 93       	st	X, r24
 3d6:	51 c0       	rjmp	.+162    	; 0x47a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 3d8:	8d 81       	ldd	r24, Y+5	; 0x05
 3da:	88 23       	and	r24, r24
 3dc:	21 f0       	breq	.+8      	; 0x3e6 <DIO_u8SetPinValue+0x13a>
 3de:	8d 81       	ldd	r24, Y+5	; 0x05
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <DIO_u8SetPinValue+0x13a>
 3e4:	1d 82       	std	Y+5, r1	; 0x05
 3e6:	a5 e3       	ldi	r26, 0x35	; 53
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e5 e3       	ldi	r30, 0x35	; 53
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_u8SetPinValue+0x156>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	2a 95       	dec	r18
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_u8SetPinValue+0x152>
 406:	80 95       	com	r24
 408:	48 23       	and	r20, r24
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 2f       	mov	r24, r24
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	b9 01       	movw	r22, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_u8SetPinValue+0x172>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_u8SetPinValue+0x16e>
 422:	cb 01       	movw	r24, r22
 424:	84 2b       	or	r24, r20
 426:	8c 93       	st	X, r24
 428:	28 c0       	rjmp	.+80     	; 0x47a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 42a:	8d 81       	ldd	r24, Y+5	; 0x05
 42c:	88 23       	and	r24, r24
 42e:	21 f0       	breq	.+8      	; 0x438 <DIO_u8SetPinValue+0x18c>
 430:	8d 81       	ldd	r24, Y+5	; 0x05
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	09 f0       	breq	.+2      	; 0x438 <DIO_u8SetPinValue+0x18c>
 436:	1d 82       	std	Y+5, r1	; 0x05
 438:	a2 e3       	ldi	r26, 0x32	; 50
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e3       	ldi	r30, 0x32	; 50
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_u8SetPinValue+0x1a8>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	2a 95       	dec	r18
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_u8SetPinValue+0x1a4>
 458:	80 95       	com	r24
 45a:	48 23       	and	r20, r24
 45c:	8d 81       	ldd	r24, Y+5	; 0x05
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	88 2f       	mov	r24, r24
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_u8SetPinValue+0x1c4>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_u8SetPinValue+0x1c0>
 474:	cb 01       	movw	r24, r22
 476:	84 2b       	or	r24, r20
 478:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 47c:	27 96       	adiw	r28, 0x07	; 7
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	08 95       	ret

0000048e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
 48e:	df 93       	push	r29
 490:	cf 93       	push	r28
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	28 97       	sbiw	r28, 0x08	; 8
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	8c 83       	std	Y+4, r24	; 0x04
 4a4:	7e 83       	std	Y+6, r23	; 0x06
 4a6:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 4a8:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
 4aa:	8c 81       	ldd	r24, Y+4	; 0x04
 4ac:	80 32       	cpi	r24, 0x20	; 32
 4ae:	20 f4       	brcc	.+8      	; 0x4b8 <DIO_u8GetPinValue+0x2a>
 4b0:	8d 81       	ldd	r24, Y+5	; 0x05
 4b2:	9e 81       	ldd	r25, Y+6	; 0x06
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	19 f4       	brne	.+6      	; 0x4be <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	8b 83       	std	Y+3, r24	; 0x03
 4bc:	78 c0       	rjmp	.+240    	; 0x5ae <DIO_u8GetPinValue+0x120>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 4be:	8c 81       	ldd	r24, Y+4	; 0x04
 4c0:	87 70       	andi	r24, 0x07	; 7
 4c2:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	86 95       	lsr	r24
 4c8:	86 95       	lsr	r24
 4ca:	86 95       	lsr	r24
 4cc:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	38 87       	std	Y+8, r19	; 0x08
 4d6:	2f 83       	std	Y+7, r18	; 0x07
 4d8:	4f 81       	ldd	r20, Y+7	; 0x07
 4da:	58 85       	ldd	r21, Y+8	; 0x08
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	51 05       	cpc	r21, r1
 4e0:	59 f1       	breq	.+86     	; 0x538 <DIO_u8GetPinValue+0xaa>
 4e2:	8f 81       	ldd	r24, Y+7	; 0x07
 4e4:	98 85       	ldd	r25, Y+8	; 0x08
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	91 05       	cpc	r25, r1
 4ea:	34 f4       	brge	.+12     	; 0x4f8 <DIO_u8GetPinValue+0x6a>
 4ec:	2f 81       	ldd	r18, Y+7	; 0x07
 4ee:	38 85       	ldd	r19, Y+8	; 0x08
 4f0:	21 15       	cp	r18, r1
 4f2:	31 05       	cpc	r19, r1
 4f4:	69 f0       	breq	.+26     	; 0x510 <DIO_u8GetPinValue+0x82>
 4f6:	5b c0       	rjmp	.+182    	; 0x5ae <DIO_u8GetPinValue+0x120>
 4f8:	4f 81       	ldd	r20, Y+7	; 0x07
 4fa:	58 85       	ldd	r21, Y+8	; 0x08
 4fc:	42 30       	cpi	r20, 0x02	; 2
 4fe:	51 05       	cpc	r21, r1
 500:	79 f1       	breq	.+94     	; 0x560 <DIO_u8GetPinValue+0xd2>
 502:	8f 81       	ldd	r24, Y+7	; 0x07
 504:	98 85       	ldd	r25, Y+8	; 0x08
 506:	83 30       	cpi	r24, 0x03	; 3
 508:	91 05       	cpc	r25, r1
 50a:	09 f4       	brne	.+2      	; 0x50e <DIO_u8GetPinValue+0x80>
 50c:	3d c0       	rjmp	.+122    	; 0x588 <DIO_u8GetPinValue+0xfa>
 50e:	4f c0       	rjmp	.+158    	; 0x5ae <DIO_u8GetPinValue+0x120>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
 510:	e9 e3       	ldi	r30, 0x39	; 57
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	a9 01       	movw	r20, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_u8GetPinValue+0x9a>
 524:	55 95       	asr	r21
 526:	47 95       	ror	r20
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_u8GetPinValue+0x96>
 52c:	ca 01       	movw	r24, r20
 52e:	81 70       	andi	r24, 0x01	; 1
 530:	ed 81       	ldd	r30, Y+5	; 0x05
 532:	fe 81       	ldd	r31, Y+6	; 0x06
 534:	80 83       	st	Z, r24
 536:	3b c0       	rjmp	.+118    	; 0x5ae <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
 538:	e6 e3       	ldi	r30, 0x36	; 54
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	a9 01       	movw	r20, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_u8GetPinValue+0xc2>
 54c:	55 95       	asr	r21
 54e:	47 95       	ror	r20
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_u8GetPinValue+0xbe>
 554:	ca 01       	movw	r24, r20
 556:	81 70       	andi	r24, 0x01	; 1
 558:	ed 81       	ldd	r30, Y+5	; 0x05
 55a:	fe 81       	ldd	r31, Y+6	; 0x06
 55c:	80 83       	st	Z, r24
 55e:	27 c0       	rjmp	.+78     	; 0x5ae <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
 560:	e3 e3       	ldi	r30, 0x33	; 51
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	a9 01       	movw	r20, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8GetPinValue+0xea>
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8GetPinValue+0xe6>
 57c:	ca 01       	movw	r24, r20
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	ed 81       	ldd	r30, Y+5	; 0x05
 582:	fe 81       	ldd	r31, Y+6	; 0x06
 584:	80 83       	st	Z, r24
 586:	13 c0       	rjmp	.+38     	; 0x5ae <DIO_u8GetPinValue+0x120>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
 588:	e0 e3       	ldi	r30, 0x30	; 48
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	88 2f       	mov	r24, r24
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	a9 01       	movw	r20, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8GetPinValue+0x112>
 59c:	55 95       	asr	r21
 59e:	47 95       	ror	r20
 5a0:	8a 95       	dec	r24
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8GetPinValue+0x10e>
 5a4:	ca 01       	movw	r24, r20
 5a6:	81 70       	andi	r24, 0x01	; 1
 5a8:	ed 81       	ldd	r30, Y+5	; 0x05
 5aa:	fe 81       	ldd	r31, Y+6	; 0x06
 5ac:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5b0:	28 96       	adiw	r28, 0x08	; 8
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	08 95       	ret

000005c2 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <DIO_u8SetPortDirection+0x6>
 5c8:	0f 92       	push	r0
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	8a 83       	std	Y+2, r24	; 0x02
 5d0:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5d2:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	08 95       	ret

000005e6 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	00 d0       	rcall	.+0      	; 0x5ec <DIO_u8SetPortnValue+0x6>
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <DIO_u8SetPortnValue+0x8>
 5ee:	0f 92       	push	r0
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	8a 83       	std	Y+2, r24	; 0x02
 5f6:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5f8:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	18 f0       	brcs	.+6      	; 0x606 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	32 c0       	rjmp	.+100    	; 0x66a <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	3d 83       	std	Y+5, r19	; 0x05
 60e:	2c 83       	std	Y+4, r18	; 0x04
 610:	8c 81       	ldd	r24, Y+4	; 0x04
 612:	9d 81       	ldd	r25, Y+5	; 0x05
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	91 05       	cpc	r25, r1
 618:	d1 f0       	breq	.+52     	; 0x64e <DIO_u8SetPortnValue+0x68>
 61a:	2c 81       	ldd	r18, Y+4	; 0x04
 61c:	3d 81       	ldd	r19, Y+5	; 0x05
 61e:	22 30       	cpi	r18, 0x02	; 2
 620:	31 05       	cpc	r19, r1
 622:	2c f4       	brge	.+10     	; 0x62e <DIO_u8SetPortnValue+0x48>
 624:	8c 81       	ldd	r24, Y+4	; 0x04
 626:	9d 81       	ldd	r25, Y+5	; 0x05
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	61 f0       	breq	.+24     	; 0x644 <DIO_u8SetPortnValue+0x5e>
 62c:	1e c0       	rjmp	.+60     	; 0x66a <DIO_u8SetPortnValue+0x84>
 62e:	2c 81       	ldd	r18, Y+4	; 0x04
 630:	3d 81       	ldd	r19, Y+5	; 0x05
 632:	22 30       	cpi	r18, 0x02	; 2
 634:	31 05       	cpc	r19, r1
 636:	81 f0       	breq	.+32     	; 0x658 <DIO_u8SetPortnValue+0x72>
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	9d 81       	ldd	r25, Y+5	; 0x05
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	91 05       	cpc	r25, r1
 640:	81 f0       	breq	.+32     	; 0x662 <DIO_u8SetPortnValue+0x7c>
 642:	13 c0       	rjmp	.+38     	; 0x66a <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
 644:	eb e3       	ldi	r30, 0x3B	; 59
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	80 83       	st	Z, r24
 64c:	0e c0       	rjmp	.+28     	; 0x66a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
 64e:	e8 e3       	ldi	r30, 0x38	; 56
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	80 83       	st	Z, r24
 656:	09 c0       	rjmp	.+18     	; 0x66a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
 658:	e5 e3       	ldi	r30, 0x35	; 53
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	80 83       	st	Z, r24
 660:	04 c0       	rjmp	.+8      	; 0x66a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
 662:	e2 e3       	ldi	r30, 0x32	; 50
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 66a:	89 81       	ldd	r24, Y+1	; 0x01
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	00 d0       	rcall	.+0      	; 0x682 <DIO_u8GetPortnValue+0x6>
 682:	00 d0       	rcall	.+0      	; 0x684 <DIO_u8GetPortnValue+0x8>
 684:	00 d0       	rcall	.+0      	; 0x686 <DIO_u8GetPortnValue+0xa>
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	8a 83       	std	Y+2, r24	; 0x02
 68c:	7c 83       	std	Y+4, r23	; 0x04
 68e:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 690:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	84 30       	cpi	r24, 0x04	; 4
 696:	18 f0       	brcs	.+6      	; 0x69e <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	89 83       	std	Y+1, r24	; 0x01
 69c:	3a c0       	rjmp	.+116    	; 0x712 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	3e 83       	std	Y+6, r19	; 0x06
 6a6:	2d 83       	std	Y+5, r18	; 0x05
 6a8:	8d 81       	ldd	r24, Y+5	; 0x05
 6aa:	9e 81       	ldd	r25, Y+6	; 0x06
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	91 05       	cpc	r25, r1
 6b0:	e1 f0       	breq	.+56     	; 0x6ea <DIO_u8GetPortnValue+0x6e>
 6b2:	2d 81       	ldd	r18, Y+5	; 0x05
 6b4:	3e 81       	ldd	r19, Y+6	; 0x06
 6b6:	22 30       	cpi	r18, 0x02	; 2
 6b8:	31 05       	cpc	r19, r1
 6ba:	2c f4       	brge	.+10     	; 0x6c6 <DIO_u8GetPortnValue+0x4a>
 6bc:	8d 81       	ldd	r24, Y+5	; 0x05
 6be:	9e 81       	ldd	r25, Y+6	; 0x06
 6c0:	00 97       	sbiw	r24, 0x00	; 0
 6c2:	61 f0       	breq	.+24     	; 0x6dc <DIO_u8GetPortnValue+0x60>
 6c4:	26 c0       	rjmp	.+76     	; 0x712 <DIO_u8GetPortnValue+0x96>
 6c6:	2d 81       	ldd	r18, Y+5	; 0x05
 6c8:	3e 81       	ldd	r19, Y+6	; 0x06
 6ca:	22 30       	cpi	r18, 0x02	; 2
 6cc:	31 05       	cpc	r19, r1
 6ce:	a1 f0       	breq	.+40     	; 0x6f8 <DIO_u8GetPortnValue+0x7c>
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	9e 81       	ldd	r25, Y+6	; 0x06
 6d4:	83 30       	cpi	r24, 0x03	; 3
 6d6:	91 05       	cpc	r25, r1
 6d8:	b1 f0       	breq	.+44     	; 0x706 <DIO_u8GetPortnValue+0x8a>
 6da:	1b c0       	rjmp	.+54     	; 0x712 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
 6dc:	e9 e3       	ldi	r30, 0x39	; 57
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	eb 81       	ldd	r30, Y+3	; 0x03
 6e4:	fc 81       	ldd	r31, Y+4	; 0x04
 6e6:	80 83       	st	Z, r24
 6e8:	14 c0       	rjmp	.+40     	; 0x712 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
 6ea:	e6 e3       	ldi	r30, 0x36	; 54
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	eb 81       	ldd	r30, Y+3	; 0x03
 6f2:	fc 81       	ldd	r31, Y+4	; 0x04
 6f4:	80 83       	st	Z, r24
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
 6f8:	e3 e3       	ldi	r30, 0x33	; 51
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	eb 81       	ldd	r30, Y+3	; 0x03
 700:	fc 81       	ldd	r31, Y+4	; 0x04
 702:	80 83       	st	Z, r24
 704:	06 c0       	rjmp	.+12     	; 0x712 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
 706:	e0 e3       	ldi	r30, 0x30	; 48
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	eb 81       	ldd	r30, Y+3	; 0x03
 70e:	fc 81       	ldd	r31, Y+4	; 0x04
 710:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 712:	89 81       	ldd	r24, Y+1	; 0x01
}
 714:	26 96       	adiw	r28, 0x06	; 6
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <DelayMs>:
 *      Author: Monika Ossama
 */
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	00 d0       	rcall	.+0      	; 0x72c <DelayMs+0x6>
 72c:	00 d0       	rcall	.+0      	; 0x72e <DelayMs+0x8>
 72e:	00 d0       	rcall	.+0      	; 0x730 <DelayMs+0xa>
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	9e 83       	std	Y+6, r25	; 0x06
 736:	8d 83       	std	Y+5, r24	; 0x05
	u16 i,j ;
	for(j=0;j<u16Time;j++){
 738:	1a 82       	std	Y+2, r1	; 0x02
 73a:	19 82       	std	Y+1, r1	; 0x01
 73c:	1b c0       	rjmp	.+54     	; 0x774 <DelayMs+0x4e>
		for(i=0;i<295;i++){
 73e:	1c 82       	std	Y+4, r1	; 0x04
 740:	1b 82       	std	Y+3, r1	; 0x03
 742:	0d c0       	rjmp	.+26     	; 0x75e <DelayMs+0x38>
	...
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	9c 81       	ldd	r25, Y+4	; 0x04
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	9c 83       	std	Y+4, r25	; 0x04
 75c:	8b 83       	std	Y+3, r24	; 0x03
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	9c 81       	ldd	r25, Y+4	; 0x04
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	87 32       	cpi	r24, 0x27	; 39
 766:	92 07       	cpc	r25, r18
 768:	68 f3       	brcs	.-38     	; 0x744 <DelayMs+0x1e>
#include"STD_TYPES.h".h"

void DelayMs (u16 u16Time)
{
	u16 i,j ;
	for(j=0;j<u16Time;j++){
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	9a 81       	ldd	r25, Y+2	; 0x02
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	9a 83       	std	Y+2, r25	; 0x02
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	29 81       	ldd	r18, Y+1	; 0x01
 776:	3a 81       	ldd	r19, Y+2	; 0x02
 778:	8d 81       	ldd	r24, Y+5	; 0x05
 77a:	9e 81       	ldd	r25, Y+6	; 0x06
 77c:	28 17       	cp	r18, r24
 77e:	39 07       	cpc	r19, r25
 780:	f0 f2       	brcs	.-68     	; 0x73e <DelayMs+0x18>
			asm("NOP");
			asm("NOP");
		}
	}

}
 782:	26 96       	adiw	r28, 0x06	; 6
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	cf 91       	pop	r28
 790:	df 91       	pop	r29
 792:	08 95       	ret

00000794 <main>:
		//247, 246, 21, 67, 21, 246, 247, 255
		//247, 246, 21, 67, 21, 246, 247, 255
		227, 235, 227, 247, 128, 247, 235, 221
};

int main(void){
 794:	df 93       	push	r29
 796:	cf 93       	push	r28
 798:	00 d0       	rcall	.+0      	; 0x79a <main+0x6>
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
	//u8 u8LoopIndex;
	DIO_voidInit();
 79e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	u8 u8LoopDelay;
	u8 u8LoopNumberOFPics;
	while(1)
	{
		for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 7a2:	19 82       	std	Y+1, r1	; 0x01
 7a4:	1b c0       	rjmp	.+54     	; 0x7dc <main+0x48>
			for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 7a6:	1a 82       	std	Y+2, r1	; 0x02
 7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <main+0x3c>
				LMD_u8SetPattern(/*test*/u8Pics[u8LoopNumberOFPics],LMD_u8_RED_COLOR);
 7aa:	20 e6       	ldi	r18, 0x60	; 96
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	88 2f       	mov	r24, r24
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	82 0f       	add	r24, r18
 7c2:	93 1f       	adc	r25, r19
 7c4:	61 e0       	ldi	r22, 0x01	; 1
 7c6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LMD_u8SetPattern>
	u8 u8LoopDelay;
	u8 u8LoopNumberOFPics;
	while(1)
	{
		for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
			for(u8LoopDelay=0;u8LoopDelay<18;u8LoopDelay++){
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	8f 5f       	subi	r24, 0xFF	; 255
 7ce:	8a 83       	std	Y+2, r24	; 0x02
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	82 31       	cpi	r24, 0x12	; 18
 7d4:	50 f3       	brcs	.-44     	; 0x7aa <main+0x16>
	DIO_voidInit();
	u8 u8LoopDelay;
	u8 u8LoopNumberOFPics;
	while(1)
	{
		for(u8LoopNumberOFPics=0;u8LoopNumberOFPics<NumberOFPics;u8LoopNumberOFPics++){
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	8f 5f       	subi	r24, 0xFF	; 255
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	89 30       	cpi	r24, 0x09	; 9
 7e0:	10 f3       	brcs	.-60     	; 0x7a6 <main+0x12>
 7e2:	df cf       	rjmp	.-66     	; 0x7a2 <main+0xe>

000007e4 <LMD_u8SetPattern>:

#include "LMD_private.h"
#include "DelayMs.h"


u8 LMD_u8SetPattern(u8 *Copy_Pu8LedmPattern,u8 Copy_u8LedmColor){
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <LMD_u8SetPattern+0x6>
 7ea:	00 d0       	rcall	.+0      	; 0x7ec <LMD_u8SetPattern+0x8>
 7ec:	0f 92       	push	r0
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	9c 83       	std	Y+4, r25	; 0x04
 7f4:	8b 83       	std	Y+3, r24	; 0x03
 7f6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error = ERROR_OK;
 7f8:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8LoopIndex;
	if(Copy_Pu8LedmPattern==NULL )
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	9c 81       	ldd	r25, Y+4	; 0x04
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	19 f4       	brne	.+6      	; 0x808 <LMD_u8SetPattern+0x24>
	{
		Local_u8Error=ERROR_NOK;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	8a 83       	std	Y+2, r24	; 0x02
 806:	53 c0       	rjmp	.+166    	; 0x8ae <__stack+0x4f>
	}
	else
	{
		if(Copy_u8LedmColor==LMD_u8_GREEN_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
 808:	8d 81       	ldd	r24, Y+5	; 0x05
 80a:	82 30       	cpi	r24, 0x02	; 2
 80c:	39 f5       	brne	.+78     	; 0x85c <LMD_u8SetPattern+0x78>
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 80e:	19 82       	std	Y+1, r1	; 0x01
 810:	21 c0       	rjmp	.+66     	; 0x854 <LMD_u8SetPattern+0x70>
				DIO_u8SetPortnValue(LMD_u8_ACTIVE_PORT,~LMD_u8ActiveLowSide[u8LoopIndex]);// rows on port A HIGH
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	88 2f       	mov	r24, r24
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	fc 01       	movw	r30, r24
 81a:	e0 55       	subi	r30, 0x50	; 80
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	80 81       	ld	r24, Z
 820:	98 2f       	mov	r25, r24
 822:	90 95       	com	r25
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	69 2f       	mov	r22, r25
 828:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_u8SetPortnValue>
				DIO_u8SetPortnValue(LMD_u8_GREEN_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	28 2f       	mov	r18, r24
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	8b 81       	ldd	r24, Y+3	; 0x03
 834:	9c 81       	ldd	r25, Y+4	; 0x04
 836:	fc 01       	movw	r30, r24
 838:	e2 0f       	add	r30, r18
 83a:	f3 1f       	adc	r31, r19
 83c:	90 81       	ld	r25, Z
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	69 2f       	mov	r22, r25
 842:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_u8SetPortnValue>
				DelayMs(1);
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 93 03 	call	0x726	; 0x726 <DelayMs>
		Local_u8Error=ERROR_NOK;
	}
	else
	{
		if(Copy_u8LedmColor==LMD_u8_GREEN_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	8f 5f       	subi	r24, 0xFF	; 255
 852:	89 83       	std	Y+1, r24	; 0x01
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	88 30       	cpi	r24, 0x08	; 8
 858:	e0 f2       	brcs	.-72     	; 0x812 <LMD_u8SetPattern+0x2e>
 85a:	29 c0       	rjmp	.+82     	; 0x8ae <__stack+0x4f>
				DIO_u8SetPortnValue(LMD_u8_GREEN_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
				DelayMs(1);

			}
		}
		else if(Copy_u8LedmColor==LMD_u8_RED_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
 85c:	8d 81       	ldd	r24, Y+5	; 0x05
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	31 f5       	brne	.+76     	; 0x8ae <__stack+0x4f>
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 862:	19 82       	std	Y+1, r1	; 0x01
 864:	21 c0       	rjmp	.+66     	; 0x8a8 <__stack+0x49>
				DIO_u8SetPortnValue(LMD_u8_ACTIVE_PORT,~LMD_u8ActiveLowSide[u8LoopIndex]);// rows on port A HIGH
 866:	89 81       	ldd	r24, Y+1	; 0x01
 868:	88 2f       	mov	r24, r24
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	fc 01       	movw	r30, r24
 86e:	e0 55       	subi	r30, 0x50	; 80
 870:	ff 4f       	sbci	r31, 0xFF	; 255
 872:	80 81       	ld	r24, Z
 874:	98 2f       	mov	r25, r24
 876:	90 95       	com	r25
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	69 2f       	mov	r22, r25
 87c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_u8SetPortnValue>
				DIO_u8SetPortnValue(LMD_u8_RED_COLOR_PORT,Copy_Pu8LedmPattern[u8LoopIndex]); //Cols Green on port D LOW
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	9c 81       	ldd	r25, Y+4	; 0x04
 88a:	fc 01       	movw	r30, r24
 88c:	e2 0f       	add	r30, r18
 88e:	f3 1f       	adc	r31, r19
 890:	90 81       	ld	r25, Z
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	69 2f       	mov	r22, r25
 896:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_u8SetPortnValue>
				DelayMs(1);
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 93 03 	call	0x726	; 0x726 <DelayMs>
				DelayMs(1);

			}
		}
		else if(Copy_u8LedmColor==LMD_u8_RED_COLOR && LMD_u8_TYPE == LMD_u8_ACTIVE_HIGH){
			for(u8LoopIndex=0;u8LoopIndex<LMD_SIZE_OF_LMD;u8LoopIndex++){
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	8f 5f       	subi	r24, 0xFF	; 255
 8a6:	89 83       	std	Y+1, r24	; 0x01
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	88 30       	cpi	r24, 0x08	; 8
 8ac:	e0 f2       	brcs	.-72     	; 0x866 <__stack+0x7>
				DelayMs(1);

			}
		}
	}
	return Local_u8Error;
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
 8b0:	0f 90       	pop	r0
 8b2:	0f 90       	pop	r0
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	cf 91       	pop	r28
 8bc:	df 91       	pop	r29
 8be:	08 95       	ret

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
