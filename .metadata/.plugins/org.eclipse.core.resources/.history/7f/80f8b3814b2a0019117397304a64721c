#include "STD_TYPES.h"
#include "BIT_CALC.h"

#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    DIO_u8_DDRA=CONC_8bit (DIO_INIT_DIR_PIN0,
                           DIO_INIT_DIR_PIN1,
                           DIO_INIT_DIR_PIN2,
                           DIO_INIT_DIR_PIN3,
                           DIO_INIT_DIR_PIN4,
                           DIO_INIT_DIR_PIN5,
                           DIO_INIT_DIR_PIN6,
                           DIO_INIT_DIR_PIN7
    );

    DIO_u8_DDRB=CONC_8bit(DIO_INIT_DIR_PIN8,
                          DIO_INIT_DIR_PIN9,
                          DIO_INIT_DIR_PIN10,
                          DIO_INIT_DIR_PIN11,
                          DIO_INIT_DIR_PIN12,
                          DIO_INIT_DIR_PIN13,
                          DIO_INIT_DIR_PIN14,
                          DIO_INIT_DIR_PIN15
    );
    
     DIO_u8_DDRC=CONC_8bit(DIO_INIT_DIR_PIN16,
                           DIO_INIT_DIR_PIN17,
                           DIO_INIT_DIR_PIN18,
                           DIO_INIT_DIR_PIN19,
                           DIO_INIT_DIR_PIN20,
                           DIO_INIT_DIR_PIN21,
                           DIO_INIT_DIR_PIN22,
                           DIO_INIT_DIR_PIN23
    );
    
     DIO_u8_DDRD=CONC_8bit(DIO_INIT_DIR_PIN24,
                           DIO_INIT_DIR_PIN25,
                           DIO_INIT_DIR_PIN26,
                           DIO_INIT_DIR_PIN27,
                           DIO_INIT_DIR_PIN28,
                           DIO_INIT_DIR_PIN29,
                           DIO_INIT_DIR_PIN30,
                           DIO_INIT_DIR_PIN31
    );
    
  return;
}



//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb,  Copy_u8 u8Direction){
    u8 Local_u8Error=ERROR_OK;
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
      Local_u8Error = ERROR_NOK;
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
      switch (Local_u8PortId){
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
        break;
      }

    }
    return Local_u8Error;
}
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
   u8 Local_u8Error=ERROR_OK;
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
    Local_u8Error = ERROR_NOK;
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
    switch (Local_u8PortId){
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
      break;
    }

  }
  return Local_u8Error;
}
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
  u8 Local_u8Error=ERROR_OK;
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
      Local_u8Error = ERROR_NOK;
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
      switch (Local_u8PortId){
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
        break;
      }

    }
    return Local_u8Error;
}

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
  u8 Local_u8Error=ERROR_OK;
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
  }else{
    switch (Copy_u8PortNb){
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_DIRECTION(PORTA->ByteAccess,Copy_u8Direction);
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_DIRECTION(PORTB->ByteAccess,Copy_u8Direction);
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_DIRECTION(PORTC->ByteAccess,Copy_u8Direction);
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
}
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
  u8 Local_u8Error=ERROR_OK;

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
    Local_u8Error = ERROR_NOK;
  }else{
    switch (Copy_u8PortNb){
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
      break;
    }

  }
  return Local_u8Error;
}
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
  u8 Local_u8Error=ERROR_OK;
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
    Local_u8Error = ERROR_NOK;
  }else{
    switch (Copy_u8PinNb){
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
      break;
    }

  }
  return Local_u8Error;
}