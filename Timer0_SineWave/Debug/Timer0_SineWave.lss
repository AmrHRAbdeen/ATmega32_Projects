
Timer0_SineWave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000a40  2**0
                  ALLOC
  2 .stab         00000d08  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000aa0  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1b 04 	call	0x836	; 0x836 <main>
  74:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:




void DIO_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	#endif

	/*																									  */
	/*																									  */
	/******************************************************************************************************/
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
  9c:	e1 e3       	ldi	r30, 0x31	; 49
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8b ef       	ldi	r24, 0xFB	; 251
  a2:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
  aa:	e8 e3       	ldi	r30, 0x38	; 56
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8c ef       	ldi	r24, 0xFC	; 252
  b0:	80 83       	st	Z, r24
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 83       	st	Z, r24
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
  ba:	e2 e3       	ldi	r30, 0x32	; 50
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	8c 83       	std	Y+4, r24	; 0x04
  de:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
  e0:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	80 32       	cpi	r24, 0x20	; 32
  e6:	30 f4       	brcc	.+12     	; 0xf4 <DIO_u8SetPinDirection+0x2c>
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <DIO_u8SetPinDirection+0x32>
  ee:	8d 81       	ldd	r24, Y+5	; 0x05
  f0:	88 23       	and	r24, r24
  f2:	19 f0       	breq	.+6      	; 0xfa <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	8b 83       	std	Y+3, r24	; 0x03
  f8:	ce c0       	rjmp	.+412    	; 0x296 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	87 70       	andi	r24, 0x07	; 7
  fe:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	86 95       	lsr	r24
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	3f 83       	std	Y+7, r19	; 0x07
 112:	2e 83       	std	Y+6, r18	; 0x06
 114:	6e 81       	ldd	r22, Y+6	; 0x06
 116:	7f 81       	ldd	r23, Y+7	; 0x07
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	71 05       	cpc	r23, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_u8SetPinDirection+0x58>
 11e:	41 c0       	rjmp	.+130    	; 0x1a2 <DIO_u8SetPinDirection+0xda>
 120:	8e 81       	ldd	r24, Y+6	; 0x06
 122:	9f 81       	ldd	r25, Y+7	; 0x07
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	91 05       	cpc	r25, r1
 128:	34 f4       	brge	.+12     	; 0x136 <DIO_u8SetPinDirection+0x6e>
 12a:	2e 81       	ldd	r18, Y+6	; 0x06
 12c:	3f 81       	ldd	r19, Y+7	; 0x07
 12e:	21 15       	cp	r18, r1
 130:	31 05       	cpc	r19, r1
 132:	71 f0       	breq	.+28     	; 0x150 <DIO_u8SetPinDirection+0x88>
 134:	b0 c0       	rjmp	.+352    	; 0x296 <DIO_u8SetPinDirection+0x1ce>
 136:	6e 81       	ldd	r22, Y+6	; 0x06
 138:	7f 81       	ldd	r23, Y+7	; 0x07
 13a:	62 30       	cpi	r22, 0x02	; 2
 13c:	71 05       	cpc	r23, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_u8SetPinDirection+0x7a>
 140:	59 c0       	rjmp	.+178    	; 0x1f4 <DIO_u8SetPinDirection+0x12c>
 142:	8e 81       	ldd	r24, Y+6	; 0x06
 144:	9f 81       	ldd	r25, Y+7	; 0x07
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_u8SetPinDirection+0x86>
 14c:	7c c0       	rjmp	.+248    	; 0x246 <DIO_u8SetPinDirection+0x17e>
 14e:	a3 c0       	rjmp	.+326    	; 0x296 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	88 23       	and	r24, r24
 154:	21 f0       	breq	.+8      	; 0x15e <DIO_u8SetPinDirection+0x96>
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	09 f0       	breq	.+2      	; 0x15e <DIO_u8SetPinDirection+0x96>
 15c:	1d 82       	std	Y+5, r1	; 0x05
 15e:	aa e3       	ldi	r26, 0x3A	; 58
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	ea e3       	ldi	r30, 0x3A	; 58
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_u8SetPinDirection+0xb2>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	2a 95       	dec	r18
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_u8SetPinDirection+0xae>
 17e:	80 95       	com	r24
 180:	48 23       	and	r20, r24
 182:	8d 81       	ldd	r24, Y+5	; 0x05
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_u8SetPinDirection+0xce>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_u8SetPinDirection+0xca>
 19a:	cb 01       	movw	r24, r22
 19c:	84 2b       	or	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	7a c0       	rjmp	.+244    	; 0x296 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	88 23       	and	r24, r24
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <DIO_u8SetPinDirection+0xe8>
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <DIO_u8SetPinDirection+0xe8>
 1ae:	1d 82       	std	Y+5, r1	; 0x05
 1b0:	a7 e3       	ldi	r26, 0x37	; 55
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e7 e3       	ldi	r30, 0x37	; 55
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_u8SetPinDirection+0x104>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_u8SetPinDirection+0x100>
 1d0:	80 95       	com	r24
 1d2:	48 23       	and	r20, r24
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_u8SetPinDirection+0x120>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_u8SetPinDirection+0x11c>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	51 c0       	rjmp	.+162    	; 0x296 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	88 23       	and	r24, r24
 1f8:	21 f0       	breq	.+8      	; 0x202 <DIO_u8SetPinDirection+0x13a>
 1fa:	8d 81       	ldd	r24, Y+5	; 0x05
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_u8SetPinDirection+0x13a>
 200:	1d 82       	std	Y+5, r1	; 0x05
 202:	a4 e3       	ldi	r26, 0x34	; 52
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e4 e3       	ldi	r30, 0x34	; 52
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinDirection+0x156>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_u8SetPinDirection+0x152>
 222:	80 95       	com	r24
 224:	48 23       	and	r20, r24
 226:	8d 81       	ldd	r24, Y+5	; 0x05
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0x172>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0x16e>
 23e:	cb 01       	movw	r24, r22
 240:	84 2b       	or	r24, r20
 242:	8c 93       	st	X, r24
 244:	28 c0       	rjmp	.+80     	; 0x296 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
 246:	8d 81       	ldd	r24, Y+5	; 0x05
 248:	88 23       	and	r24, r24
 24a:	21 f0       	breq	.+8      	; 0x254 <DIO_u8SetPinDirection+0x18c>
 24c:	8d 81       	ldd	r24, Y+5	; 0x05
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	09 f0       	breq	.+2      	; 0x254 <DIO_u8SetPinDirection+0x18c>
 252:	1d 82       	std	Y+5, r1	; 0x05
 254:	a1 e3       	ldi	r26, 0x31	; 49
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_u8SetPinDirection+0x1a8>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	2a 95       	dec	r18
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_u8SetPinDirection+0x1a4>
 274:	80 95       	com	r24
 276:	48 23       	and	r20, r24
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinDirection+0x1c4>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8SetPinDirection+0x1c0>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
 296:	8b 81       	ldd	r24, Y+3	; 0x03
}
 298:	27 96       	adiw	r28, 0x07	; 7
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

000002aa <DIO_u8SetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
/*	OUTPUT:                                              */
/*			return ERROR STATE                           */
/*********************************************************/
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	27 97       	sbiw	r28, 0x07	; 7
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	8c 83       	std	Y+4, r24	; 0x04
 2c0:	6d 83       	std	Y+5, r22	; 0x05

   u8 Local_u8Error=ERROR_OK;
 2c2:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	80 32       	cpi	r24, 0x20	; 32
 2c8:	30 f4       	brcc	.+12     	; 0x2d6 <DIO_u8SetPinValue+0x2c>
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	31 f0       	breq	.+12     	; 0x2dc <DIO_u8SetPinValue+0x32>
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	8b 83       	std	Y+3, r24	; 0x03
 2da:	ce c0       	rjmp	.+412    	; 0x478 <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	87 70       	andi	r24, 0x07	; 7
 2e0:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 2e2:	8c 81       	ldd	r24, Y+4	; 0x04
 2e4:	86 95       	lsr	r24
 2e6:	86 95       	lsr	r24
 2e8:	86 95       	lsr	r24
 2ea:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	28 2f       	mov	r18, r24
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	3f 83       	std	Y+7, r19	; 0x07
 2f4:	2e 83       	std	Y+6, r18	; 0x06
 2f6:	6e 81       	ldd	r22, Y+6	; 0x06
 2f8:	7f 81       	ldd	r23, Y+7	; 0x07
 2fa:	61 30       	cpi	r22, 0x01	; 1
 2fc:	71 05       	cpc	r23, r1
 2fe:	09 f4       	brne	.+2      	; 0x302 <DIO_u8SetPinValue+0x58>
 300:	41 c0       	rjmp	.+130    	; 0x384 <DIO_u8SetPinValue+0xda>
 302:	8e 81       	ldd	r24, Y+6	; 0x06
 304:	9f 81       	ldd	r25, Y+7	; 0x07
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	91 05       	cpc	r25, r1
 30a:	34 f4       	brge	.+12     	; 0x318 <DIO_u8SetPinValue+0x6e>
 30c:	2e 81       	ldd	r18, Y+6	; 0x06
 30e:	3f 81       	ldd	r19, Y+7	; 0x07
 310:	21 15       	cp	r18, r1
 312:	31 05       	cpc	r19, r1
 314:	71 f0       	breq	.+28     	; 0x332 <DIO_u8SetPinValue+0x88>
 316:	b0 c0       	rjmp	.+352    	; 0x478 <DIO_u8SetPinValue+0x1ce>
 318:	6e 81       	ldd	r22, Y+6	; 0x06
 31a:	7f 81       	ldd	r23, Y+7	; 0x07
 31c:	62 30       	cpi	r22, 0x02	; 2
 31e:	71 05       	cpc	r23, r1
 320:	09 f4       	brne	.+2      	; 0x324 <DIO_u8SetPinValue+0x7a>
 322:	59 c0       	rjmp	.+178    	; 0x3d6 <DIO_u8SetPinValue+0x12c>
 324:	8e 81       	ldd	r24, Y+6	; 0x06
 326:	9f 81       	ldd	r25, Y+7	; 0x07
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	91 05       	cpc	r25, r1
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_u8SetPinValue+0x86>
 32e:	7c c0       	rjmp	.+248    	; 0x428 <DIO_u8SetPinValue+0x17e>
 330:	a3 c0       	rjmp	.+326    	; 0x478 <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 332:	8d 81       	ldd	r24, Y+5	; 0x05
 334:	88 23       	and	r24, r24
 336:	21 f0       	breq	.+8      	; 0x340 <DIO_u8SetPinValue+0x96>
 338:	8d 81       	ldd	r24, Y+5	; 0x05
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <DIO_u8SetPinValue+0x96>
 33e:	1d 82       	std	Y+5, r1	; 0x05
 340:	ab e3       	ldi	r26, 0x3B	; 59
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	eb e3       	ldi	r30, 0x3B	; 59
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_u8SetPinValue+0xb2>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	2a 95       	dec	r18
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_u8SetPinValue+0xae>
 360:	80 95       	com	r24
 362:	48 23       	and	r20, r24
 364:	8d 81       	ldd	r24, Y+5	; 0x05
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	8a 81       	ldd	r24, Y+2	; 0x02
 36c:	88 2f       	mov	r24, r24
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	b9 01       	movw	r22, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8SetPinValue+0xce>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	8a 95       	dec	r24
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8SetPinValue+0xca>
 37c:	cb 01       	movw	r24, r22
 37e:	84 2b       	or	r24, r20
 380:	8c 93       	st	X, r24
 382:	7a c0       	rjmp	.+244    	; 0x478 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 384:	8d 81       	ldd	r24, Y+5	; 0x05
 386:	88 23       	and	r24, r24
 388:	21 f0       	breq	.+8      	; 0x392 <DIO_u8SetPinValue+0xe8>
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	09 f0       	breq	.+2      	; 0x392 <DIO_u8SetPinValue+0xe8>
 390:	1d 82       	std	Y+5, r1	; 0x05
 392:	a8 e3       	ldi	r26, 0x38	; 56
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e8 e3       	ldi	r30, 0x38	; 56
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8SetPinValue+0x104>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	2a 95       	dec	r18
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8SetPinValue+0x100>
 3b2:	80 95       	com	r24
 3b4:	48 23       	and	r20, r24
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	28 2f       	mov	r18, r24
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	88 2f       	mov	r24, r24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_u8SetPinValue+0x120>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_u8SetPinValue+0x11c>
 3ce:	cb 01       	movw	r24, r22
 3d0:	84 2b       	or	r24, r20
 3d2:	8c 93       	st	X, r24
 3d4:	51 c0       	rjmp	.+162    	; 0x478 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	88 23       	and	r24, r24
 3da:	21 f0       	breq	.+8      	; 0x3e4 <DIO_u8SetPinValue+0x13a>
 3dc:	8d 81       	ldd	r24, Y+5	; 0x05
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_u8SetPinValue+0x13a>
 3e2:	1d 82       	std	Y+5, r1	; 0x05
 3e4:	a5 e3       	ldi	r26, 0x35	; 53
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e5 e3       	ldi	r30, 0x35	; 53
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_u8SetPinValue+0x156>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_u8SetPinValue+0x152>
 404:	80 95       	com	r24
 406:	48 23       	and	r20, r24
 408:	8d 81       	ldd	r24, Y+5	; 0x05
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	b9 01       	movw	r22, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8SetPinValue+0x172>
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	8a 95       	dec	r24
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8SetPinValue+0x16e>
 420:	cb 01       	movw	r24, r22
 422:	84 2b       	or	r24, r20
 424:	8c 93       	st	X, r24
 426:	28 c0       	rjmp	.+80     	; 0x478 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 428:	8d 81       	ldd	r24, Y+5	; 0x05
 42a:	88 23       	and	r24, r24
 42c:	21 f0       	breq	.+8      	; 0x436 <DIO_u8SetPinValue+0x18c>
 42e:	8d 81       	ldd	r24, Y+5	; 0x05
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	09 f0       	breq	.+2      	; 0x436 <DIO_u8SetPinValue+0x18c>
 434:	1d 82       	std	Y+5, r1	; 0x05
 436:	a2 e3       	ldi	r26, 0x32	; 50
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e2 e3       	ldi	r30, 0x32	; 50
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_u8SetPinValue+0x1a8>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	2a 95       	dec	r18
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_u8SetPinValue+0x1a4>
 456:	80 95       	com	r24
 458:	48 23       	and	r20, r24
 45a:	8d 81       	ldd	r24, Y+5	; 0x05
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_u8SetPinValue+0x1c4>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_u8SetPinValue+0x1c0>
 472:	cb 01       	movw	r24, r22
 474:	84 2b       	or	r24, r20
 476:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
 478:	8b 81       	ldd	r24, Y+3	; 0x03
}
 47a:	27 96       	adiw	r28, 0x07	; 7
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	28 97       	sbiw	r28, 0x08	; 8
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	8c 83       	std	Y+4, r24	; 0x04
 4a2:	7e 83       	std	Y+6, r23	; 0x06
 4a4:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 4a6:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	80 32       	cpi	r24, 0x20	; 32
 4ac:	20 f4       	brcc	.+8      	; 0x4b6 <DIO_u8GetPinValue+0x2a>
 4ae:	8d 81       	ldd	r24, Y+5	; 0x05
 4b0:	9e 81       	ldd	r25, Y+6	; 0x06
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	19 f4       	brne	.+6      	; 0x4bc <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	8b 83       	std	Y+3, r24	; 0x03
 4ba:	88 c0       	rjmp	.+272    	; 0x5cc <DIO_u8GetPinValue+0x140>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	87 70       	andi	r24, 0x07	; 7
 4c0:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	86 95       	lsr	r24
 4c6:	86 95       	lsr	r24
 4c8:	86 95       	lsr	r24
 4ca:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	38 87       	std	Y+8, r19	; 0x08
 4d4:	2f 83       	std	Y+7, r18	; 0x07
 4d6:	4f 81       	ldd	r20, Y+7	; 0x07
 4d8:	58 85       	ldd	r21, Y+8	; 0x08
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	51 05       	cpc	r21, r1
 4de:	79 f1       	breq	.+94     	; 0x53e <DIO_u8GetPinValue+0xb2>
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	98 85       	ldd	r25, Y+8	; 0x08
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	91 05       	cpc	r25, r1
 4e8:	34 f4       	brge	.+12     	; 0x4f6 <DIO_u8GetPinValue+0x6a>
 4ea:	2f 81       	ldd	r18, Y+7	; 0x07
 4ec:	38 85       	ldd	r19, Y+8	; 0x08
 4ee:	21 15       	cp	r18, r1
 4f0:	31 05       	cpc	r19, r1
 4f2:	69 f0       	breq	.+26     	; 0x50e <DIO_u8GetPinValue+0x82>
 4f4:	6b c0       	rjmp	.+214    	; 0x5cc <DIO_u8GetPinValue+0x140>
 4f6:	4f 81       	ldd	r20, Y+7	; 0x07
 4f8:	58 85       	ldd	r21, Y+8	; 0x08
 4fa:	42 30       	cpi	r20, 0x02	; 2
 4fc:	51 05       	cpc	r21, r1
 4fe:	b9 f1       	breq	.+110    	; 0x56e <DIO_u8GetPinValue+0xe2>
 500:	8f 81       	ldd	r24, Y+7	; 0x07
 502:	98 85       	ldd	r25, Y+8	; 0x08
 504:	83 30       	cpi	r24, 0x03	; 3
 506:	91 05       	cpc	r25, r1
 508:	09 f4       	brne	.+2      	; 0x50c <DIO_u8GetPinValue+0x80>
 50a:	49 c0       	rjmp	.+146    	; 0x59e <DIO_u8GetPinValue+0x112>
 50c:	5f c0       	rjmp	.+190    	; 0x5cc <DIO_u8GetPinValue+0x140>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
 50e:	a9 e3       	ldi	r26, 0x39	; 57
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e9 e3       	ldi	r30, 0x39	; 57
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a9 01       	movw	r20, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_u8GetPinValue+0x9e>
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_u8GetPinValue+0x9a>
 52e:	ca 01       	movw	r24, r20
 530:	81 70       	andi	r24, 0x01	; 1
 532:	8c 93       	st	X, r24
 534:	8c 91       	ld	r24, X
 536:	ed 81       	ldd	r30, Y+5	; 0x05
 538:	fe 81       	ldd	r31, Y+6	; 0x06
 53a:	80 83       	st	Z, r24
 53c:	47 c0       	rjmp	.+142    	; 0x5cc <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
 53e:	a6 e3       	ldi	r26, 0x36	; 54
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e6 e3       	ldi	r30, 0x36	; 54
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	88 2f       	mov	r24, r24
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	a9 01       	movw	r20, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_u8GetPinValue+0xce>
 556:	55 95       	asr	r21
 558:	47 95       	ror	r20
 55a:	8a 95       	dec	r24
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_u8GetPinValue+0xca>
 55e:	ca 01       	movw	r24, r20
 560:	81 70       	andi	r24, 0x01	; 1
 562:	8c 93       	st	X, r24
 564:	8c 91       	ld	r24, X
 566:	ed 81       	ldd	r30, Y+5	; 0x05
 568:	fe 81       	ldd	r31, Y+6	; 0x06
 56a:	80 83       	st	Z, r24
 56c:	2f c0       	rjmp	.+94     	; 0x5cc <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
 56e:	a3 e3       	ldi	r26, 0x33	; 51
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e3 e3       	ldi	r30, 0x33	; 51
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	a9 01       	movw	r20, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_u8GetPinValue+0xfe>
 586:	55 95       	asr	r21
 588:	47 95       	ror	r20
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_u8GetPinValue+0xfa>
 58e:	ca 01       	movw	r24, r20
 590:	81 70       	andi	r24, 0x01	; 1
 592:	8c 93       	st	X, r24
 594:	8c 91       	ld	r24, X
 596:	ed 81       	ldd	r30, Y+5	; 0x05
 598:	fe 81       	ldd	r31, Y+6	; 0x06
 59a:	80 83       	st	Z, r24
 59c:	17 c0       	rjmp	.+46     	; 0x5cc <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
 59e:	a0 e3       	ldi	r26, 0x30	; 48
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	e0 e3       	ldi	r30, 0x30	; 48
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	88 2f       	mov	r24, r24
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	a9 01       	movw	r20, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8GetPinValue+0x12e>
 5b6:	55 95       	asr	r21
 5b8:	47 95       	ror	r20
 5ba:	8a 95       	dec	r24
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8GetPinValue+0x12a>
 5be:	ca 01       	movw	r24, r20
 5c0:	81 70       	andi	r24, 0x01	; 1
 5c2:	8c 93       	st	X, r24
 5c4:	8c 91       	ld	r24, X
 5c6:	ed 81       	ldd	r30, Y+5	; 0x05
 5c8:	fe 81       	ldd	r31, Y+6	; 0x06
 5ca:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5ce:	28 96       	adiw	r28, 0x08	; 8
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	cf 91       	pop	r28
 5dc:	df 91       	pop	r29
 5de:	08 95       	ret

000005e0 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
 5e0:	df 93       	push	r29
 5e2:	cf 93       	push	r28
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <DIO_u8SetPortDirection+0x6>
 5e6:	0f 92       	push	r0
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	8a 83       	std	Y+2, r24	; 0x02
 5ee:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5f0:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	cf 91       	pop	r28
 600:	df 91       	pop	r29
 602:	08 95       	ret

00000604 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
 604:	df 93       	push	r29
 606:	cf 93       	push	r28
 608:	00 d0       	rcall	.+0      	; 0x60a <DIO_u8SetPortnValue+0x6>
 60a:	00 d0       	rcall	.+0      	; 0x60c <DIO_u8SetPortnValue+0x8>
 60c:	0f 92       	push	r0
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	8a 83       	std	Y+2, r24	; 0x02
 614:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 616:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
 618:	8a 81       	ldd	r24, Y+2	; 0x02
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	18 f0       	brcs	.+6      	; 0x624 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	89 83       	std	Y+1, r24	; 0x01
 622:	32 c0       	rjmp	.+100    	; 0x688 <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	28 2f       	mov	r18, r24
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	3d 83       	std	Y+5, r19	; 0x05
 62c:	2c 83       	std	Y+4, r18	; 0x04
 62e:	8c 81       	ldd	r24, Y+4	; 0x04
 630:	9d 81       	ldd	r25, Y+5	; 0x05
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	91 05       	cpc	r25, r1
 636:	d1 f0       	breq	.+52     	; 0x66c <DIO_u8SetPortnValue+0x68>
 638:	2c 81       	ldd	r18, Y+4	; 0x04
 63a:	3d 81       	ldd	r19, Y+5	; 0x05
 63c:	22 30       	cpi	r18, 0x02	; 2
 63e:	31 05       	cpc	r19, r1
 640:	2c f4       	brge	.+10     	; 0x64c <DIO_u8SetPortnValue+0x48>
 642:	8c 81       	ldd	r24, Y+4	; 0x04
 644:	9d 81       	ldd	r25, Y+5	; 0x05
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	61 f0       	breq	.+24     	; 0x662 <DIO_u8SetPortnValue+0x5e>
 64a:	1e c0       	rjmp	.+60     	; 0x688 <DIO_u8SetPortnValue+0x84>
 64c:	2c 81       	ldd	r18, Y+4	; 0x04
 64e:	3d 81       	ldd	r19, Y+5	; 0x05
 650:	22 30       	cpi	r18, 0x02	; 2
 652:	31 05       	cpc	r19, r1
 654:	81 f0       	breq	.+32     	; 0x676 <DIO_u8SetPortnValue+0x72>
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	9d 81       	ldd	r25, Y+5	; 0x05
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	91 05       	cpc	r25, r1
 65e:	81 f0       	breq	.+32     	; 0x680 <DIO_u8SetPortnValue+0x7c>
 660:	13 c0       	rjmp	.+38     	; 0x688 <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
 662:	eb e3       	ldi	r30, 0x3B	; 59
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	80 83       	st	Z, r24
 66a:	0e c0       	rjmp	.+28     	; 0x688 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
 66c:	e8 e3       	ldi	r30, 0x38	; 56
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	80 83       	st	Z, r24
 674:	09 c0       	rjmp	.+18     	; 0x688 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
 676:	e5 e3       	ldi	r30, 0x35	; 53
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	80 83       	st	Z, r24
 67e:	04 c0       	rjmp	.+8      	; 0x688 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
 680:	e2 e3       	ldi	r30, 0x32	; 50
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	8b 81       	ldd	r24, Y+3	; 0x03
 686:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 688:	89 81       	ldd	r24, Y+1	; 0x01
}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	08 95       	ret

0000069a <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
 69a:	df 93       	push	r29
 69c:	cf 93       	push	r28
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_u8GetPortnValue+0x6>
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <DIO_u8GetPortnValue+0x8>
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <DIO_u8GetPortnValue+0xa>
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
 6a8:	8a 83       	std	Y+2, r24	; 0x02
 6aa:	7c 83       	std	Y+4, r23	; 0x04
 6ac:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 6ae:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
 6b0:	8a 81       	ldd	r24, Y+2	; 0x02
 6b2:	84 30       	cpi	r24, 0x04	; 4
 6b4:	18 f0       	brcs	.+6      	; 0x6bc <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	3a c0       	rjmp	.+116    	; 0x730 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	3e 83       	std	Y+6, r19	; 0x06
 6c4:	2d 83       	std	Y+5, r18	; 0x05
 6c6:	8d 81       	ldd	r24, Y+5	; 0x05
 6c8:	9e 81       	ldd	r25, Y+6	; 0x06
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	91 05       	cpc	r25, r1
 6ce:	e1 f0       	breq	.+56     	; 0x708 <DIO_u8GetPortnValue+0x6e>
 6d0:	2d 81       	ldd	r18, Y+5	; 0x05
 6d2:	3e 81       	ldd	r19, Y+6	; 0x06
 6d4:	22 30       	cpi	r18, 0x02	; 2
 6d6:	31 05       	cpc	r19, r1
 6d8:	2c f4       	brge	.+10     	; 0x6e4 <DIO_u8GetPortnValue+0x4a>
 6da:	8d 81       	ldd	r24, Y+5	; 0x05
 6dc:	9e 81       	ldd	r25, Y+6	; 0x06
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	61 f0       	breq	.+24     	; 0x6fa <DIO_u8GetPortnValue+0x60>
 6e2:	26 c0       	rjmp	.+76     	; 0x730 <DIO_u8GetPortnValue+0x96>
 6e4:	2d 81       	ldd	r18, Y+5	; 0x05
 6e6:	3e 81       	ldd	r19, Y+6	; 0x06
 6e8:	22 30       	cpi	r18, 0x02	; 2
 6ea:	31 05       	cpc	r19, r1
 6ec:	a1 f0       	breq	.+40     	; 0x716 <DIO_u8GetPortnValue+0x7c>
 6ee:	8d 81       	ldd	r24, Y+5	; 0x05
 6f0:	9e 81       	ldd	r25, Y+6	; 0x06
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	91 05       	cpc	r25, r1
 6f6:	b1 f0       	breq	.+44     	; 0x724 <DIO_u8GetPortnValue+0x8a>
 6f8:	1b c0       	rjmp	.+54     	; 0x730 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
 6fa:	e9 e3       	ldi	r30, 0x39	; 57
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	eb 81       	ldd	r30, Y+3	; 0x03
 702:	fc 81       	ldd	r31, Y+4	; 0x04
 704:	80 83       	st	Z, r24
 706:	14 c0       	rjmp	.+40     	; 0x730 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
 708:	e6 e3       	ldi	r30, 0x36	; 54
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	eb 81       	ldd	r30, Y+3	; 0x03
 710:	fc 81       	ldd	r31, Y+4	; 0x04
 712:	80 83       	st	Z, r24
 714:	0d c0       	rjmp	.+26     	; 0x730 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
 716:	e3 e3       	ldi	r30, 0x33	; 51
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	eb 81       	ldd	r30, Y+3	; 0x03
 71e:	fc 81       	ldd	r31, Y+4	; 0x04
 720:	80 83       	st	Z, r24
 722:	06 c0       	rjmp	.+12     	; 0x730 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
 724:	e0 e3       	ldi	r30, 0x30	; 48
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	eb 81       	ldd	r30, Y+3	; 0x03
 72c:	fc 81       	ldd	r31, Y+4	; 0x04
 72e:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 730:	89 81       	ldd	r24, Y+1	; 0x01
}
 732:	26 96       	adiw	r28, 0x06	; 6
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	08 95       	ret

00000744 <delay_milliSecond>:




void delay_milliSecond(u32 value)
{
 744:	df 93       	push	r29
 746:	cf 93       	push	r28
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	2a 97       	sbiw	r28, 0x0a	; 10
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	6f 83       	std	Y+7, r22	; 0x07
 75a:	78 87       	std	Y+8, r23	; 0x08
 75c:	89 87       	std	Y+9, r24	; 0x09
 75e:	9a 87       	std	Y+10, r25	; 0x0a

/**************************  OPERATIONS  ****************************/
/*																    */

	value = (u32)value*Milli2Micro;
 760:	8f 81       	ldd	r24, Y+7	; 0x07
 762:	98 85       	ldd	r25, Y+8	; 0x08
 764:	a9 85       	ldd	r26, Y+9	; 0x09
 766:	ba 85       	ldd	r27, Y+10	; 0x0a
 768:	28 ee       	ldi	r18, 0xE8	; 232
 76a:	33 e0       	ldi	r19, 0x03	; 3
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	bc 01       	movw	r22, r24
 772:	cd 01       	movw	r24, r26
 774:	0e 94 a3 04 	call	0x946	; 0x946 <__mulsi3>
 778:	dc 01       	movw	r26, r24
 77a:	cb 01       	movw	r24, r22
 77c:	8f 83       	std	Y+7, r24	; 0x07
 77e:	98 87       	std	Y+8, r25	; 0x08
 780:	a9 87       	std	Y+9, r26	; 0x09
 782:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value - InContext - OutContext - OperationsDelay) ;
 784:	8f 81       	ldd	r24, Y+7	; 0x07
 786:	98 85       	ldd	r25, Y+8	; 0x08
 788:	a9 85       	ldd	r26, Y+9	; 0x09
 78a:	ba 85       	ldd	r27, Y+10	; 0x0a
 78c:	8d 55       	subi	r24, 0x5D	; 93
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	a0 40       	sbci	r26, 0x00	; 0
 792:	b0 40       	sbci	r27, 0x00	; 0
 794:	8f 83       	std	Y+7, r24	; 0x07
 796:	98 87       	std	Y+8, r25	; 0x08
 798:	a9 87       	std	Y+9, r26	; 0x09
 79a:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value / MIC2MILL) ;
 79c:	8f 81       	ldd	r24, Y+7	; 0x07
 79e:	98 85       	ldd	r25, Y+8	; 0x08
 7a0:	a9 85       	ldd	r26, Y+9	; 0x09
 7a2:	ba 85       	ldd	r27, Y+10	; 0x0a
 7a4:	28 ee       	ldi	r18, 0xE8	; 232
 7a6:	33 e0       	ldi	r19, 0x03	; 3
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	bc 01       	movw	r22, r24
 7ae:	cd 01       	movw	r24, r26
 7b0:	0e 94 c2 04 	call	0x984	; 0x984 <__udivmodsi4>
 7b4:	da 01       	movw	r26, r20
 7b6:	c9 01       	movw	r24, r18
 7b8:	8f 83       	std	Y+7, r24	; 0x07
 7ba:	98 87       	std	Y+8, r25	; 0x08
 7bc:	a9 87       	std	Y+9, r26	; 0x09
 7be:	ba 87       	std	Y+10, r27	; 0x0a

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
 7c0:	1b 82       	std	Y+3, r1	; 0x03
 7c2:	1c 82       	std	Y+4, r1	; 0x04
 7c4:	1d 82       	std	Y+5, r1	; 0x05
 7c6:	1e 82       	std	Y+6, r1	; 0x06
 7c8:	20 c0       	rjmp	.+64     	; 0x80a <delay_milliSecond+0xc6>

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
 7ca:	1a 82       	std	Y+2, r1	; 0x02
 7cc:	19 82       	std	Y+1, r1	; 0x01
 7ce:	0c c0       	rjmp	.+24     	; 0x7e8 <delay_milliSecond+0xa4>
	...
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
 7dc:	00 00       	nop


	for (u32 ii = 0 ; ii < (u32)value ; ii++){

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	9a 83       	std	Y+2, r25	; 0x02
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	22 e0       	ldi	r18, 0x02	; 2
 7ee:	8e 34       	cpi	r24, 0x4E	; 78
 7f0:	92 07       	cpc	r25, r18
 7f2:	70 f3       	brcs	.-36     	; 0x7d0 <delay_milliSecond+0x8c>

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	9c 81       	ldd	r25, Y+4	; 0x04
 7f8:	ad 81       	ldd	r26, Y+5	; 0x05
 7fa:	be 81       	ldd	r27, Y+6	; 0x06
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	a1 1d       	adc	r26, r1
 800:	b1 1d       	adc	r27, r1
 802:	8b 83       	std	Y+3, r24	; 0x03
 804:	9c 83       	std	Y+4, r25	; 0x04
 806:	ad 83       	std	Y+5, r26	; 0x05
 808:	be 83       	std	Y+6, r27	; 0x06
 80a:	2b 81       	ldd	r18, Y+3	; 0x03
 80c:	3c 81       	ldd	r19, Y+4	; 0x04
 80e:	4d 81       	ldd	r20, Y+5	; 0x05
 810:	5e 81       	ldd	r21, Y+6	; 0x06
 812:	8f 81       	ldd	r24, Y+7	; 0x07
 814:	98 85       	ldd	r25, Y+8	; 0x08
 816:	a9 85       	ldd	r26, Y+9	; 0x09
 818:	ba 85       	ldd	r27, Y+10	; 0x0a
 81a:	28 17       	cp	r18, r24
 81c:	39 07       	cpc	r19, r25
 81e:	4a 07       	cpc	r20, r26
 820:	5b 07       	cpc	r21, r27
 822:	98 f2       	brcs	.-90     	; 0x7ca <delay_milliSecond+0x86>

		}

	}

}
 824:	2a 96       	adiw	r28, 0x0a	; 10
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	08 95       	ret

00000836 <main>:
u8 Flag=0;
u16 Counter=0;
u16 OVFCOUNTER=0;

int main(void)
{
 836:	df 93       	push	r29
 838:	cf 93       	push	r28
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xFF;
 83e:	e1 e3       	ldi	r30, 0x31	; 49
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	80 83       	st	Z, r24
	TIM0_Confg();
 846:	0e 94 26 04 	call	0x84c	; 0x84c <TIM0_Confg>
 84a:	ff cf       	rjmp	.-2      	; 0x84a <main+0x14>

0000084c <TIM0_Confg>:
	while(1);

	return 0;
}
void TIM0_Confg(void)
{
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
	TCNT0 =PRELOAD;
 854:	e2 e5       	ldi	r30, 0x52	; 82
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	86 e9       	ldi	r24, 0x96	; 150
 85a:	80 83       	st	Z, r24
	TCCR0=0x02;
 85c:	e3 e5       	ldi	r30, 0x53	; 83
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	80 83       	st	Z, r24
	TIMSK |=0x01;
 864:	a9 e5       	ldi	r26, 0x59	; 89
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e9 e5       	ldi	r30, 0x59	; 89
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	8c 93       	st	X, r24
	SREG|=0x80;
 872:	af e5       	ldi	r26, 0x5F	; 95
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	ef e5       	ldi	r30, 0x5F	; 95
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	80 68       	ori	r24, 0x80	; 128
 87e:	8c 93       	st	X, r24
}
 880:	cf 91       	pop	r28
 882:	df 91       	pop	r29
 884:	08 95       	ret

00000886 <__vector_11>:

/*Timer Interrupt 0*/
void __vector_11(void) __attribute__((signal));
/*Timer Interrupt Function*/
void __vector_11(void)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	8f 93       	push	r24
 894:	9f 93       	push	r25
 896:	ef 93       	push	r30
 898:	ff 93       	push	r31
 89a:	df 93       	push	r29
 89c:	cf 93       	push	r28
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
		if(Counter<255 && Flag==0)
 8a2:	80 91 61 00 	lds	r24, 0x0061
 8a6:	90 91 62 00 	lds	r25, 0x0062
 8aa:	8f 3f       	cpi	r24, 0xFF	; 255
 8ac:	91 05       	cpc	r25, r1
 8ae:	10 f5       	brcc	.+68     	; 0x8f4 <__vector_11+0x6e>
 8b0:	80 91 60 00 	lds	r24, 0x0060
 8b4:	88 23       	and	r24, r24
 8b6:	f1 f4       	brne	.+60     	; 0x8f4 <__vector_11+0x6e>
		{
			PORTD=Counter;
 8b8:	e2 e3       	ldi	r30, 0x32	; 50
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 91 61 00 	lds	r24, 0x0061
 8c0:	90 91 62 00 	lds	r25, 0x0062
 8c4:	80 83       	st	Z, r24
			TCNT0 =PRELOAD;
 8c6:	e2 e5       	ldi	r30, 0x52	; 82
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	86 e9       	ldi	r24, 0x96	; 150
 8cc:	80 83       	st	Z, r24
			++Counter;
 8ce:	80 91 61 00 	lds	r24, 0x0061
 8d2:	90 91 62 00 	lds	r25, 0x0062
 8d6:	01 96       	adiw	r24, 0x01	; 1
 8d8:	90 93 62 00 	sts	0x0062, r25
 8dc:	80 93 61 00 	sts	0x0061, r24
			if(Counter ==255) Flag=1;
 8e0:	80 91 61 00 	lds	r24, 0x0061
 8e4:	90 91 62 00 	lds	r25, 0x0062
 8e8:	8f 3f       	cpi	r24, 0xFF	; 255
 8ea:	91 05       	cpc	r25, r1
 8ec:	19 f4       	brne	.+6      	; 0x8f4 <__vector_11+0x6e>
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	80 93 60 00 	sts	0x0060, r24
		}

		if(Flag==1)
 8f4:	80 91 60 00 	lds	r24, 0x0060
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	c9 f4       	brne	.+50     	; 0x92e <__vector_11+0xa8>
		{
			PORTD=Counter--;
 8fc:	e2 e3       	ldi	r30, 0x32	; 50
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 91 61 00 	lds	r24, 0x0061
 904:	90 91 62 00 	lds	r25, 0x0062
 908:	28 2f       	mov	r18, r24
 90a:	20 83       	st	Z, r18
 90c:	01 97       	sbiw	r24, 0x01	; 1
 90e:	90 93 62 00 	sts	0x0062, r25
 912:	80 93 61 00 	sts	0x0061, r24
			TCNT0 =PRELOAD;
 916:	e2 e5       	ldi	r30, 0x52	; 82
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	86 e9       	ldi	r24, 0x96	; 150
 91c:	80 83       	st	Z, r24
			if(Counter ==0) Flag=0;
 91e:	80 91 61 00 	lds	r24, 0x0061
 922:	90 91 62 00 	lds	r25, 0x0062
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	11 f4       	brne	.+4      	; 0x92e <__vector_11+0xa8>
 92a:	10 92 60 00 	sts	0x0060, r1
		}
}
 92e:	cf 91       	pop	r28
 930:	df 91       	pop	r29
 932:	ff 91       	pop	r31
 934:	ef 91       	pop	r30
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__mulsi3>:
 946:	62 9f       	mul	r22, r18
 948:	d0 01       	movw	r26, r0
 94a:	73 9f       	mul	r23, r19
 94c:	f0 01       	movw	r30, r0
 94e:	82 9f       	mul	r24, r18
 950:	e0 0d       	add	r30, r0
 952:	f1 1d       	adc	r31, r1
 954:	64 9f       	mul	r22, r20
 956:	e0 0d       	add	r30, r0
 958:	f1 1d       	adc	r31, r1
 95a:	92 9f       	mul	r25, r18
 95c:	f0 0d       	add	r31, r0
 95e:	83 9f       	mul	r24, r19
 960:	f0 0d       	add	r31, r0
 962:	74 9f       	mul	r23, r20
 964:	f0 0d       	add	r31, r0
 966:	65 9f       	mul	r22, r21
 968:	f0 0d       	add	r31, r0
 96a:	99 27       	eor	r25, r25
 96c:	72 9f       	mul	r23, r18
 96e:	b0 0d       	add	r27, r0
 970:	e1 1d       	adc	r30, r1
 972:	f9 1f       	adc	r31, r25
 974:	63 9f       	mul	r22, r19
 976:	b0 0d       	add	r27, r0
 978:	e1 1d       	adc	r30, r1
 97a:	f9 1f       	adc	r31, r25
 97c:	bd 01       	movw	r22, r26
 97e:	cf 01       	movw	r24, r30
 980:	11 24       	eor	r1, r1
 982:	08 95       	ret

00000984 <__udivmodsi4>:
 984:	a1 e2       	ldi	r26, 0x21	; 33
 986:	1a 2e       	mov	r1, r26
 988:	aa 1b       	sub	r26, r26
 98a:	bb 1b       	sub	r27, r27
 98c:	fd 01       	movw	r30, r26
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__udivmodsi4_ep>

00000990 <__udivmodsi4_loop>:
 990:	aa 1f       	adc	r26, r26
 992:	bb 1f       	adc	r27, r27
 994:	ee 1f       	adc	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	a2 17       	cp	r26, r18
 99a:	b3 07       	cpc	r27, r19
 99c:	e4 07       	cpc	r30, r20
 99e:	f5 07       	cpc	r31, r21
 9a0:	20 f0       	brcs	.+8      	; 0x9aa <__udivmodsi4_ep>
 9a2:	a2 1b       	sub	r26, r18
 9a4:	b3 0b       	sbc	r27, r19
 9a6:	e4 0b       	sbc	r30, r20
 9a8:	f5 0b       	sbc	r31, r21

000009aa <__udivmodsi4_ep>:
 9aa:	66 1f       	adc	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	1a 94       	dec	r1
 9b4:	69 f7       	brne	.-38     	; 0x990 <__udivmodsi4_loop>
 9b6:	60 95       	com	r22
 9b8:	70 95       	com	r23
 9ba:	80 95       	com	r24
 9bc:	90 95       	com	r25
 9be:	9b 01       	movw	r18, r22
 9c0:	ac 01       	movw	r20, r24
 9c2:	bd 01       	movw	r22, r26
 9c4:	cf 01       	movw	r24, r30
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
