
EXT_SWI_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000089e  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000cfc  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a3c  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2d 04 	call	0x85a	; 0x85a <main>
  7a:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:




void DIO_voidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    DDRA->ByteAccess=CONC_8bit(DIO_u8_PIN0_DIR,
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8c eb       	ldi	r24, 0xBC	; 188
  90:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8b e0       	ldi	r24, 0x0B	; 11
  98:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
  9a:	e4 e3       	ldi	r30, 0x34	; 52
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
  a0:	e1 e3       	ldi	r30, 0x31	; 49
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
  a6:	eb e3       	ldi	r30, 0x3B	; 59
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
  ac:	e8 e3       	ldi	r30, 0x38	; 56
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
  b8:	e2 e3       	ldi	r30, 0x32	; 50
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
                            DIO_u8_PIN31_VALUE
     );


  return;
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	27 97       	sbiw	r28, 0x07	; 7
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	8c 83       	std	Y+4, r24	; 0x04
  da:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
  dc:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
  de:	8c 81       	ldd	r24, Y+4	; 0x04
  e0:	80 32       	cpi	r24, 0x20	; 32
  e2:	30 f4       	brcc	.+12     	; 0xf0 <DIO_u8SetPinDirection+0x2c>
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	31 f0       	breq	.+12     	; 0xf6 <DIO_u8SetPinDirection+0x32>
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	88 23       	and	r24, r24
  ee:	19 f0       	breq	.+6      	; 0xf6 <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8b 83       	std	Y+3, r24	; 0x03
  f4:	ce c0       	rjmp	.+412    	; 0x292 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	87 70       	andi	r24, 0x07	; 7
  fa:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	86 95       	lsr	r24
 104:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	3f 83       	std	Y+7, r19	; 0x07
 10e:	2e 83       	std	Y+6, r18	; 0x06
 110:	6e 81       	ldd	r22, Y+6	; 0x06
 112:	7f 81       	ldd	r23, Y+7	; 0x07
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	71 05       	cpc	r23, r1
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_u8SetPinDirection+0x58>
 11a:	41 c0       	rjmp	.+130    	; 0x19e <DIO_u8SetPinDirection+0xda>
 11c:	8e 81       	ldd	r24, Y+6	; 0x06
 11e:	9f 81       	ldd	r25, Y+7	; 0x07
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	34 f4       	brge	.+12     	; 0x132 <DIO_u8SetPinDirection+0x6e>
 126:	2e 81       	ldd	r18, Y+6	; 0x06
 128:	3f 81       	ldd	r19, Y+7	; 0x07
 12a:	21 15       	cp	r18, r1
 12c:	31 05       	cpc	r19, r1
 12e:	71 f0       	breq	.+28     	; 0x14c <DIO_u8SetPinDirection+0x88>
 130:	b0 c0       	rjmp	.+352    	; 0x292 <DIO_u8SetPinDirection+0x1ce>
 132:	6e 81       	ldd	r22, Y+6	; 0x06
 134:	7f 81       	ldd	r23, Y+7	; 0x07
 136:	62 30       	cpi	r22, 0x02	; 2
 138:	71 05       	cpc	r23, r1
 13a:	09 f4       	brne	.+2      	; 0x13e <DIO_u8SetPinDirection+0x7a>
 13c:	59 c0       	rjmp	.+178    	; 0x1f0 <DIO_u8SetPinDirection+0x12c>
 13e:	8e 81       	ldd	r24, Y+6	; 0x06
 140:	9f 81       	ldd	r25, Y+7	; 0x07
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	91 05       	cpc	r25, r1
 146:	09 f4       	brne	.+2      	; 0x14a <DIO_u8SetPinDirection+0x86>
 148:	7c c0       	rjmp	.+248    	; 0x242 <DIO_u8SetPinDirection+0x17e>
 14a:	a3 c0       	rjmp	.+326    	; 0x292 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <DIO_u8SetPinDirection+0x96>
 152:	8d 81       	ldd	r24, Y+5	; 0x05
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	09 f0       	breq	.+2      	; 0x15a <DIO_u8SetPinDirection+0x96>
 158:	1d 82       	std	Y+5, r1	; 0x05
 15a:	aa e3       	ldi	r26, 0x3A	; 58
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ea e3       	ldi	r30, 0x3A	; 58
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_u8SetPinDirection+0xb2>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_u8SetPinDirection+0xae>
 17a:	80 95       	com	r24
 17c:	48 23       	and	r20, r24
 17e:	8d 81       	ldd	r24, Y+5	; 0x05
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_u8SetPinDirection+0xce>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_u8SetPinDirection+0xca>
 196:	cb 01       	movw	r24, r22
 198:	84 2b       	or	r24, r20
 19a:	8c 93       	st	X, r24
 19c:	7a c0       	rjmp	.+244    	; 0x292 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	88 23       	and	r24, r24
 1a2:	21 f0       	breq	.+8      	; 0x1ac <DIO_u8SetPinDirection+0xe8>
 1a4:	8d 81       	ldd	r24, Y+5	; 0x05
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <DIO_u8SetPinDirection+0xe8>
 1aa:	1d 82       	std	Y+5, r1	; 0x05
 1ac:	a7 e3       	ldi	r26, 0x37	; 55
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e7 e3       	ldi	r30, 0x37	; 55
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_u8SetPinDirection+0x104>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	2a 95       	dec	r18
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_u8SetPinDirection+0x100>
 1cc:	80 95       	com	r24
 1ce:	48 23       	and	r20, r24
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_u8SetPinDirection+0x120>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_u8SetPinDirection+0x11c>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	8c 93       	st	X, r24
 1ee:	51 c0       	rjmp	.+162    	; 0x292 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1f0:	8d 81       	ldd	r24, Y+5	; 0x05
 1f2:	88 23       	and	r24, r24
 1f4:	21 f0       	breq	.+8      	; 0x1fe <DIO_u8SetPinDirection+0x13a>
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_u8SetPinDirection+0x13a>
 1fc:	1d 82       	std	Y+5, r1	; 0x05
 1fe:	a4 e3       	ldi	r26, 0x34	; 52
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e4 e3       	ldi	r30, 0x34	; 52
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_u8SetPinDirection+0x156>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	2a 95       	dec	r18
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_u8SetPinDirection+0x152>
 21e:	80 95       	com	r24
 220:	48 23       	and	r20, r24
 222:	8d 81       	ldd	r24, Y+5	; 0x05
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_u8SetPinDirection+0x172>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_u8SetPinDirection+0x16e>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
 240:	28 c0       	rjmp	.+80     	; 0x292 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
 242:	8d 81       	ldd	r24, Y+5	; 0x05
 244:	88 23       	and	r24, r24
 246:	21 f0       	breq	.+8      	; 0x250 <DIO_u8SetPinDirection+0x18c>
 248:	8d 81       	ldd	r24, Y+5	; 0x05
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_u8SetPinDirection+0x18c>
 24e:	1d 82       	std	Y+5, r1	; 0x05
 250:	a1 e3       	ldi	r26, 0x31	; 49
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e1 e3       	ldi	r30, 0x31	; 49
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8SetPinDirection+0x1a8>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	2a 95       	dec	r18
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8SetPinDirection+0x1a4>
 270:	80 95       	com	r24
 272:	48 23       	and	r20, r24
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	88 2f       	mov	r24, r24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinDirection+0x1c4>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinDirection+0x1c0>
 28c:	cb 01       	movw	r24, r22
 28e:	84 2b       	or	r24, r20
 290:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
 292:	8b 81       	ldd	r24, Y+3	; 0x03
}
 294:	27 96       	adiw	r28, 0x07	; 7
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <DIO_u8SetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
/*	OUTPUT:                                              */
/*			return ERROR STATE                           */
/*********************************************************/
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	27 97       	sbiw	r28, 0x07	; 7
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	8c 83       	std	Y+4, r24	; 0x04
 2bc:	6d 83       	std	Y+5, r22	; 0x05

   u8 Local_u8Error=ERROR_OK;
 2be:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	80 32       	cpi	r24, 0x20	; 32
 2c4:	30 f4       	brcc	.+12     	; 0x2d2 <DIO_u8SetPinValue+0x2c>
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <DIO_u8SetPinValue+0x32>
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	88 23       	and	r24, r24
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	8b 83       	std	Y+3, r24	; 0x03
 2d6:	ce c0       	rjmp	.+412    	; 0x474 <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	87 70       	andi	r24, 0x07	; 7
 2dc:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	3f 83       	std	Y+7, r19	; 0x07
 2f0:	2e 83       	std	Y+6, r18	; 0x06
 2f2:	6e 81       	ldd	r22, Y+6	; 0x06
 2f4:	7f 81       	ldd	r23, Y+7	; 0x07
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	71 05       	cpc	r23, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_u8SetPinValue+0x58>
 2fc:	41 c0       	rjmp	.+130    	; 0x380 <DIO_u8SetPinValue+0xda>
 2fe:	8e 81       	ldd	r24, Y+6	; 0x06
 300:	9f 81       	ldd	r25, Y+7	; 0x07
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	91 05       	cpc	r25, r1
 306:	34 f4       	brge	.+12     	; 0x314 <DIO_u8SetPinValue+0x6e>
 308:	2e 81       	ldd	r18, Y+6	; 0x06
 30a:	3f 81       	ldd	r19, Y+7	; 0x07
 30c:	21 15       	cp	r18, r1
 30e:	31 05       	cpc	r19, r1
 310:	71 f0       	breq	.+28     	; 0x32e <DIO_u8SetPinValue+0x88>
 312:	b0 c0       	rjmp	.+352    	; 0x474 <DIO_u8SetPinValue+0x1ce>
 314:	6e 81       	ldd	r22, Y+6	; 0x06
 316:	7f 81       	ldd	r23, Y+7	; 0x07
 318:	62 30       	cpi	r22, 0x02	; 2
 31a:	71 05       	cpc	r23, r1
 31c:	09 f4       	brne	.+2      	; 0x320 <DIO_u8SetPinValue+0x7a>
 31e:	59 c0       	rjmp	.+178    	; 0x3d2 <DIO_u8SetPinValue+0x12c>
 320:	8e 81       	ldd	r24, Y+6	; 0x06
 322:	9f 81       	ldd	r25, Y+7	; 0x07
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	91 05       	cpc	r25, r1
 328:	09 f4       	brne	.+2      	; 0x32c <DIO_u8SetPinValue+0x86>
 32a:	7c c0       	rjmp	.+248    	; 0x424 <DIO_u8SetPinValue+0x17e>
 32c:	a3 c0       	rjmp	.+326    	; 0x474 <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	88 23       	and	r24, r24
 332:	21 f0       	breq	.+8      	; 0x33c <DIO_u8SetPinValue+0x96>
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_u8SetPinValue+0x96>
 33a:	1d 82       	std	Y+5, r1	; 0x05
 33c:	ab e3       	ldi	r26, 0x3B	; 59
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	eb e3       	ldi	r30, 0x3B	; 59
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8SetPinValue+0xb2>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	2a 95       	dec	r18
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8SetPinValue+0xae>
 35c:	80 95       	com	r24
 35e:	48 23       	and	r20, r24
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_u8SetPinValue+0xce>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_u8SetPinValue+0xca>
 378:	cb 01       	movw	r24, r22
 37a:	84 2b       	or	r24, r20
 37c:	8c 93       	st	X, r24
 37e:	7a c0       	rjmp	.+244    	; 0x474 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 380:	8d 81       	ldd	r24, Y+5	; 0x05
 382:	88 23       	and	r24, r24
 384:	21 f0       	breq	.+8      	; 0x38e <DIO_u8SetPinValue+0xe8>
 386:	8d 81       	ldd	r24, Y+5	; 0x05
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	09 f0       	breq	.+2      	; 0x38e <DIO_u8SetPinValue+0xe8>
 38c:	1d 82       	std	Y+5, r1	; 0x05
 38e:	a8 e3       	ldi	r26, 0x38	; 56
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	e8 e3       	ldi	r30, 0x38	; 56
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	48 2f       	mov	r20, r24
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8SetPinValue+0x104>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	2a 95       	dec	r18
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8SetPinValue+0x100>
 3ae:	80 95       	com	r24
 3b0:	48 23       	and	r20, r24
 3b2:	8d 81       	ldd	r24, Y+5	; 0x05
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	88 2f       	mov	r24, r24
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8SetPinValue+0x120>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8SetPinValue+0x11c>
 3ca:	cb 01       	movw	r24, r22
 3cc:	84 2b       	or	r24, r20
 3ce:	8c 93       	st	X, r24
 3d0:	51 c0       	rjmp	.+162    	; 0x474 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 3d2:	8d 81       	ldd	r24, Y+5	; 0x05
 3d4:	88 23       	and	r24, r24
 3d6:	21 f0       	breq	.+8      	; 0x3e0 <DIO_u8SetPinValue+0x13a>
 3d8:	8d 81       	ldd	r24, Y+5	; 0x05
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <DIO_u8SetPinValue+0x13a>
 3de:	1d 82       	std	Y+5, r1	; 0x05
 3e0:	a5 e3       	ldi	r26, 0x35	; 53
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e5 e3       	ldi	r30, 0x35	; 53
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8SetPinValue+0x156>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	2a 95       	dec	r18
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8SetPinValue+0x152>
 400:	80 95       	com	r24
 402:	48 23       	and	r20, r24
 404:	8d 81       	ldd	r24, Y+5	; 0x05
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	b9 01       	movw	r22, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_u8SetPinValue+0x172>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_u8SetPinValue+0x16e>
 41c:	cb 01       	movw	r24, r22
 41e:	84 2b       	or	r24, r20
 420:	8c 93       	st	X, r24
 422:	28 c0       	rjmp	.+80     	; 0x474 <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 424:	8d 81       	ldd	r24, Y+5	; 0x05
 426:	88 23       	and	r24, r24
 428:	21 f0       	breq	.+8      	; 0x432 <DIO_u8SetPinValue+0x18c>
 42a:	8d 81       	ldd	r24, Y+5	; 0x05
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	09 f0       	breq	.+2      	; 0x432 <DIO_u8SetPinValue+0x18c>
 430:	1d 82       	std	Y+5, r1	; 0x05
 432:	a2 e3       	ldi	r26, 0x32	; 50
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e2 e3       	ldi	r30, 0x32	; 50
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8SetPinValue+0x1a8>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	2a 95       	dec	r18
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8SetPinValue+0x1a4>
 452:	80 95       	com	r24
 454:	48 23       	and	r20, r24
 456:	8d 81       	ldd	r24, Y+5	; 0x05
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	88 2f       	mov	r24, r24
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	b9 01       	movw	r22, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8SetPinValue+0x1c4>
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8SetPinValue+0x1c0>
 46e:	cb 01       	movw	r24, r22
 470:	84 2b       	or	r24, r20
 472:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
 474:	8b 81       	ldd	r24, Y+3	; 0x03
}
 476:	27 96       	adiw	r28, 0x07	; 7
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	cf 91       	pop	r28
 484:	df 91       	pop	r29
 486:	08 95       	ret

00000488 <DIO_u8GetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
/*	OUTPUT:                                              */
/*			return :ERROR STATE                          */
/*********************************************************/
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
 488:	df 93       	push	r29
 48a:	cf 93       	push	r28
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	28 97       	sbiw	r28, 0x08	; 8
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	8c 83       	std	Y+4, r24	; 0x04
 49e:	7e 83       	std	Y+6, r23	; 0x06
 4a0:	6d 83       	std	Y+5, r22	; 0x05

  u8 Local_u8Error=ERROR_OK;
 4a2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;

    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	80 32       	cpi	r24, 0x20	; 32
 4a8:	20 f4       	brcc	.+8      	; 0x4b2 <DIO_u8GetPinValue+0x2a>
 4aa:	8d 81       	ldd	r24, Y+5	; 0x05
 4ac:	9e 81       	ldd	r25, Y+6	; 0x06
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	8b 83       	std	Y+3, r24	; 0x03
 4b6:	88 c0       	rjmp	.+272    	; 0x5c8 <DIO_u8GetPinValue+0x140>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	87 70       	andi	r24, 0x07	; 7
 4bc:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 4be:	8c 81       	ldd	r24, Y+4	; 0x04
 4c0:	86 95       	lsr	r24
 4c2:	86 95       	lsr	r24
 4c4:	86 95       	lsr	r24
 4c6:	89 83       	std	Y+1, r24	; 0x01

      switch (Local_u8PortId)
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	38 87       	std	Y+8, r19	; 0x08
 4d0:	2f 83       	std	Y+7, r18	; 0x07
 4d2:	4f 81       	ldd	r20, Y+7	; 0x07
 4d4:	58 85       	ldd	r21, Y+8	; 0x08
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	51 05       	cpc	r21, r1
 4da:	79 f1       	breq	.+94     	; 0x53a <DIO_u8GetPinValue+0xb2>
 4dc:	8f 81       	ldd	r24, Y+7	; 0x07
 4de:	98 85       	ldd	r25, Y+8	; 0x08
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	91 05       	cpc	r25, r1
 4e4:	34 f4       	brge	.+12     	; 0x4f2 <DIO_u8GetPinValue+0x6a>
 4e6:	2f 81       	ldd	r18, Y+7	; 0x07
 4e8:	38 85       	ldd	r19, Y+8	; 0x08
 4ea:	21 15       	cp	r18, r1
 4ec:	31 05       	cpc	r19, r1
 4ee:	69 f0       	breq	.+26     	; 0x50a <DIO_u8GetPinValue+0x82>
 4f0:	6b c0       	rjmp	.+214    	; 0x5c8 <DIO_u8GetPinValue+0x140>
 4f2:	4f 81       	ldd	r20, Y+7	; 0x07
 4f4:	58 85       	ldd	r21, Y+8	; 0x08
 4f6:	42 30       	cpi	r20, 0x02	; 2
 4f8:	51 05       	cpc	r21, r1
 4fa:	b9 f1       	breq	.+110    	; 0x56a <DIO_u8GetPinValue+0xe2>
 4fc:	8f 81       	ldd	r24, Y+7	; 0x07
 4fe:	98 85       	ldd	r25, Y+8	; 0x08
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	91 05       	cpc	r25, r1
 504:	09 f4       	brne	.+2      	; 0x508 <DIO_u8GetPinValue+0x80>
 506:	49 c0       	rjmp	.+146    	; 0x59a <DIO_u8GetPinValue+0x112>
 508:	5f c0       	rjmp	.+190    	; 0x5c8 <DIO_u8GetPinValue+0x140>
      {
        case DIO_PIN_A:

        	*Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
 50a:	a9 e3       	ldi	r26, 0x39	; 57
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e9 e3       	ldi	r30, 0x39	; 57
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_u8GetPinValue+0x9e>
 522:	55 95       	asr	r21
 524:	47 95       	ror	r20
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_u8GetPinValue+0x9a>
 52a:	ca 01       	movw	r24, r20
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	8c 93       	st	X, r24
 530:	8c 91       	ld	r24, X
 532:	ed 81       	ldd	r30, Y+5	; 0x05
 534:	fe 81       	ldd	r31, Y+6	; 0x06
 536:	80 83       	st	Z, r24
 538:	47 c0       	rjmp	.+142    	; 0x5c8 <DIO_u8GetPinValue+0x140>

        break;

        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
 53a:	a6 e3       	ldi	r26, 0x36	; 54
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e6 e3       	ldi	r30, 0x36	; 54
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	a9 01       	movw	r20, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_u8GetPinValue+0xce>
 552:	55 95       	asr	r21
 554:	47 95       	ror	r20
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_u8GetPinValue+0xca>
 55a:	ca 01       	movw	r24, r20
 55c:	81 70       	andi	r24, 0x01	; 1
 55e:	8c 93       	st	X, r24
 560:	8c 91       	ld	r24, X
 562:	ed 81       	ldd	r30, Y+5	; 0x05
 564:	fe 81       	ldd	r31, Y+6	; 0x06
 566:	80 83       	st	Z, r24
 568:	2f c0       	rjmp	.+94     	; 0x5c8 <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
 56a:	a3 e3       	ldi	r26, 0x33	; 51
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	e3 e3       	ldi	r30, 0x33	; 51
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	88 2f       	mov	r24, r24
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	a9 01       	movw	r20, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_u8GetPinValue+0xfe>
 582:	55 95       	asr	r21
 584:	47 95       	ror	r20
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_u8GetPinValue+0xfa>
 58a:	ca 01       	movw	r24, r20
 58c:	81 70       	andi	r24, 0x01	; 1
 58e:	8c 93       	st	X, r24
 590:	8c 91       	ld	r24, X
 592:	ed 81       	ldd	r30, Y+5	; 0x05
 594:	fe 81       	ldd	r31, Y+6	; 0x06
 596:	80 83       	st	Z, r24
 598:	17 c0       	rjmp	.+46     	; 0x5c8 <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
 59a:	a0 e3       	ldi	r26, 0x30	; 48
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e0 e3       	ldi	r30, 0x30	; 48
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8GetPinValue+0x12e>
 5b2:	55 95       	asr	r21
 5b4:	47 95       	ror	r20
 5b6:	8a 95       	dec	r24
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8GetPinValue+0x12a>
 5ba:	ca 01       	movw	r24, r20
 5bc:	81 70       	andi	r24, 0x01	; 1
 5be:	8c 93       	st	X, r24
 5c0:	8c 91       	ld	r24, X
 5c2:	ed 81       	ldd	r30, Y+5	; 0x05
 5c4:	fe 81       	ldd	r31, Y+6	; 0x06
 5c6:	80 83       	st	Z, r24
        break;
     }

    }
    return Local_u8Error;
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5ca:	28 96       	adiw	r28, 0x08	; 8
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	cf 91       	pop	r28
 5d8:	df 91       	pop	r29
 5da:	08 95       	ret

000005dc <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
 5dc:	df 93       	push	r29
 5de:	cf 93       	push	r28
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <DIO_u8SetPortDirection+0x6>
 5e2:	0f 92       	push	r0
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5ec:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	cf 91       	pop	r28
 5fc:	df 91       	pop	r29
 5fe:	08 95       	ret

00000600 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
 600:	df 93       	push	r29
 602:	cf 93       	push	r28
 604:	00 d0       	rcall	.+0      	; 0x606 <DIO_u8SetPortnValue+0x6>
 606:	00 d0       	rcall	.+0      	; 0x608 <DIO_u8SetPortnValue+0x8>
 608:	0f 92       	push	r0
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	8a 83       	std	Y+2, r24	; 0x02
 610:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 612:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	84 30       	cpi	r24, 0x04	; 4
 618:	18 f0       	brcs	.+6      	; 0x620 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	32 c0       	rjmp	.+100    	; 0x684 <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	3d 83       	std	Y+5, r19	; 0x05
 628:	2c 83       	std	Y+4, r18	; 0x04
 62a:	8c 81       	ldd	r24, Y+4	; 0x04
 62c:	9d 81       	ldd	r25, Y+5	; 0x05
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	91 05       	cpc	r25, r1
 632:	d1 f0       	breq	.+52     	; 0x668 <DIO_u8SetPortnValue+0x68>
 634:	2c 81       	ldd	r18, Y+4	; 0x04
 636:	3d 81       	ldd	r19, Y+5	; 0x05
 638:	22 30       	cpi	r18, 0x02	; 2
 63a:	31 05       	cpc	r19, r1
 63c:	2c f4       	brge	.+10     	; 0x648 <DIO_u8SetPortnValue+0x48>
 63e:	8c 81       	ldd	r24, Y+4	; 0x04
 640:	9d 81       	ldd	r25, Y+5	; 0x05
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	61 f0       	breq	.+24     	; 0x65e <DIO_u8SetPortnValue+0x5e>
 646:	1e c0       	rjmp	.+60     	; 0x684 <DIO_u8SetPortnValue+0x84>
 648:	2c 81       	ldd	r18, Y+4	; 0x04
 64a:	3d 81       	ldd	r19, Y+5	; 0x05
 64c:	22 30       	cpi	r18, 0x02	; 2
 64e:	31 05       	cpc	r19, r1
 650:	81 f0       	breq	.+32     	; 0x672 <DIO_u8SetPortnValue+0x72>
 652:	8c 81       	ldd	r24, Y+4	; 0x04
 654:	9d 81       	ldd	r25, Y+5	; 0x05
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	91 05       	cpc	r25, r1
 65a:	81 f0       	breq	.+32     	; 0x67c <DIO_u8SetPortnValue+0x7c>
 65c:	13 c0       	rjmp	.+38     	; 0x684 <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
 65e:	eb e3       	ldi	r30, 0x3B	; 59
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	80 83       	st	Z, r24
 666:	0e c0       	rjmp	.+28     	; 0x684 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
 668:	e8 e3       	ldi	r30, 0x38	; 56
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	80 83       	st	Z, r24
 670:	09 c0       	rjmp	.+18     	; 0x684 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
 672:	e5 e3       	ldi	r30, 0x35	; 53
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	80 83       	st	Z, r24
 67a:	04 c0       	rjmp	.+8      	; 0x684 <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
 67c:	e2 e3       	ldi	r30, 0x32	; 50
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 684:	89 81       	ldd	r24, Y+1	; 0x01
}
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	cf 91       	pop	r28
 692:	df 91       	pop	r29
 694:	08 95       	ret

00000696 <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
 696:	df 93       	push	r29
 698:	cf 93       	push	r28
 69a:	00 d0       	rcall	.+0      	; 0x69c <DIO_u8GetPortnValue+0x6>
 69c:	00 d0       	rcall	.+0      	; 0x69e <DIO_u8GetPortnValue+0x8>
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_u8GetPortnValue+0xa>
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
 6a4:	8a 83       	std	Y+2, r24	; 0x02
 6a6:	7c 83       	std	Y+4, r23	; 0x04
 6a8:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 6aa:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
 6ac:	8a 81       	ldd	r24, Y+2	; 0x02
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	18 f0       	brcs	.+6      	; 0x6b8 <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	3a c0       	rjmp	.+116    	; 0x72c <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	3e 83       	std	Y+6, r19	; 0x06
 6c0:	2d 83       	std	Y+5, r18	; 0x05
 6c2:	8d 81       	ldd	r24, Y+5	; 0x05
 6c4:	9e 81       	ldd	r25, Y+6	; 0x06
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	91 05       	cpc	r25, r1
 6ca:	e1 f0       	breq	.+56     	; 0x704 <DIO_u8GetPortnValue+0x6e>
 6cc:	2d 81       	ldd	r18, Y+5	; 0x05
 6ce:	3e 81       	ldd	r19, Y+6	; 0x06
 6d0:	22 30       	cpi	r18, 0x02	; 2
 6d2:	31 05       	cpc	r19, r1
 6d4:	2c f4       	brge	.+10     	; 0x6e0 <DIO_u8GetPortnValue+0x4a>
 6d6:	8d 81       	ldd	r24, Y+5	; 0x05
 6d8:	9e 81       	ldd	r25, Y+6	; 0x06
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <DIO_u8GetPortnValue+0x60>
 6de:	26 c0       	rjmp	.+76     	; 0x72c <DIO_u8GetPortnValue+0x96>
 6e0:	2d 81       	ldd	r18, Y+5	; 0x05
 6e2:	3e 81       	ldd	r19, Y+6	; 0x06
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	31 05       	cpc	r19, r1
 6e8:	a1 f0       	breq	.+40     	; 0x712 <DIO_u8GetPortnValue+0x7c>
 6ea:	8d 81       	ldd	r24, Y+5	; 0x05
 6ec:	9e 81       	ldd	r25, Y+6	; 0x06
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	91 05       	cpc	r25, r1
 6f2:	b1 f0       	breq	.+44     	; 0x720 <DIO_u8GetPortnValue+0x8a>
 6f4:	1b c0       	rjmp	.+54     	; 0x72c <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
 6f6:	e9 e3       	ldi	r30, 0x39	; 57
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	eb 81       	ldd	r30, Y+3	; 0x03
 6fe:	fc 81       	ldd	r31, Y+4	; 0x04
 700:	80 83       	st	Z, r24
 702:	14 c0       	rjmp	.+40     	; 0x72c <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
 704:	e6 e3       	ldi	r30, 0x36	; 54
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	eb 81       	ldd	r30, Y+3	; 0x03
 70c:	fc 81       	ldd	r31, Y+4	; 0x04
 70e:	80 83       	st	Z, r24
 710:	0d c0       	rjmp	.+26     	; 0x72c <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
 712:	e3 e3       	ldi	r30, 0x33	; 51
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	eb 81       	ldd	r30, Y+3	; 0x03
 71a:	fc 81       	ldd	r31, Y+4	; 0x04
 71c:	80 83       	st	Z, r24
 71e:	06 c0       	rjmp	.+12     	; 0x72c <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
 720:	e0 e3       	ldi	r30, 0x30	; 48
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	eb 81       	ldd	r30, Y+3	; 0x03
 728:	fc 81       	ldd	r31, Y+4	; 0x04
 72a:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 72c:	89 81       	ldd	r24, Y+1	; 0x01
}
 72e:	26 96       	adiw	r28, 0x06	; 6
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <SWI_u8Init>:
/*																					 */
/* Inputs : Void															         */
/* Outputs: u8Error -> Error State													 */
/*																					 */

u8 SWI_u8Init(void) {
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	00 d0       	rcall	.+0      	; 0x746 <SWI_u8Init+0x6>
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8ErrorState = ERROR_OK ;
 74a:	1a 82       	std	Y+2, r1	; 0x02


			for (u8 count = 0 ; count < SSD_NUMBER_OF_SWI ; count ++){
 74c:	19 82       	std	Y+1, r1	; 0x01
 74e:	11 c0       	rjmp	.+34     	; 0x772 <SWI_u8Init+0x32>

				if ( DIO_u8SetPinDirection( SWI_Au8ArrayToSWIPin[count] , SWI_PIN_DIR_INPUT  ) ){
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	88 2f       	mov	r24, r24
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	fc 01       	movw	r30, r24
 758:	e0 5a       	subi	r30, 0xA0	; 160
 75a:	ff 4f       	sbci	r31, 0xFF	; 255
 75c:	80 81       	ld	r24, Z
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDirection>
 764:	88 23       	and	r24, r24
 766:	11 f0       	breq	.+4      	; 0x76c <SWI_u8Init+0x2c>
					Local_u8ErrorState = ERROR_NOK ;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	8a 83       	std	Y+2, r24	; 0x02
u8 SWI_u8Init(void) {

	u8 Local_u8ErrorState = ERROR_OK ;


			for (u8 count = 0 ; count < SSD_NUMBER_OF_SWI ; count ++){
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	8f 5f       	subi	r24, 0xFF	; 255
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	89 81       	ldd	r24, Y+1	; 0x01
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	60 f3       	brcs	.-40     	; 0x750 <SWI_u8Init+0x10>
					Local_u8ErrorState = ERROR_NOK ;
				}

			}

	return Local_u8ErrorState ;
 778:	8a 81       	ldd	r24, Y+2	; 0x02

}
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <SWI_u8GetSWIState>:
/* Inputs : Copy_u8PortNB    -> Port No of the desired Seven Segments 			                 */
/* 			Copy_u8DisplayNB -> The Number to be Displayed										 */
/* Outputs: u8Error -> Error State													             */
/*																					             */

u8 SWI_u8GetSWIState(u8 Copy_u8SWINb , u8 * Copy_u8State) {
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <SWI_u8GetSWIState+0x6>
 78a:	00 d0       	rcall	.+0      	; 0x78c <SWI_u8GetSWIState+0x8>
 78c:	0f 92       	push	r0
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	8b 83       	std	Y+3, r24	; 0x03
 794:	7d 83       	std	Y+5, r23	; 0x05
 796:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_u8ErrorState = ERROR_OK ;
 798:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Temp ;



	if ( SWI_Au8ArraySWIType[Copy_u8SWINb-1] == SWI_PULL_DOWN ){
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	88 2f       	mov	r24, r24
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	fc 01       	movw	r30, r24
 7a4:	ee 59       	subi	r30, 0x9E	; 158
 7a6:	ff 4f       	sbci	r31, 0xFF	; 255
 7a8:	80 81       	ld	r24, Z
 7aa:	83 30       	cpi	r24, 0x03	; 3
 7ac:	11 f5       	brne	.+68     	; 0x7f2 <SWI_u8GetSWIState+0x6e>

		if( DIO_u8GetPinValue( SWI_Au8ArrayToSWIPin[Copy_u8SWINb-1] , &Local_u8Temp ) ){
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	88 2f       	mov	r24, r24
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	fc 01       	movw	r30, r24
 7b8:	e0 5a       	subi	r30, 0xA0	; 160
 7ba:	ff 4f       	sbci	r31, 0xFF	; 255
 7bc:	80 81       	ld	r24, Z
 7be:	9e 01       	movw	r18, r28
 7c0:	2e 5f       	subi	r18, 0xFE	; 254
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	b9 01       	movw	r22, r18
 7c6:	0e 94 44 02 	call	0x488	; 0x488 <DIO_u8GetPinValue>
 7ca:	88 23       	and	r24, r24
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <SWI_u8GetSWIState+0x4e>
			Local_u8ErrorState = ERROR_NOK;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	89 83       	std	Y+1, r24	; 0x01
		}

		if (! Local_u8Temp){
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	88 23       	and	r24, r24
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <SWI_u8GetSWIState+0x5e>
			*Copy_u8State = SWI_REL ;
 7d8:	ec 81       	ldd	r30, Y+4	; 0x04
 7da:	fd 81       	ldd	r31, Y+5	; 0x05
 7dc:	86 e0       	ldi	r24, 0x06	; 6
 7de:	80 83       	st	Z, r24
 7e0:	33 c0       	rjmp	.+102    	; 0x848 <SWI_u8GetSWIState+0xc4>
		}

		else if (Local_u8Temp){
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	88 23       	and	r24, r24
 7e6:	81 f1       	breq	.+96     	; 0x848 <SWI_u8GetSWIState+0xc4>
			*Copy_u8State = SWI_PRS ;
 7e8:	ec 81       	ldd	r30, Y+4	; 0x04
 7ea:	fd 81       	ldd	r31, Y+5	; 0x05
 7ec:	85 e0       	ldi	r24, 0x05	; 5
 7ee:	80 83       	st	Z, r24
 7f0:	2b c0       	rjmp	.+86     	; 0x848 <SWI_u8GetSWIState+0xc4>
		}

	}

	else if ( SWI_Au8ArraySWIType[Copy_u8SWINb-1] == SWI_PULL_UP ){
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	88 2f       	mov	r24, r24
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	fc 01       	movw	r30, r24
 7fc:	ee 59       	subi	r30, 0x9E	; 158
 7fe:	ff 4f       	sbci	r31, 0xFF	; 255
 800:	80 81       	ld	r24, Z
 802:	84 30       	cpi	r24, 0x04	; 4
 804:	09 f5       	brne	.+66     	; 0x848 <SWI_u8GetSWIState+0xc4>

		if( DIO_u8GetPinValue( SWI_Au8ArrayToSWIPin[Copy_u8SWINb-1] , &Local_u8Temp ) ){
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	88 2f       	mov	r24, r24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	fc 01       	movw	r30, r24
 810:	e0 5a       	subi	r30, 0xA0	; 160
 812:	ff 4f       	sbci	r31, 0xFF	; 255
 814:	80 81       	ld	r24, Z
 816:	9e 01       	movw	r18, r28
 818:	2e 5f       	subi	r18, 0xFE	; 254
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	b9 01       	movw	r22, r18
 81e:	0e 94 44 02 	call	0x488	; 0x488 <DIO_u8GetPinValue>
 822:	88 23       	and	r24, r24
 824:	11 f0       	breq	.+4      	; 0x82a <SWI_u8GetSWIState+0xa6>
			Local_u8ErrorState = ERROR_NOK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
		}

		if (! Local_u8Temp){
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	88 23       	and	r24, r24
 82e:	29 f4       	brne	.+10     	; 0x83a <SWI_u8GetSWIState+0xb6>
			*Copy_u8State = SWI_PRS ;
 830:	ec 81       	ldd	r30, Y+4	; 0x04
 832:	fd 81       	ldd	r31, Y+5	; 0x05
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	80 83       	st	Z, r24
 838:	07 c0       	rjmp	.+14     	; 0x848 <SWI_u8GetSWIState+0xc4>
		}

		else if (Local_u8Temp){
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	88 23       	and	r24, r24
 83e:	21 f0       	breq	.+8      	; 0x848 <SWI_u8GetSWIState+0xc4>
			*Copy_u8State = SWI_REL ;
 840:	ec 81       	ldd	r30, Y+4	; 0x04
 842:	fd 81       	ldd	r31, Y+5	; 0x05
 844:	86 e0       	ldi	r24, 0x06	; 6
 846:	80 83       	st	Z, r24

	}



	return Local_u8ErrorState ;
 848:	89 81       	ldd	r24, Y+1	; 0x01
}
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	08 95       	ret

0000085a <main>:
#include "DIO_interface.h"

#include "SWI_interface.h"
#include <util/delay.h>

int main(void){
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	0f 92       	push	r0
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62

	/* Set direction */
	DIO_voidInit();
 864:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	SWI_u8Init();
 868:	0e 94 a0 03 	call	0x740	; 0x740 <SWI_u8Init>
	//u8 Local_SWReadVal2;

	while(1)
	{

		SWI_u8GetSWIState(1,&Local_SWReadVal1);
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	9e 01       	movw	r18, r28
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	b9 01       	movw	r22, r18
 876:	0e 94 c2 03 	call	0x784	; 0x784 <SWI_u8GetSWIState>

		if(Local_SWReadVal1 == SWI_PRS)
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	85 30       	cpi	r24, 0x05	; 5
 87e:	29 f4       	brne	.+10     	; 0x88a <__stack+0x2b>
		{
			DIO_u8SetPinValue(DIO_u8_PIN5,DIO_u8_PIN_HIGH);
 880:	85 e0       	ldi	r24, 0x05	; 5
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinValue>
 888:	f1 cf       	rjmp	.-30     	; 0x86c <__stack+0xd>
		}
		else if ( Local_SWReadVal1 == SWI_REL)
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	86 30       	cpi	r24, 0x06	; 6
 88e:	71 f7       	brne	.-36     	; 0x86c <__stack+0xd>
		{
			DIO_u8SetPinValue(DIO_u8_PIN5,DIO_u8_PIN_LOW);
 890:	85 e0       	ldi	r24, 0x05	; 5
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinValue>
 898:	e9 cf       	rjmp	.-46     	; 0x86c <__stack+0xd>

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
