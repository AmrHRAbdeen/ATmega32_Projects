
SSD_driver_Assaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00001c34  00001cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800122  00800122  00001d8a  2**0
                  ALLOC
  3 .stab         00001458  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bbf  00000000  00000000  000031e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000084ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 0b 	call	0x16de	; 0x16de <main>
      8a:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:




void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f e1       	ldi	r24, 0x1F	; 31
     b5c:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
     b6a:	eb e3       	ldi	r30, 0x3B	; 59
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	81 e2       	ldi	r24, 0x21	; 33
     b70:	80 83       	st	Z, r24
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
     b78:	e5 e3       	ldi	r30, 0x35	; 53
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
     b7e:	e2 e3       	ldi	r30, 0x32	; 50
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1
                            DIO_u8_PIN31_VALUE
     );


  return;
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	27 97       	sbiw	r28, 0x07	; 7
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	8c 83       	std	Y+4, r24	; 0x04
     ba0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
     ba2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
     ba4:	8c 81       	ldd	r24, Y+4	; 0x04
     ba6:	80 32       	cpi	r24, 0x20	; 32
     ba8:	30 f4       	brcc	.+12     	; 0xbb6 <DIO_u8SetPinDirection+0x2c>
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	31 f0       	breq	.+12     	; 0xbbc <DIO_u8SetPinDirection+0x32>
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	88 23       	and	r24, r24
     bb4:	19 f0       	breq	.+6      	; 0xbbc <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8b 83       	std	Y+3, r24	; 0x03
     bba:	ce c0       	rjmp	.+412    	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	87 70       	andi	r24, 0x07	; 7
     bc0:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	86 95       	lsr	r24
     bc6:	86 95       	lsr	r24
     bc8:	86 95       	lsr	r24
     bca:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3f 83       	std	Y+7, r19	; 0x07
     bd4:	2e 83       	std	Y+6, r18	; 0x06
     bd6:	6e 81       	ldd	r22, Y+6	; 0x06
     bd8:	7f 81       	ldd	r23, Y+7	; 0x07
     bda:	61 30       	cpi	r22, 0x01	; 1
     bdc:	71 05       	cpc	r23, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <DIO_u8SetPinDirection+0x58>
     be0:	41 c0       	rjmp	.+130    	; 0xc64 <DIO_u8SetPinDirection+0xda>
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
     be4:	9f 81       	ldd	r25, Y+7	; 0x07
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	91 05       	cpc	r25, r1
     bea:	34 f4       	brge	.+12     	; 0xbf8 <DIO_u8SetPinDirection+0x6e>
     bec:	2e 81       	ldd	r18, Y+6	; 0x06
     bee:	3f 81       	ldd	r19, Y+7	; 0x07
     bf0:	21 15       	cp	r18, r1
     bf2:	31 05       	cpc	r19, r1
     bf4:	71 f0       	breq	.+28     	; 0xc12 <DIO_u8SetPinDirection+0x88>
     bf6:	b0 c0       	rjmp	.+352    	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
     bf8:	6e 81       	ldd	r22, Y+6	; 0x06
     bfa:	7f 81       	ldd	r23, Y+7	; 0x07
     bfc:	62 30       	cpi	r22, 0x02	; 2
     bfe:	71 05       	cpc	r23, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <DIO_u8SetPinDirection+0x7a>
     c02:	59 c0       	rjmp	.+178    	; 0xcb6 <DIO_u8SetPinDirection+0x12c>
     c04:	8e 81       	ldd	r24, Y+6	; 0x06
     c06:	9f 81       	ldd	r25, Y+7	; 0x07
     c08:	83 30       	cpi	r24, 0x03	; 3
     c0a:	91 05       	cpc	r25, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <DIO_u8SetPinDirection+0x86>
     c0e:	7c c0       	rjmp	.+248    	; 0xd08 <DIO_u8SetPinDirection+0x17e>
     c10:	a3 c0       	rjmp	.+326    	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	88 23       	and	r24, r24
     c16:	21 f0       	breq	.+8      	; 0xc20 <DIO_u8SetPinDirection+0x96>
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	09 f0       	breq	.+2      	; 0xc20 <DIO_u8SetPinDirection+0x96>
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	aa e3       	ldi	r26, 0x3A	; 58
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ea e3       	ldi	r30, 0x3A	; 58
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_u8SetPinDirection+0xb2>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	2a 95       	dec	r18
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_u8SetPinDirection+0xae>
     c40:	80 95       	com	r24
     c42:	48 23       	and	r20, r24
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	b9 01       	movw	r22, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_u8SetPinDirection+0xce>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	8a 95       	dec	r24
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_u8SetPinDirection+0xca>
     c5c:	cb 01       	movw	r24, r22
     c5e:	84 2b       	or	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	7a c0       	rjmp	.+244    	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	88 23       	and	r24, r24
     c68:	21 f0       	breq	.+8      	; 0xc72 <DIO_u8SetPinDirection+0xe8>
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <DIO_u8SetPinDirection+0xe8>
     c70:	1d 82       	std	Y+5, r1	; 0x05
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_u8SetPinDirection+0x104>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	2a 95       	dec	r18
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_u8SetPinDirection+0x100>
     c92:	80 95       	com	r24
     c94:	48 23       	and	r20, r24
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	b9 01       	movw	r22, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_u8SetPinDirection+0x120>
     ca6:	66 0f       	add	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	8a 95       	dec	r24
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_u8SetPinDirection+0x11c>
     cae:	cb 01       	movw	r24, r22
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	51 c0       	rjmp	.+162    	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	88 23       	and	r24, r24
     cba:	21 f0       	breq	.+8      	; 0xcc4 <DIO_u8SetPinDirection+0x13a>
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <DIO_u8SetPinDirection+0x13a>
     cc2:	1d 82       	std	Y+5, r1	; 0x05
     cc4:	a4 e3       	ldi	r26, 0x34	; 52
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e4 e3       	ldi	r30, 0x34	; 52
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_u8SetPinDirection+0x156>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	2a 95       	dec	r18
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_u8SetPinDirection+0x152>
     ce4:	80 95       	com	r24
     ce6:	48 23       	and	r20, r24
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	b9 01       	movw	r22, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_u8SetPinDirection+0x172>
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	8a 95       	dec	r24
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_u8SetPinDirection+0x16e>
     d00:	cb 01       	movw	r24, r22
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	28 c0       	rjmp	.+80     	; 0xd58 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	88 23       	and	r24, r24
     d0c:	21 f0       	breq	.+8      	; 0xd16 <DIO_u8SetPinDirection+0x18c>
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <DIO_u8SetPinDirection+0x18c>
     d14:	1d 82       	std	Y+5, r1	; 0x05
     d16:	a1 e3       	ldi	r26, 0x31	; 49
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e3       	ldi	r30, 0x31	; 49
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_u8SetPinDirection+0x1a8>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	2a 95       	dec	r18
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_u8SetPinDirection+0x1a4>
     d36:	80 95       	com	r24
     d38:	48 23       	and	r20, r24
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	b9 01       	movw	r22, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_u8SetPinDirection+0x1c4>
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	8a 95       	dec	r24
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_u8SetPinDirection+0x1c0>
     d52:	cb 01       	movw	r24, r22
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d5a:	27 96       	adiw	r28, 0x07	; 7
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <DIO_u8SetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
/*	OUTPUT:                                              */
/*			return ERROR STATE                           */
/*********************************************************/
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	27 97       	sbiw	r28, 0x07	; 7
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	8c 83       	std	Y+4, r24	; 0x04
     d82:	6d 83       	std	Y+5, r22	; 0x05

   u8 Local_u8Error=ERROR_OK;
     d84:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	80 32       	cpi	r24, 0x20	; 32
     d8a:	30 f4       	brcc	.+12     	; 0xd98 <DIO_u8SetPinValue+0x2c>
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	31 f0       	breq	.+12     	; 0xd9e <DIO_u8SetPinValue+0x32>
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	88 23       	and	r24, r24
     d96:	19 f0       	breq	.+6      	; 0xd9e <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8b 83       	std	Y+3, r24	; 0x03
     d9c:	ce c0       	rjmp	.+412    	; 0xf3a <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	87 70       	andi	r24, 0x07	; 7
     da2:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	86 95       	lsr	r24
     da8:	86 95       	lsr	r24
     daa:	86 95       	lsr	r24
     dac:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3f 83       	std	Y+7, r19	; 0x07
     db6:	2e 83       	std	Y+6, r18	; 0x06
     db8:	6e 81       	ldd	r22, Y+6	; 0x06
     dba:	7f 81       	ldd	r23, Y+7	; 0x07
     dbc:	61 30       	cpi	r22, 0x01	; 1
     dbe:	71 05       	cpc	r23, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <DIO_u8SetPinValue+0x58>
     dc2:	41 c0       	rjmp	.+130    	; 0xe46 <DIO_u8SetPinValue+0xda>
     dc4:	8e 81       	ldd	r24, Y+6	; 0x06
     dc6:	9f 81       	ldd	r25, Y+7	; 0x07
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	91 05       	cpc	r25, r1
     dcc:	34 f4       	brge	.+12     	; 0xdda <DIO_u8SetPinValue+0x6e>
     dce:	2e 81       	ldd	r18, Y+6	; 0x06
     dd0:	3f 81       	ldd	r19, Y+7	; 0x07
     dd2:	21 15       	cp	r18, r1
     dd4:	31 05       	cpc	r19, r1
     dd6:	71 f0       	breq	.+28     	; 0xdf4 <DIO_u8SetPinValue+0x88>
     dd8:	b0 c0       	rjmp	.+352    	; 0xf3a <DIO_u8SetPinValue+0x1ce>
     dda:	6e 81       	ldd	r22, Y+6	; 0x06
     ddc:	7f 81       	ldd	r23, Y+7	; 0x07
     dde:	62 30       	cpi	r22, 0x02	; 2
     de0:	71 05       	cpc	r23, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <DIO_u8SetPinValue+0x7a>
     de4:	59 c0       	rjmp	.+178    	; 0xe98 <DIO_u8SetPinValue+0x12c>
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	91 05       	cpc	r25, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <DIO_u8SetPinValue+0x86>
     df0:	7c c0       	rjmp	.+248    	; 0xeea <DIO_u8SetPinValue+0x17e>
     df2:	a3 c0       	rjmp	.+326    	; 0xf3a <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	88 23       	and	r24, r24
     df8:	21 f0       	breq	.+8      	; 0xe02 <DIO_u8SetPinValue+0x96>
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <DIO_u8SetPinValue+0x96>
     e00:	1d 82       	std	Y+5, r1	; 0x05
     e02:	ab e3       	ldi	r26, 0x3B	; 59
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	eb e3       	ldi	r30, 0x3B	; 59
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_u8SetPinValue+0xb2>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	2a 95       	dec	r18
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_u8SetPinValue+0xae>
     e22:	80 95       	com	r24
     e24:	48 23       	and	r20, r24
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	b9 01       	movw	r22, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinValue+0xce>
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	8a 95       	dec	r24
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinValue+0xca>
     e3e:	cb 01       	movw	r24, r22
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	7a c0       	rjmp	.+244    	; 0xf3a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	88 23       	and	r24, r24
     e4a:	21 f0       	breq	.+8      	; 0xe54 <DIO_u8SetPinValue+0xe8>
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_u8SetPinValue+0xe8>
     e52:	1d 82       	std	Y+5, r1	; 0x05
     e54:	a8 e3       	ldi	r26, 0x38	; 56
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e8 e3       	ldi	r30, 0x38	; 56
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_u8SetPinValue+0x104>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	2a 95       	dec	r18
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_u8SetPinValue+0x100>
     e74:	80 95       	com	r24
     e76:	48 23       	and	r20, r24
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	b9 01       	movw	r22, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_u8SetPinValue+0x120>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_u8SetPinValue+0x11c>
     e90:	cb 01       	movw	r24, r22
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	51 c0       	rjmp	.+162    	; 0xf3a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	88 23       	and	r24, r24
     e9c:	21 f0       	breq	.+8      	; 0xea6 <DIO_u8SetPinValue+0x13a>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <DIO_u8SetPinValue+0x13a>
     ea4:	1d 82       	std	Y+5, r1	; 0x05
     ea6:	a5 e3       	ldi	r26, 0x35	; 53
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e3       	ldi	r30, 0x35	; 53
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_u8SetPinValue+0x156>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	2a 95       	dec	r18
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_u8SetPinValue+0x152>
     ec6:	80 95       	com	r24
     ec8:	48 23       	and	r20, r24
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	b9 01       	movw	r22, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_u8SetPinValue+0x172>
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	8a 95       	dec	r24
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_u8SetPinValue+0x16e>
     ee2:	cb 01       	movw	r24, r22
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	28 c0       	rjmp	.+80     	; 0xf3a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	88 23       	and	r24, r24
     eee:	21 f0       	breq	.+8      	; 0xef8 <DIO_u8SetPinValue+0x18c>
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <DIO_u8SetPinValue+0x18c>
     ef6:	1d 82       	std	Y+5, r1	; 0x05
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_u8SetPinValue+0x1a8>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	2a 95       	dec	r18
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_u8SetPinValue+0x1a4>
     f18:	80 95       	com	r24
     f1a:	48 23       	and	r20, r24
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b9 01       	movw	r22, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_u8SetPinValue+0x1c4>
     f2c:	66 0f       	add	r22, r22
     f2e:	77 1f       	adc	r23, r23
     f30:	8a 95       	dec	r24
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_u8SetPinValue+0x1c0>
     f34:	cb 01       	movw	r24, r22
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f3c:	27 96       	adiw	r28, 0x07	; 7
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	28 97       	sbiw	r28, 0x08	; 8
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	8c 83       	std	Y+4, r24	; 0x04
     f64:	7e 83       	std	Y+6, r23	; 0x06
     f66:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
     f68:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	80 32       	cpi	r24, 0x20	; 32
     f6e:	20 f4       	brcc	.+8      	; 0xf78 <DIO_u8GetPinValue+0x2a>
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	19 f4       	brne	.+6      	; 0xf7e <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	88 c0       	rjmp	.+272    	; 0x108e <DIO_u8GetPinValue+0x140>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	87 70       	andi	r24, 0x07	; 7
     f82:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	86 95       	lsr	r24
     f88:	86 95       	lsr	r24
     f8a:	86 95       	lsr	r24
     f8c:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	38 87       	std	Y+8, r19	; 0x08
     f96:	2f 83       	std	Y+7, r18	; 0x07
     f98:	4f 81       	ldd	r20, Y+7	; 0x07
     f9a:	58 85       	ldd	r21, Y+8	; 0x08
     f9c:	41 30       	cpi	r20, 0x01	; 1
     f9e:	51 05       	cpc	r21, r1
     fa0:	79 f1       	breq	.+94     	; 0x1000 <DIO_u8GetPinValue+0xb2>
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	98 85       	ldd	r25, Y+8	; 0x08
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	91 05       	cpc	r25, r1
     faa:	34 f4       	brge	.+12     	; 0xfb8 <DIO_u8GetPinValue+0x6a>
     fac:	2f 81       	ldd	r18, Y+7	; 0x07
     fae:	38 85       	ldd	r19, Y+8	; 0x08
     fb0:	21 15       	cp	r18, r1
     fb2:	31 05       	cpc	r19, r1
     fb4:	69 f0       	breq	.+26     	; 0xfd0 <DIO_u8GetPinValue+0x82>
     fb6:	6b c0       	rjmp	.+214    	; 0x108e <DIO_u8GetPinValue+0x140>
     fb8:	4f 81       	ldd	r20, Y+7	; 0x07
     fba:	58 85       	ldd	r21, Y+8	; 0x08
     fbc:	42 30       	cpi	r20, 0x02	; 2
     fbe:	51 05       	cpc	r21, r1
     fc0:	b9 f1       	breq	.+110    	; 0x1030 <DIO_u8GetPinValue+0xe2>
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <DIO_u8GetPinValue+0x80>
     fcc:	49 c0       	rjmp	.+146    	; 0x1060 <DIO_u8GetPinValue+0x112>
     fce:	5f c0       	rjmp	.+190    	; 0x108e <DIO_u8GetPinValue+0x140>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
     fd0:	a9 e3       	ldi	r26, 0x39	; 57
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e9 e3       	ldi	r30, 0x39	; 57
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8GetPinValue+0x9e>
     fe8:	55 95       	asr	r21
     fea:	47 95       	ror	r20
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8GetPinValue+0x9a>
     ff0:	ca 01       	movw	r24, r20
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
     ff6:	8c 91       	ld	r24, X
     ff8:	ed 81       	ldd	r30, Y+5	; 0x05
     ffa:	fe 81       	ldd	r31, Y+6	; 0x06
     ffc:	80 83       	st	Z, r24
     ffe:	47 c0       	rjmp	.+142    	; 0x108e <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
    1000:	a6 e3       	ldi	r26, 0x36	; 54
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e3       	ldi	r30, 0x36	; 54
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_u8GetPinValue+0xce>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_u8GetPinValue+0xca>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	8c 93       	st	X, r24
    1026:	8c 91       	ld	r24, X
    1028:	ed 81       	ldd	r30, Y+5	; 0x05
    102a:	fe 81       	ldd	r31, Y+6	; 0x06
    102c:	80 83       	st	Z, r24
    102e:	2f c0       	rjmp	.+94     	; 0x108e <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
    1030:	a3 e3       	ldi	r26, 0x33	; 51
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e3 e3       	ldi	r30, 0x33	; 51
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8GetPinValue+0xfe>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8GetPinValue+0xfa>
    1050:	ca 01       	movw	r24, r20
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	8c 93       	st	X, r24
    1056:	8c 91       	ld	r24, X
    1058:	ed 81       	ldd	r30, Y+5	; 0x05
    105a:	fe 81       	ldd	r31, Y+6	; 0x06
    105c:	80 83       	st	Z, r24
    105e:	17 c0       	rjmp	.+46     	; 0x108e <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
    1060:	a0 e3       	ldi	r26, 0x30	; 48
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e0 e3       	ldi	r30, 0x30	; 48
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a9 01       	movw	r20, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_u8GetPinValue+0x12e>
    1078:	55 95       	asr	r21
    107a:	47 95       	ror	r20
    107c:	8a 95       	dec	r24
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_u8GetPinValue+0x12a>
    1080:	ca 01       	movw	r24, r20
    1082:	81 70       	andi	r24, 0x01	; 1
    1084:	8c 93       	st	X, r24
    1086:	8c 91       	ld	r24, X
    1088:	ed 81       	ldd	r30, Y+5	; 0x05
    108a:	fe 81       	ldd	r31, Y+6	; 0x06
    108c:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1090:	28 96       	adiw	r28, 0x08	; 8
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_u8SetPortDirection+0x6>
    10a8:	0f 92       	push	r0
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    10b2:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_u8SetPortnValue+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <DIO_u8SetPortnValue+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    10d8:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	84 30       	cpi	r24, 0x04	; 4
    10de:	18 f0       	brcs	.+6      	; 0x10e6 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	32 c0       	rjmp	.+100    	; 0x114a <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	d1 f0       	breq	.+52     	; 0x112e <DIO_u8SetPortnValue+0x68>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <DIO_u8SetPortnValue+0x48>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	61 f0       	breq	.+24     	; 0x1124 <DIO_u8SetPortnValue+0x5e>
    110c:	1e c0       	rjmp	.+60     	; 0x114a <DIO_u8SetPortnValue+0x84>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <DIO_u8SetPortnValue+0x72>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <DIO_u8SetPortnValue+0x7c>
    1122:	13 c0       	rjmp	.+38     	; 0x114a <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	80 83       	st	Z, r24
    112c:	0e c0       	rjmp	.+28     	; 0x114a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	80 83       	st	Z, r24
    1136:	09 c0       	rjmp	.+18     	; 0x114a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	80 83       	st	Z, r24
    1140:	04 c0       	rjmp	.+8      	; 0x114a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_u8GetPortnValue+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <DIO_u8GetPortnValue+0x8>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <DIO_u8GetPortnValue+0xa>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	8a 83       	std	Y+2, r24	; 0x02
    116c:	7c 83       	std	Y+4, r23	; 0x04
    116e:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
    1170:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	18 f0       	brcs	.+6      	; 0x117e <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	3a c0       	rjmp	.+116    	; 0x11f2 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	e1 f0       	breq	.+56     	; 0x11ca <DIO_u8GetPortnValue+0x6e>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_u8GetPortnValue+0x4a>
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <DIO_u8GetPortnValue+0x60>
    11a4:	26 c0       	rjmp	.+76     	; 0x11f2 <DIO_u8GetPortnValue+0x96>
    11a6:	2d 81       	ldd	r18, Y+5	; 0x05
    11a8:	3e 81       	ldd	r19, Y+6	; 0x06
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	a1 f0       	breq	.+40     	; 0x11d8 <DIO_u8GetPortnValue+0x7c>
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	b1 f0       	breq	.+44     	; 0x11e6 <DIO_u8GetPortnValue+0x8a>
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
    11bc:	e9 e3       	ldi	r30, 0x39	; 57
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	eb 81       	ldd	r30, Y+3	; 0x03
    11c4:	fc 81       	ldd	r31, Y+4	; 0x04
    11c6:	80 83       	st	Z, r24
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
    11ca:	e6 e3       	ldi	r30, 0x36	; 54
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	eb 81       	ldd	r30, Y+3	; 0x03
    11d2:	fc 81       	ldd	r31, Y+4	; 0x04
    11d4:	80 83       	st	Z, r24
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
    11d8:	e3 e3       	ldi	r30, 0x33	; 51
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	80 83       	st	Z, r24
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
    11e6:	e0 e3       	ldi	r30, 0x30	; 48
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	eb 81       	ldd	r30, Y+3	; 0x03
    11ee:	fc 81       	ldd	r31, Y+4	; 0x04
    11f0:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	26 96       	adiw	r28, 0x06	; 6
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <SSD_u8SetOn>:
#include "SSD_config.h"
#include "SSD_private.h"


u8 SSD_u8SetOn(u8 Copy_u8SsdNb)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <SSD_u8SetOn+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <SSD_u8SetOn+0x8>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <SSD_u8SetOn+0xa>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8c 83       	std	Y+4, r24	; 0x04
	// check input 
	 u8 local_ErrorState = ERROR_OK;
    1216:	1b 82       	std	Y+3, r1	; 0x03
	 u8 Local_loopIndex = SSD_u8_LOOP_START_INDEX;
    1218:	1a 82       	std	Y+2, r1	; 0x02
	 u8 Local_oldValue = SSD_Au8SetDefaultValues[Copy_u8SsdNb-ARRAY_START_INDEX];
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	fc 01       	movw	r30, r24
    1224:	ea 5d       	subi	r30, 0xDA	; 218
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	80 81       	ld	r24, Z
    122a:	89 83       	std	Y+1, r24	; 0x01

  if(Copy_u8SsdNb > SSD_NO_OF_SSD || Copy_u8SsdNb < ARRAY_START_INDEX ){
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	85 30       	cpi	r24, 0x05	; 5
    1230:	18 f4       	brcc	.+6      	; 0x1238 <SSD_u8SetOn+0x32>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	19 f4       	brne	.+6      	; 0x123e <SSD_u8SetOn+0x38>
    local_ErrorState = ERROR_NOK;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	ab c0       	rjmp	.+342    	; 0x1394 <SSD_u8SetOn+0x18e>
  }else {
    switch(SSD_Au8SetSsdTypes[Copy_u8SsdNb -ARRAY_START_INDEX])
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	fc 01       	movw	r30, r24
    1248:	ee 5d       	subi	r30, 0xDE	; 222
    124a:	fe 4f       	sbci	r31, 0xFE	; 254
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	2d 83       	std	Y+5, r18	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	39 f0       	breq	.+14     	; 0x126c <SSD_u8SetOn+0x66>
    125e:	2d 81       	ldd	r18, Y+5	; 0x05
    1260:	3e 81       	ldd	r19, Y+6	; 0x06
    1262:	21 30       	cpi	r18, 0x01	; 1
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <SSD_u8SetOn+0x64>
    1268:	4a c0       	rjmp	.+148    	; 0x12fe <SSD_u8SetOn+0xf8>
    126a:	92 c0       	rjmp	.+292    	; 0x1390 <SSD_u8SetOn+0x18a>
    {
      case SSD_u8_CATHODE :
      		// set enable pin = 0 ;
            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS -ARRAY_START_INDEX], DIO_u8_PIN_LOW);
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	e1 59       	subi	r30, 0x91	; 145
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
             // set pins default value
             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    128e:	1a 82       	std	Y+2, r1	; 0x02
    1290:	32 c0       	rjmp	.+100    	; 0x12f6 <SSD_u8SetOn+0xf0>
             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbers[Local_oldValue][Local_loopIndex]);
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	ac 01       	movw	r20, r24
    129a:	41 50       	subi	r20, 0x01	; 1
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	ca 01       	movw	r24, r20
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	82 0f       	add	r24, r18
    12b4:	93 1f       	adc	r25, r19
    12b6:	fc 01       	movw	r30, r24
    12b8:	e8 59       	subi	r30, 0x98	; 152
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	48 2f       	mov	r20, r24
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	c9 01       	movw	r24, r18
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	82 1b       	sub	r24, r18
    12da:	93 0b       	sbc	r25, r19
    12dc:	84 0f       	add	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	fc 01       	movw	r30, r24
    12e2:	e8 57       	subi	r30, 0x78	; 120
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	90 81       	ld	r25, Z
    12e8:	86 2f       	mov	r24, r22
    12ea:	69 2f       	mov	r22, r25
    12ec:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
    {
      case SSD_u8_CATHODE :
      		// set enable pin = 0 ;
            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS -ARRAY_START_INDEX], DIO_u8_PIN_LOW);
             // set pins default value
             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	87 30       	cpi	r24, 0x07	; 7
    12fa:	58 f2       	brcs	.-106    	; 0x1292 <SSD_u8SetOn+0x8c>
    12fc:	4b c0       	rjmp	.+150    	; 0x1394 <SSD_u8SetOn+0x18e>
             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbers[Local_oldValue][Local_loopIndex]);
             }
             break;
      case SSD_u8_ANODE :
             // set enable pin = 0 ;
            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS - ARRAY_START_INDEX], DIO_u8_PIN_HIGH);
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e1 59       	subi	r30, 0x91	; 145
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
             // set pins default value
             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    1320:	1a 82       	std	Y+2, r1	; 0x02
    1322:	32 c0       	rjmp	.+100    	; 0x1388 <SSD_u8SetOn+0x182>
             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbersAnode[Local_oldValue][Local_loopIndex]);
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	ac 01       	movw	r20, r24
    132c:	41 50       	subi	r20, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	ca 01       	movw	r24, r20
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	fc 01       	movw	r30, r24
    134a:	e8 59       	subi	r30, 0x98	; 152
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	48 2f       	mov	r20, r24
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	c9 01       	movw	r24, r18
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	82 1b       	sub	r24, r18
    136c:	93 0b       	sbc	r25, r19
    136e:	84 0f       	add	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	fc 01       	movw	r30, r24
    1374:	eb 52       	subi	r30, 0x2B	; 43
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	90 81       	ld	r25, Z
    137a:	86 2f       	mov	r24, r22
    137c:	69 2f       	mov	r22, r25
    137e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
             break;
      case SSD_u8_ANODE :
             // set enable pin = 0 ;
            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS - ARRAY_START_INDEX], DIO_u8_PIN_HIGH);
             // set pins default value
             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	87 30       	cpi	r24, 0x07	; 7
    138c:	58 f2       	brcs	.-106    	; 0x1324 <SSD_u8SetOn+0x11e>
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <SSD_u8SetOn+0x18e>
             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbersAnode[Local_oldValue][Local_loopIndex]);
             }
             break;
       default :
        local_ErrorState = ERROR_NOK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8b 83       	std	Y+3, r24	; 0x03
    }

  }
  SSD_Au8SsdStatus[Copy_u8SsdNb-ARRAY_START_INDEX]=SSD_STATUS_ON;
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	fc 01       	movw	r30, r24
    139e:	e6 5d       	subi	r30, 0xD6	; 214
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 83       	st	Z, r24
  return local_ErrorState;
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    13a8:	26 96       	adiw	r28, 0x06	; 6
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <SSD_u8SetOff>:
/**********************************************************************/

u8 SSD_u8SetOff(u8 Copy_u8SsdNb){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <SSD_u8SetOff+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <SSD_u8SetOff+0x8>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	8a 83       	std	Y+2, r24	; 0x02
	// check input
		 u8 local_ErrorState = ERROR_OK;
    13c8:	19 82       	std	Y+1, r1	; 0x01

	  if(Copy_u8SsdNb > SSD_NO_OF_SSD || Copy_u8SsdNb < ARRAY_START_INDEX )
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	85 30       	cpi	r24, 0x05	; 5
    13ce:	18 f4       	brcc	.+6      	; 0x13d6 <SSD_u8SetOff+0x1c>
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	88 23       	and	r24, r24
    13d4:	19 f4       	brne	.+6      	; 0x13dc <SSD_u8SetOff+0x22>
	  {
	    local_ErrorState = ERROR_NOK;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	3c c0       	rjmp	.+120    	; 0x1454 <SSD_u8SetOff+0x9a>
	  }
	  else
	  {
	    switch(SSD_Au8SetSsdTypes[Copy_u8SsdNb -ARRAY_START_INDEX])
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 5d       	subi	r30, 0xDE	; 222
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3c 83       	std	Y+4, r19	; 0x04
    13f2:	2b 83       	std	Y+3, r18	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	31 f0       	breq	.+12     	; 0x1408 <SSD_u8SetOff+0x4e>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	21 30       	cpi	r18, 0x01	; 1
    1402:	31 05       	cpc	r19, r1
    1404:	99 f0       	breq	.+38     	; 0x142c <SSD_u8SetOff+0x72>
    1406:	24 c0       	rjmp	.+72     	; 0x1450 <SSD_u8SetOff+0x96>
	    {
	      case SSD_u8_CATHODE :
	      		// set enable pin = 0 ;
	            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS -ARRAY_START_INDEX], DIO_u8_PIN_HIGH);
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	e1 59       	subi	r30, 0x91	; 145
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <SSD_u8SetOff+0x9a>

	             break;
	      case SSD_u8_ANODE :
	             // set enable pin = 0 ;
	            	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][SSD_u8_MAX_PINS - ARRAY_START_INDEX], DIO_u8_PIN_LOW);
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	fc 01       	movw	r30, r24
    1442:	e1 59       	subi	r30, 0x91	; 145
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <SSD_u8SetOff+0x9a>
	             // set pins default value

	             break;
	       default :
	        local_ErrorState = ERROR_NOK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
	    }

	  }
	  SSD_Au8SsdStatus[Copy_u8SsdNb-ARRAY_START_INDEX]=SSD_STATUS_OFF;
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	fc 01       	movw	r30, r24
    145e:	e6 5d       	subi	r30, 0xD6	; 214
    1460:	fe 4f       	sbci	r31, 0xFE	; 254
    1462:	10 82       	st	Z, r1
	  return local_ErrorState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01


}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <SSD_u8SetValue>:


/*********************************************************************/


u8 SSD_u8SetValue(u8 Copy_u8SsdNb ,u8 Copy_u8SsdValue){
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <SSD_u8SetValue+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <SSD_u8SetValue+0x8>
    147c:	00 d0       	rcall	.+0      	; 0x147e <SSD_u8SetValue+0xa>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	8b 83       	std	Y+3, r24	; 0x03
    1484:	6c 83       	std	Y+4, r22	; 0x04

	 u8 local_ErrorState = ERROR_OK;
    1486:	1a 82       	std	Y+2, r1	; 0x02
	 u8 Local_loopIndex = SSD_u8_LOOP_START_INDEX;
    1488:	19 82       	std	Y+1, r1	; 0x01

	if((SSD_Au8SsdStatus[Copy_u8SsdNb - ARRAY_START_INDEX]== SSD_STATUS_OFF) || (Copy_u8SsdNb > SSD_NO_OF_SSD) || (Copy_u8SsdNb < ARRAY_START_INDEX) || (Copy_u8SsdValue < SSD_u8_ZERO) || (Copy_u8SsdValue > SSD_u8_NINE))
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	fc 01       	movw	r30, r24
    1494:	e6 5d       	subi	r30, 0xD6	; 214
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	80 81       	ld	r24, Z
    149a:	88 23       	and	r24, r24
    149c:	49 f0       	breq	.+18     	; 0x14b0 <SSD_u8SetValue+0x3c>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	85 30       	cpi	r24, 0x05	; 5
    14a2:	30 f4       	brcc	.+12     	; 0x14b0 <SSD_u8SetValue+0x3c>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 23       	and	r24, r24
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <SSD_u8SetValue+0x3c>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	8a 30       	cpi	r24, 0x0A	; 10
    14ae:	18 f0       	brcs	.+6      	; 0x14b6 <SSD_u8SetValue+0x42>
	{
		 local_ErrorState = ERROR_NOK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	91 c0       	rjmp	.+290    	; 0x15d8 <SSD_u8SetValue+0x164>

	else

	{

		 switch(SSD_Au8SetSsdTypes[Copy_u8SsdNb -ARRAY_START_INDEX])
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	fc 01       	movw	r30, r24
    14c0:	ee 5d       	subi	r30, 0xDE	; 222
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3e 83       	std	Y+6, r19	; 0x06
    14cc:	2d 83       	std	Y+5, r18	; 0x05
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <SSD_u8SetValue+0x6e>
    14d6:	2d 81       	ldd	r18, Y+5	; 0x05
    14d8:	3e 81       	ldd	r19, Y+6	; 0x06
    14da:	21 30       	cpi	r18, 0x01	; 1
    14dc:	31 05       	cpc	r19, r1
    14de:	c9 f1       	breq	.+114    	; 0x1552 <SSD_u8SetValue+0xde>
    14e0:	70 c0       	rjmp	.+224    	; 0x15c2 <SSD_u8SetValue+0x14e>
		    {
		      case SSD_u8_CATHODE :

		             // set pins default value
		             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	32 c0       	rjmp	.+100    	; 0x154a <SSD_u8SetValue+0xd6>
		             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbers[Copy_u8SsdValue][Local_loopIndex]);
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	ac 01       	movw	r20, r24
    14ee:	41 50       	subi	r20, 0x01	; 1
    14f0:	50 40       	sbci	r21, 0x00	; 0
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	ca 01       	movw	r24, r20
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	fc 01       	movw	r30, r24
    150c:	e8 59       	subi	r30, 0x98	; 152
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	48 2f       	mov	r20, r24
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	c9 01       	movw	r24, r18
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	84 0f       	add	r24, r20
    1532:	95 1f       	adc	r25, r21
    1534:	fc 01       	movw	r30, r24
    1536:	e8 57       	subi	r30, 0x78	; 120
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	90 81       	ld	r25, Z
    153c:	86 2f       	mov	r24, r22
    153e:	69 2f       	mov	r22, r25
    1540:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
		 switch(SSD_Au8SetSsdTypes[Copy_u8SsdNb -ARRAY_START_INDEX])
		    {
		      case SSD_u8_CATHODE :

		             // set pins default value
		             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	87 30       	cpi	r24, 0x07	; 7
    154e:	58 f2       	brcs	.-106    	; 0x14e6 <SSD_u8SetValue+0x72>
    1550:	3a c0       	rjmp	.+116    	; 0x15c6 <SSD_u8SetValue+0x152>
		             }
		             break;
		      case SSD_u8_ANODE :

		             // set pins default value
		             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    1552:	19 82       	std	Y+1, r1	; 0x01
    1554:	32 c0       	rjmp	.+100    	; 0x15ba <SSD_u8SetValue+0x146>
		             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbersAnode[Copy_u8SsdValue][Local_loopIndex]);
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	ac 01       	movw	r20, r24
    155e:	41 50       	subi	r20, 0x01	; 1
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	ca 01       	movw	r24, r20
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	fc 01       	movw	r30, r24
    157c:	e8 59       	subi	r30, 0x98	; 152
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	60 81       	ld	r22, Z
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	48 2f       	mov	r20, r24
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	c9 01       	movw	r24, r18
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 1b       	sub	r24, r18
    159e:	93 0b       	sbc	r25, r19
    15a0:	84 0f       	add	r24, r20
    15a2:	95 1f       	adc	r25, r21
    15a4:	fc 01       	movw	r30, r24
    15a6:	eb 52       	subi	r30, 0x2B	; 43
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	90 81       	ld	r25, Z
    15ac:	86 2f       	mov	r24, r22
    15ae:	69 2f       	mov	r22, r25
    15b0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DIO_u8SetPinValue>
		             }
		             break;
		      case SSD_u8_ANODE :

		             // set pins default value
		             for (Local_loopIndex = SSD_u8_LOOP_START_INDEX; Local_loopIndex <SSD_u8_LOOP_END; Local_loopIndex++){
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	87 30       	cpi	r24, 0x07	; 7
    15be:	58 f2       	brcs	.-106    	; 0x1556 <SSD_u8SetValue+0xe2>
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <SSD_u8SetValue+0x152>
		             	DIO_u8SetPinValue(SSD_Au8SetPinConn[Copy_u8SsdNb-ARRAY_START_INDEX][Local_loopIndex], SSD_Au8SsdNumbersAnode[Copy_u8SsdValue][Local_loopIndex]);
		             }
		             break;
		       default :
		        local_ErrorState = ERROR_NOK;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	8a 83       	std	Y+2, r24	; 0x02
		    }

		 SSD_Au8SetDefaultValues[Copy_u8SsdNb-ARRAY_START_INDEX]=Copy_u8SsdValue;
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	fc 01       	movw	r30, r24
    15d0:	ea 5d       	subi	r30, 0xDA	; 218
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	80 83       	st	Z, r24


	}
	return local_ErrorState;
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15da:	26 96       	adiw	r28, 0x06	; 6
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <delay_milliSecond>:
#include "delay_ms_priv.h"




void delay_milliSecond(u32 value){
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	2a 97       	sbiw	r28, 0x0a	; 10
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	6f 83       	std	Y+7, r22	; 0x07
    1602:	78 87       	std	Y+8, r23	; 0x08
    1604:	89 87       	std	Y+9, r24	; 0x09
    1606:	9a 87       	std	Y+10, r25	; 0x0a


/**************************  OPERATIONS  ****************************/
/*																    */

	value = (u32)value*Milli2Micro;
    1608:	8f 81       	ldd	r24, Y+7	; 0x07
    160a:	98 85       	ldd	r25, Y+8	; 0x08
    160c:	a9 85       	ldd	r26, Y+9	; 0x09
    160e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1610:	28 ee       	ldi	r18, 0xE8	; 232
    1612:	33 e0       	ldi	r19, 0x03	; 3
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsi3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8f 83       	std	Y+7, r24	; 0x07
    1626:	98 87       	std	Y+8, r25	; 0x08
    1628:	a9 87       	std	Y+9, r26	; 0x09
    162a:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value - InContext - OutContext - OperationsDelay) ;
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	a9 85       	ldd	r26, Y+9	; 0x09
    1632:	ba 85       	ldd	r27, Y+10	; 0x0a
    1634:	8d 55       	subi	r24, 0x5D	; 93
    1636:	90 40       	sbci	r25, 0x00	; 0
    1638:	a0 40       	sbci	r26, 0x00	; 0
    163a:	b0 40       	sbci	r27, 0x00	; 0
    163c:	8f 83       	std	Y+7, r24	; 0x07
    163e:	98 87       	std	Y+8, r25	; 0x08
    1640:	a9 87       	std	Y+9, r26	; 0x09
    1642:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value / MIC2MILL) ;
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	98 85       	ldd	r25, Y+8	; 0x08
    1648:	a9 85       	ldd	r26, Y+9	; 0x09
    164a:	ba 85       	ldd	r27, Y+10	; 0x0a
    164c:	28 ee       	ldi	r18, 0xE8	; 232
    164e:	33 e0       	ldi	r19, 0x03	; 3
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
    165c:	da 01       	movw	r26, r20
    165e:	c9 01       	movw	r24, r18
    1660:	8f 83       	std	Y+7, r24	; 0x07
    1662:	98 87       	std	Y+8, r25	; 0x08
    1664:	a9 87       	std	Y+9, r26	; 0x09
    1666:	ba 87       	std	Y+10, r27	; 0x0a

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
    1668:	1b 82       	std	Y+3, r1	; 0x03
    166a:	1c 82       	std	Y+4, r1	; 0x04
    166c:	1d 82       	std	Y+5, r1	; 0x05
    166e:	1e 82       	std	Y+6, r1	; 0x06
    1670:	20 c0       	rjmp	.+64     	; 0x16b2 <delay_milliSecond+0xc6>

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
    1672:	1a 82       	std	Y+2, r1	; 0x02
    1674:	19 82       	std	Y+1, r1	; 0x01
    1676:	0c c0       	rjmp	.+24     	; 0x1690 <delay_milliSecond+0xa4>
	...
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
    1684:	00 00       	nop


	for (u32 ii = 0 ; ii < (u32)value ; ii++){

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	22 e0       	ldi	r18, 0x02	; 2
    1696:	8e 34       	cpi	r24, 0x4E	; 78
    1698:	92 07       	cpc	r25, r18
    169a:	70 f3       	brcs	.-36     	; 0x1678 <delay_milliSecond+0x8c>

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	ad 81       	ldd	r26, Y+5	; 0x05
    16a2:	be 81       	ldd	r27, Y+6	; 0x06
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	a1 1d       	adc	r26, r1
    16a8:	b1 1d       	adc	r27, r1
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	ad 83       	std	Y+5, r26	; 0x05
    16b0:	be 83       	std	Y+6, r27	; 0x06
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	4d 81       	ldd	r20, Y+5	; 0x05
    16b8:	5e 81       	ldd	r21, Y+6	; 0x06
    16ba:	8f 81       	ldd	r24, Y+7	; 0x07
    16bc:	98 85       	ldd	r25, Y+8	; 0x08
    16be:	a9 85       	ldd	r26, Y+9	; 0x09
    16c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	4a 07       	cpc	r20, r26
    16c8:	5b 07       	cpc	r21, r27
    16ca:	98 f2       	brcs	.-90     	; 0x1672 <delay_milliSecond+0x86>

		}

	}

}
    16cc:	2a 96       	adiw	r28, 0x0a	; 10
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <main>:
#include "DIO_interface.h"
#include "SSD_interface.h"

#include <util/delay.h>

int main(void){
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	ec 97       	sbiw	r28, 0x3c	; 60
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61


	DIO_voidInit();
    16f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	u8 S0=0;
    16f6:	1c ae       	std	Y+60, r1	; 0x3c
	u8 S1=0;
    16f8:	1b ae       	std	Y+59, r1	; 0x3b
	u8 S2=0;
    16fa:	1a ae       	std	Y+58, r1	; 0x3a
	u8 S3=0;
    16fc:	19 ae       	std	Y+57, r1	; 0x39
	SSD_u8SetOff(1);
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>
	SSD_u8SetOff(2);
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>
	SSD_u8SetOff(3);
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>
	SSD_u8SetOff(4);
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>
	while(1)
	{

		for(S3=0;S3<=10;S3++)
    1716:	19 ae       	std	Y+57, r1	; 0x39
    1718:	0e c2       	rjmp	.+1052   	; 0x1b36 <main+0x458>
		{
			for(S2=0;S2<=10;S2++)
    171a:	1a ae       	std	Y+58, r1	; 0x3a
    171c:	05 c2       	rjmp	.+1034   	; 0x1b28 <main+0x44a>
			{
				for(S1=0;S1<=10;S1++)
    171e:	1b ae       	std	Y+59, r1	; 0x3b
    1720:	fc c1       	rjmp	.+1016   	; 0x1b1a <main+0x43c>
				{
					for(S0=0;S0<=10;S0++)
    1722:	1c ae       	std	Y+60, r1	; 0x3c
    1724:	f3 c1       	rjmp	.+998    	; 0x1b0c <main+0x42e>
					{
							SSD_u8SetOn(1);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0e 94 03 09 	call	0x1206	; 0x1206 <SSD_u8SetOn>
							SSD_u8SetValue(1,S0);
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1730:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SSD_u8SetValue>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e4       	ldi	r27, 0x40	; 64
    173c:	8d ab       	std	Y+53, r24	; 0x35
    173e:	9e ab       	std	Y+54, r25	; 0x36
    1740:	af ab       	std	Y+55, r26	; 0x37
    1742:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	89 ab       	std	Y+49, r24	; 0x31
    175e:	9a ab       	std	Y+50, r25	; 0x32
    1760:	ab ab       	std	Y+51, r26	; 0x33
    1762:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <main+0xa8>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	98 ab       	std	Y+48, r25	; 0x30
    1782:	8f a7       	std	Y+47, r24	; 0x2f
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <main+0x126>
	else if (__tmp > 65535)
    1786:	69 a9       	ldd	r22, Y+49	; 0x31
    1788:	7a a9       	ldd	r23, Y+50	; 0x32
    178a:	8b a9       	ldd	r24, Y+51	; 0x33
    178c:	9c a9       	ldd	r25, Y+52	; 0x34
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6d a9       	ldd	r22, Y+53	; 0x35
    17a0:	7e a9       	ldd	r23, Y+54	; 0x36
    17a2:	8f a9       	ldd	r24, Y+55	; 0x37
    17a4:	98 ad       	ldd	r25, Y+56	; 0x38
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <main+0x108>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e a7       	std	Y+46, r25	; 0x2e
    17ce:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <main+0xf6>
    17d8:	9e a7       	std	Y+46, r25	; 0x2e
    17da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	98 ab       	std	Y+48, r25	; 0x30
    17e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <main+0xea>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	69 a9       	ldd	r22, Y+49	; 0x31
    17f2:	7a a9       	ldd	r23, Y+50	; 0x32
    17f4:	8b a9       	ldd	r24, Y+51	; 0x33
    17f6:	9c a9       	ldd	r25, Y+52	; 0x34
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	8f a5       	ldd	r24, Y+47	; 0x2f
    1806:	98 a9       	ldd	r25, Y+48	; 0x30
    1808:	9c a7       	std	Y+44, r25	; 0x2c
    180a:	8b a7       	std	Y+43, r24	; 0x2b
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <main+0x132>
    1814:	9c a7       	std	Y+44, r25	; 0x2c
    1816:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(2);
							SSD_u8SetOff(1);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>

							SSD_u8SetOn(2);
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	0e 94 03 09 	call	0x1206	; 0x1206 <SSD_u8SetOn>
							SSD_u8SetValue(2,S1);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	6b ad       	ldd	r22, Y+59	; 0x3b
    1828:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SSD_u8SetValue>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e0       	ldi	r26, 0x00	; 0
    1832:	b0 e4       	ldi	r27, 0x40	; 64
    1834:	8f a3       	std	Y+39, r24	; 0x27
    1836:	98 a7       	std	Y+40, r25	; 0x28
    1838:	a9 a7       	std	Y+41, r26	; 0x29
    183a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6f a1       	ldd	r22, Y+39	; 0x27
    183e:	78 a5       	ldd	r23, Y+40	; 0x28
    1840:	89 a5       	ldd	r24, Y+41	; 0x29
    1842:	9a a5       	ldd	r25, Y+42	; 0x2a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a ef       	ldi	r20, 0xFA	; 250
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8b a3       	std	Y+35, r24	; 0x23
    1856:	9c a3       	std	Y+36, r25	; 0x24
    1858:	ad a3       	std	Y+37, r26	; 0x25
    185a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    185c:	6b a1       	ldd	r22, Y+35	; 0x23
    185e:	7c a1       	ldd	r23, Y+36	; 0x24
    1860:	8d a1       	ldd	r24, Y+37	; 0x25
    1862:	9e a1       	ldd	r25, Y+38	; 0x26
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <main+0x1a0>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9a a3       	std	Y+34, r25	; 0x22
    187a:	89 a3       	std	Y+33, r24	; 0x21
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <main+0x21e>
	else if (__tmp > 65535)
    187e:	6b a1       	ldd	r22, Y+35	; 0x23
    1880:	7c a1       	ldd	r23, Y+36	; 0x24
    1882:	8d a1       	ldd	r24, Y+37	; 0x25
    1884:	9e a1       	ldd	r25, Y+38	; 0x26
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6f a1       	ldd	r22, Y+39	; 0x27
    1898:	78 a5       	ldd	r23, Y+40	; 0x28
    189a:	89 a5       	ldd	r24, Y+41	; 0x29
    189c:	9a a5       	ldd	r25, Y+42	; 0x2a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
    18be:	0f c0       	rjmp	.+30     	; 0x18de <main+0x200>
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	98 a3       	std	Y+32, r25	; 0x20
    18c6:	8f 8f       	std	Y+31, r24	; 0x1f
    18c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ca:	98 a1       	ldd	r25, Y+32	; 0x20
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <main+0x1ee>
    18d0:	98 a3       	std	Y+32, r25	; 0x20
    18d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	89 a1       	ldd	r24, Y+33	; 0x21
    18e0:	9a a1       	ldd	r25, Y+34	; 0x22
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <main+0x1e2>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ea:	7c a1       	ldd	r23, Y+36	; 0x24
    18ec:	8d a1       	ldd	r24, Y+37	; 0x25
    18ee:	9e a1       	ldd	r25, Y+38	; 0x26
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9a a3       	std	Y+34, r25	; 0x22
    18fa:	89 a3       	std	Y+33, r24	; 0x21
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	9e 8f       	std	Y+30, r25	; 0x1e
    1902:	8d 8f       	std	Y+29, r24	; 0x1d
    1904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <main+0x22a>
    190c:	9e 8f       	std	Y+30, r25	; 0x1e
    190e:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(2);
							SSD_u8SetOff(2);
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>

							SSD_u8SetOn(3);
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	0e 94 03 09 	call	0x1206	; 0x1206 <SSD_u8SetOn>
							SSD_u8SetValue(3,S2);
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1920:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SSD_u8SetValue>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e4       	ldi	r27, 0x40	; 64
    192c:	89 8f       	std	Y+25, r24	; 0x19
    192e:	9a 8f       	std	Y+26, r25	; 0x1a
    1930:	ab 8f       	std	Y+27, r26	; 0x1b
    1932:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a ef       	ldi	r20, 0xFA	; 250
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8d 8b       	std	Y+21, r24	; 0x15
    194e:	9e 8b       	std	Y+22, r25	; 0x16
    1950:	af 8b       	std	Y+23, r26	; 0x17
    1952:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <main+0x298>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <main+0x316>
	else if (__tmp > 65535)
    1976:	6d 89       	ldd	r22, Y+21	; 0x15
    1978:	7e 89       	ldd	r23, Y+22	; 0x16
    197a:	8f 89       	ldd	r24, Y+23	; 0x17
    197c:	98 8d       	ldd	r25, Y+24	; 0x18
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	69 8d       	ldd	r22, Y+25	; 0x19
    1990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <main+0x2f8>
    19b8:	88 ec       	ldi	r24, 0xC8	; 200
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9a 8b       	std	Y+18, r25	; 0x12
    19be:	89 8b       	std	Y+17, r24	; 0x11
    19c0:	89 89       	ldd	r24, Y+17	; 0x11
    19c2:	9a 89       	ldd	r25, Y+18	; 0x12
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <main+0x2e6>
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
    19d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8b 89       	ldd	r24, Y+19	; 0x13
    19d8:	9c 89       	ldd	r25, Y+20	; 0x14
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <main+0x2da>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <main+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	8b 89       	ldd	r24, Y+19	; 0x13
    19f6:	9c 89       	ldd	r25, Y+20	; 0x14
    19f8:	98 8b       	std	Y+16, r25	; 0x10
    19fa:	8f 87       	std	Y+15, r24	; 0x0f
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	98 89       	ldd	r25, Y+16	; 0x10
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <main+0x322>
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(2 );
							SSD_u8SetOff(3);
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>

							SSD_u8SetOn(4);
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	0e 94 03 09 	call	0x1206	; 0x1206 <SSD_u8SetOn>
							SSD_u8SetValue(4,S3);
    1a14:	84 e0       	ldi	r24, 0x04	; 4
    1a16:	69 ad       	ldd	r22, Y+57	; 0x39
    1a18:	0e 94 3a 0a 	call	0x1474	; 0x1474 <SSD_u8SetValue>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e0       	ldi	r26, 0x00	; 0
    1a22:	b0 e4       	ldi	r27, 0x40	; 64
    1a24:	8b 87       	std	Y+11, r24	; 0x0b
    1a26:	9c 87       	std	Y+12, r25	; 0x0c
    1a28:	ad 87       	std	Y+13, r26	; 0x0d
    1a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a ef       	ldi	r20, 0xFA	; 250
    1a3a:	54 e4       	ldi	r21, 0x44	; 68
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8f 83       	std	Y+7, r24	; 0x07
    1a46:	98 87       	std	Y+8, r25	; 0x08
    1a48:	a9 87       	std	Y+9, r26	; 0x09
    1a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <main+0x390>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <main+0x40e>
	else if (__tmp > 65535)
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <main+0x3f0>
    1ab0:	88 ec       	ldi	r24, 0xC8	; 200
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <main+0x3de>
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <main+0x3d2>
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ada:	78 85       	ldd	r23, Y+8	; 0x08
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <main+0x41a>
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(2);
							SSD_u8SetOff(4);
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	0e 94 dd 09 	call	0x13ba	; 0x13ba <SSD_u8SetOff>
		{
			for(S2=0;S2<=10;S2++)
			{
				for(S1=0;S1<=10;S1++)
				{
					for(S0=0;S0<=10;S0++)
    1b06:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	8c af       	std	Y+60, r24	; 0x3c
    1b0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b0e:	8b 30       	cpi	r24, 0x0B	; 11
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <main+0x436>
    1b12:	09 ce       	rjmp	.-1006   	; 0x1726 <main+0x48>

		for(S3=0;S3<=10;S3++)
		{
			for(S2=0;S2<=10;S2++)
			{
				for(S1=0;S1<=10;S1++)
    1b14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8b af       	std	Y+59, r24	; 0x3b
    1b1a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b1c:	8b 30       	cpi	r24, 0x0B	; 11
    1b1e:	08 f4       	brcc	.+2      	; 0x1b22 <main+0x444>
    1b20:	00 ce       	rjmp	.-1024   	; 0x1722 <main+0x44>
	while(1)
	{

		for(S3=0;S3<=10;S3++)
		{
			for(S2=0;S2<=10;S2++)
    1b22:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	8a af       	std	Y+58, r24	; 0x3a
    1b28:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b2a:	8b 30       	cpi	r24, 0x0B	; 11
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <main+0x452>
    1b2e:	f7 cd       	rjmp	.-1042   	; 0x171e <main+0x40>
	SSD_u8SetOff(3);
	SSD_u8SetOff(4);
	while(1)
	{

		for(S3=0;S3<=10;S3++)
    1b30:	89 ad       	ldd	r24, Y+57	; 0x39
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	89 af       	std	Y+57, r24	; 0x39
    1b36:	89 ad       	ldd	r24, Y+57	; 0x39
    1b38:	8b 30       	cpi	r24, 0x0B	; 11
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <main+0x460>
    1b3c:	ee cd       	rjmp	.-1060   	; 0x171a <main+0x3c>
    1b3e:	eb cd       	rjmp	.-1066   	; 0x1716 <main+0x38>

00001b40 <__mulsi3>:
    1b40:	62 9f       	mul	r22, r18
    1b42:	d0 01       	movw	r26, r0
    1b44:	73 9f       	mul	r23, r19
    1b46:	f0 01       	movw	r30, r0
    1b48:	82 9f       	mul	r24, r18
    1b4a:	e0 0d       	add	r30, r0
    1b4c:	f1 1d       	adc	r31, r1
    1b4e:	64 9f       	mul	r22, r20
    1b50:	e0 0d       	add	r30, r0
    1b52:	f1 1d       	adc	r31, r1
    1b54:	92 9f       	mul	r25, r18
    1b56:	f0 0d       	add	r31, r0
    1b58:	83 9f       	mul	r24, r19
    1b5a:	f0 0d       	add	r31, r0
    1b5c:	74 9f       	mul	r23, r20
    1b5e:	f0 0d       	add	r31, r0
    1b60:	65 9f       	mul	r22, r21
    1b62:	f0 0d       	add	r31, r0
    1b64:	99 27       	eor	r25, r25
    1b66:	72 9f       	mul	r23, r18
    1b68:	b0 0d       	add	r27, r0
    1b6a:	e1 1d       	adc	r30, r1
    1b6c:	f9 1f       	adc	r31, r25
    1b6e:	63 9f       	mul	r22, r19
    1b70:	b0 0d       	add	r27, r0
    1b72:	e1 1d       	adc	r30, r1
    1b74:	f9 1f       	adc	r31, r25
    1b76:	bd 01       	movw	r22, r26
    1b78:	cf 01       	movw	r24, r30
    1b7a:	11 24       	eor	r1, r1
    1b7c:	08 95       	ret

00001b7e <__udivmodsi4>:
    1b7e:	a1 e2       	ldi	r26, 0x21	; 33
    1b80:	1a 2e       	mov	r1, r26
    1b82:	aa 1b       	sub	r26, r26
    1b84:	bb 1b       	sub	r27, r27
    1b86:	fd 01       	movw	r30, r26
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <__udivmodsi4_ep>

00001b8a <__udivmodsi4_loop>:
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	ee 1f       	adc	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	a2 17       	cp	r26, r18
    1b94:	b3 07       	cpc	r27, r19
    1b96:	e4 07       	cpc	r30, r20
    1b98:	f5 07       	cpc	r31, r21
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__udivmodsi4_ep>
    1b9c:	a2 1b       	sub	r26, r18
    1b9e:	b3 0b       	sbc	r27, r19
    1ba0:	e4 0b       	sbc	r30, r20
    1ba2:	f5 0b       	sbc	r31, r21

00001ba4 <__udivmodsi4_ep>:
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	1a 94       	dec	r1
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <__udivmodsi4_loop>
    1bb0:	60 95       	com	r22
    1bb2:	70 95       	com	r23
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	bd 01       	movw	r22, r26
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <__prologue_saves__>:
    1bc2:	2f 92       	push	r2
    1bc4:	3f 92       	push	r3
    1bc6:	4f 92       	push	r4
    1bc8:	5f 92       	push	r5
    1bca:	6f 92       	push	r6
    1bcc:	7f 92       	push	r7
    1bce:	8f 92       	push	r8
    1bd0:	9f 92       	push	r9
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	ca 1b       	sub	r28, r26
    1bec:	db 0b       	sbc	r29, r27
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	09 94       	ijmp

00001bfa <__epilogue_restores__>:
    1bfa:	2a 88       	ldd	r2, Y+18	; 0x12
    1bfc:	39 88       	ldd	r3, Y+17	; 0x11
    1bfe:	48 88       	ldd	r4, Y+16	; 0x10
    1c00:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c02:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c04:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c06:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c08:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c0c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c0e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c10:	df 80       	ldd	r13, Y+7	; 0x07
    1c12:	ee 80       	ldd	r14, Y+6	; 0x06
    1c14:	fd 80       	ldd	r15, Y+5	; 0x05
    1c16:	0c 81       	ldd	r16, Y+4	; 0x04
    1c18:	1b 81       	ldd	r17, Y+3	; 0x03
    1c1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c1e:	ce 0f       	add	r28, r30
    1c20:	d1 1d       	adc	r29, r1
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	ed 01       	movw	r28, r26
    1c2e:	08 95       	ret

00001c30 <_exit>:
    1c30:	f8 94       	cli

00001c32 <__stop_program>:
    1c32:	ff cf       	rjmp	.-2      	; 0x1c32 <__stop_program>
