
AVR_Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a68  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000058e  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 14 04 	call	0x828	; 0x828 <main>
  64:	0c 94 84 04 	jmp	0x908	; 0x908 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:




void DIO_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	#endif

	/*																									  */
	/*																									  */
	/******************************************************************************************************/
    DDRA->ByteAccess=CONC_8bit (DIO_u8_PIN0_DIR,
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
                           DIO_u8_PIN5_DIR,
                           DIO_u8_PIN6_DIR,
                           DIO_u8_PIN7_DIR
    );

    DDRB->ByteAccess=CONC_8bit(DIO_u8_PIN8_DIR ,
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
                          DIO_u8_PIN13_DIR,
                          DIO_u8_PIN14_DIR,
                          DIO_u8_PIN15_DIR
    );

     DDRC->ByteAccess=CONC_8bit(DIO_u8_PIN16_DIR,
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
                           DIO_u8_PIN21_DIR,
                           DIO_u8_PIN22_DIR,
                           DIO_u8_PIN23_DIR
    );

     DDRD->ByteAccess=CONC_8bit(DIO_u8_PIN24_DIR,
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
                           DIO_u8_PIN31_DIR
    );


     // SET PORT VALUES  :
     PORTA->ByteAccess=CONC_8bit (DIO_u8_PIN0_VALUE,
  94:	eb e3       	ldi	r30, 0x3B	; 59
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
                            DIO_u8_PIN5_VALUE,
                            DIO_u8_PIN6_VALUE,
                            DIO_u8_PIN7_VALUE
     );

     PORTB->ByteAccess=CONC_8bit(DIO_u8_PIN8_VALUE ,
  9c:	e8 e3       	ldi	r30, 0x38	; 56
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 83       	st	Z, r24
                           DIO_u8_PIN12_VALUE,
                           DIO_u8_PIN13_VALUE,
                           DIO_u8_PIN14_VALUE,
                           DIO_u8_PIN15_VALUE
     );
      PORTC->ByteAccess=CONC_8bit(DIO_u8_PIN16_VALUE,
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	80 83       	st	Z, r24
                            DIO_u8_PIN20_VALUE,
                            DIO_u8_PIN21_VALUE,
                            DIO_u8_PIN22_VALUE,
                            DIO_u8_PIN23_VALUE
     );
      PORTD->ByteAccess=CONC_8bit(DIO_u8_PIN24_VALUE,
  ac:	e2 e3       	ldi	r30, 0x32	; 50
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	80 83       	st	Z, r24
                            DIO_u8_PIN31_VALUE
     );


  return;
}
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <DIO_u8SetPinDirection>:




//  pin APIs
u8 DIO_u8SetPinDirection(u8  Copy_u8PinNb, u8 Copy_u8Direction){
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	27 97       	sbiw	r28, 0x07	; 7
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	8c 83       	std	Y+4, r24	; 0x04
  d0:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8Error=ERROR_OK;
  d2:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8Direction !=DIO_PIN_OUTPUT && Copy_u8Direction != DIO_PIN_INPUT)){
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	80 32       	cpi	r24, 0x20	; 32
  d8:	30 f4       	brcc	.+12     	; 0xe6 <DIO_u8SetPinDirection+0x2c>
  da:	8d 81       	ldd	r24, Y+5	; 0x05
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	31 f0       	breq	.+12     	; 0xec <DIO_u8SetPinDirection+0x32>
  e0:	8d 81       	ldd	r24, Y+5	; 0x05
  e2:	88 23       	and	r24, r24
  e4:	19 f0       	breq	.+6      	; 0xec <DIO_u8SetPinDirection+0x32>
      Local_u8Error = ERROR_NOK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8b 83       	std	Y+3, r24	; 0x03
  ea:	ce c0       	rjmp	.+412    	; 0x288 <DIO_u8SetPinDirection+0x1ce>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	87 70       	andi	r24, 0x07	; 7
  f0:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
  f2:	8c 81       	ldd	r24, Y+4	; 0x04
  f4:	86 95       	lsr	r24
  f6:	86 95       	lsr	r24
  f8:	86 95       	lsr	r24
  fa:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	28 2f       	mov	r18, r24
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	3f 83       	std	Y+7, r19	; 0x07
 104:	2e 83       	std	Y+6, r18	; 0x06
 106:	6e 81       	ldd	r22, Y+6	; 0x06
 108:	7f 81       	ldd	r23, Y+7	; 0x07
 10a:	61 30       	cpi	r22, 0x01	; 1
 10c:	71 05       	cpc	r23, r1
 10e:	09 f4       	brne	.+2      	; 0x112 <DIO_u8SetPinDirection+0x58>
 110:	41 c0       	rjmp	.+130    	; 0x194 <DIO_u8SetPinDirection+0xda>
 112:	8e 81       	ldd	r24, Y+6	; 0x06
 114:	9f 81       	ldd	r25, Y+7	; 0x07
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	34 f4       	brge	.+12     	; 0x128 <DIO_u8SetPinDirection+0x6e>
 11c:	2e 81       	ldd	r18, Y+6	; 0x06
 11e:	3f 81       	ldd	r19, Y+7	; 0x07
 120:	21 15       	cp	r18, r1
 122:	31 05       	cpc	r19, r1
 124:	71 f0       	breq	.+28     	; 0x142 <DIO_u8SetPinDirection+0x88>
 126:	b0 c0       	rjmp	.+352    	; 0x288 <DIO_u8SetPinDirection+0x1ce>
 128:	6e 81       	ldd	r22, Y+6	; 0x06
 12a:	7f 81       	ldd	r23, Y+7	; 0x07
 12c:	62 30       	cpi	r22, 0x02	; 2
 12e:	71 05       	cpc	r23, r1
 130:	09 f4       	brne	.+2      	; 0x134 <DIO_u8SetPinDirection+0x7a>
 132:	59 c0       	rjmp	.+178    	; 0x1e6 <DIO_u8SetPinDirection+0x12c>
 134:	8e 81       	ldd	r24, Y+6	; 0x06
 136:	9f 81       	ldd	r25, Y+7	; 0x07
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_u8SetPinDirection+0x86>
 13e:	7c c0       	rjmp	.+248    	; 0x238 <DIO_u8SetPinDirection+0x17e>
 140:	a3 c0       	rjmp	.+326    	; 0x288 <DIO_u8SetPinDirection+0x1ce>
        case DIO_DDR_A :
          BIT_CALC_ASSIGN_BIT(DDRA->ByteAccess,Local_u8PinId,Copy_u8Direction);
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	88 23       	and	r24, r24
 146:	21 f0       	breq	.+8      	; 0x150 <DIO_u8SetPinDirection+0x96>
 148:	8d 81       	ldd	r24, Y+5	; 0x05
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	09 f0       	breq	.+2      	; 0x150 <DIO_u8SetPinDirection+0x96>
 14e:	1d 82       	std	Y+5, r1	; 0x05
 150:	aa e3       	ldi	r26, 0x3A	; 58
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	ea e3       	ldi	r30, 0x3A	; 58
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinDirection+0xb2>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinDirection+0xae>
 170:	80 95       	com	r24
 172:	48 23       	and	r20, r24
 174:	8d 81       	ldd	r24, Y+5	; 0x05
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_u8SetPinDirection+0xce>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_u8SetPinDirection+0xca>
 18c:	cb 01       	movw	r24, r22
 18e:	84 2b       	or	r24, r20
 190:	8c 93       	st	X, r24
 192:	7a c0       	rjmp	.+244    	; 0x288 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_B:
          BIT_CALC_ASSIGN_BIT(DDRB->ByteAccess,Local_u8PinId,Copy_u8Direction);
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	88 23       	and	r24, r24
 198:	21 f0       	breq	.+8      	; 0x1a2 <DIO_u8SetPinDirection+0xe8>
 19a:	8d 81       	ldd	r24, Y+5	; 0x05
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <DIO_u8SetPinDirection+0xe8>
 1a0:	1d 82       	std	Y+5, r1	; 0x05
 1a2:	a7 e3       	ldi	r26, 0x37	; 55
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e7 e3       	ldi	r30, 0x37	; 55
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8SetPinDirection+0x104>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8SetPinDirection+0x100>
 1c2:	80 95       	com	r24
 1c4:	48 23       	and	r20, r24
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8SetPinDirection+0x120>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8SetPinDirection+0x11c>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 2b       	or	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	51 c0       	rjmp	.+162    	; 0x288 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_C:
          BIT_CALC_ASSIGN_BIT(DDRC->ByteAccess,Local_u8PinId,Copy_u8Direction);
 1e6:	8d 81       	ldd	r24, Y+5	; 0x05
 1e8:	88 23       	and	r24, r24
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <DIO_u8SetPinDirection+0x13a>
 1ec:	8d 81       	ldd	r24, Y+5	; 0x05
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_u8SetPinDirection+0x13a>
 1f2:	1d 82       	std	Y+5, r1	; 0x05
 1f4:	a4 e3       	ldi	r26, 0x34	; 52
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e4 e3       	ldi	r30, 0x34	; 52
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirection+0x156>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	2a 95       	dec	r18
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirection+0x152>
 214:	80 95       	com	r24
 216:	48 23       	and	r20, r24
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_u8SetPinDirection+0x172>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_u8SetPinDirection+0x16e>
 230:	cb 01       	movw	r24, r22
 232:	84 2b       	or	r24, r20
 234:	8c 93       	st	X, r24
 236:	28 c0       	rjmp	.+80     	; 0x288 <DIO_u8SetPinDirection+0x1ce>
        break;
        case DIO_DDR_D:
          BIT_CALC_ASSIGN_BIT(DDRD->ByteAccess,Local_u8PinId,Copy_u8Direction);
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	88 23       	and	r24, r24
 23c:	21 f0       	breq	.+8      	; 0x246 <DIO_u8SetPinDirection+0x18c>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	09 f0       	breq	.+2      	; 0x246 <DIO_u8SetPinDirection+0x18c>
 244:	1d 82       	std	Y+5, r1	; 0x05
 246:	a1 e3       	ldi	r26, 0x31	; 49
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e1 e3       	ldi	r30, 0x31	; 49
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinDirection+0x1a8>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinDirection+0x1a4>
 266:	80 95       	com	r24
 268:	48 23       	and	r20, r24
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8SetPinDirection+0x1c4>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8SetPinDirection+0x1c0>
 282:	cb 01       	movw	r24, r22
 284:	84 2b       	or	r24, r20
 286:	8c 93       	st	X, r24
        break;
      }

    }
    return Local_u8Error;
 288:	8b 81       	ldd	r24, Y+3	; 0x03
}
 28a:	27 96       	adiw	r28, 0x07	; 7
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <DIO_u8SetPinValue>:
/*			Copy_u8PinNb     : PIN Number                */
/* 	 	 	Copy_u8PinValue : PIN VALUE                  */
/*	OUTPUT:                                              */
/*			return ERROR STATE                           */
/*********************************************************/
u8 DIO_u8SetPinValue(u8  Copy_u8PinNb, u8  Copy_u8PinValue){
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	27 97       	sbiw	r28, 0x07	; 7
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	8c 83       	std	Y+4, r24	; 0x04
 2b2:	6d 83       	std	Y+5, r22	; 0x05

   u8 Local_u8Error=ERROR_OK;
 2b4:	1b 82       	std	Y+3, r1	; 0x03
  u8 Local_u8PinId;
  u8 Local_u8PortId;
  if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_u8PinValue !=DIO_PIN_OUTPUT && Copy_u8PinValue != DIO_PIN_INPUT)){
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	80 32       	cpi	r24, 0x20	; 32
 2ba:	30 f4       	brcc	.+12     	; 0x2c8 <DIO_u8SetPinValue+0x2c>
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	31 f0       	breq	.+12     	; 0x2ce <DIO_u8SetPinValue+0x32>
 2c2:	8d 81       	ldd	r24, Y+5	; 0x05
 2c4:	88 23       	and	r24, r24
 2c6:	19 f0       	breq	.+6      	; 0x2ce <DIO_u8SetPinValue+0x32>
    Local_u8Error = ERROR_NOK;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	8b 83       	std	Y+3, r24	; 0x03
 2cc:	ce c0       	rjmp	.+412    	; 0x46a <DIO_u8SetPinValue+0x1ce>
  }else{

    Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 2ce:	8c 81       	ldd	r24, Y+4	; 0x04
 2d0:	87 70       	andi	r24, 0x07	; 7
 2d2:	8a 83       	std	Y+2, r24	; 0x02
    Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
 2d6:	86 95       	lsr	r24
 2d8:	86 95       	lsr	r24
 2da:	86 95       	lsr	r24
 2dc:	89 83       	std	Y+1, r24	; 0x01
    switch (Local_u8PortId){
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	3f 83       	std	Y+7, r19	; 0x07
 2e6:	2e 83       	std	Y+6, r18	; 0x06
 2e8:	6e 81       	ldd	r22, Y+6	; 0x06
 2ea:	7f 81       	ldd	r23, Y+7	; 0x07
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	71 05       	cpc	r23, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_u8SetPinValue+0x58>
 2f2:	41 c0       	rjmp	.+130    	; 0x376 <DIO_u8SetPinValue+0xda>
 2f4:	8e 81       	ldd	r24, Y+6	; 0x06
 2f6:	9f 81       	ldd	r25, Y+7	; 0x07
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	34 f4       	brge	.+12     	; 0x30a <DIO_u8SetPinValue+0x6e>
 2fe:	2e 81       	ldd	r18, Y+6	; 0x06
 300:	3f 81       	ldd	r19, Y+7	; 0x07
 302:	21 15       	cp	r18, r1
 304:	31 05       	cpc	r19, r1
 306:	71 f0       	breq	.+28     	; 0x324 <DIO_u8SetPinValue+0x88>
 308:	b0 c0       	rjmp	.+352    	; 0x46a <DIO_u8SetPinValue+0x1ce>
 30a:	6e 81       	ldd	r22, Y+6	; 0x06
 30c:	7f 81       	ldd	r23, Y+7	; 0x07
 30e:	62 30       	cpi	r22, 0x02	; 2
 310:	71 05       	cpc	r23, r1
 312:	09 f4       	brne	.+2      	; 0x316 <DIO_u8SetPinValue+0x7a>
 314:	59 c0       	rjmp	.+178    	; 0x3c8 <DIO_u8SetPinValue+0x12c>
 316:	8e 81       	ldd	r24, Y+6	; 0x06
 318:	9f 81       	ldd	r25, Y+7	; 0x07
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	91 05       	cpc	r25, r1
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_u8SetPinValue+0x86>
 320:	7c c0       	rjmp	.+248    	; 0x41a <DIO_u8SetPinValue+0x17e>
 322:	a3 c0       	rjmp	.+326    	; 0x46a <DIO_u8SetPinValue+0x1ce>
      case DIO_PORT_A :
        BIT_CALC_ASSIGN_BIT(PORTA->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 324:	8d 81       	ldd	r24, Y+5	; 0x05
 326:	88 23       	and	r24, r24
 328:	21 f0       	breq	.+8      	; 0x332 <DIO_u8SetPinValue+0x96>
 32a:	8d 81       	ldd	r24, Y+5	; 0x05
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	09 f0       	breq	.+2      	; 0x332 <DIO_u8SetPinValue+0x96>
 330:	1d 82       	std	Y+5, r1	; 0x05
 332:	ab e3       	ldi	r26, 0x3B	; 59
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	eb e3       	ldi	r30, 0x3B	; 59
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8SetPinValue+0xb2>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	2a 95       	dec	r18
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8SetPinValue+0xae>
 352:	80 95       	com	r24
 354:	48 23       	and	r20, r24
 356:	8d 81       	ldd	r24, Y+5	; 0x05
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_u8SetPinValue+0xce>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_u8SetPinValue+0xca>
 36e:	cb 01       	movw	r24, r22
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	7a c0       	rjmp	.+244    	; 0x46a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_B:
        BIT_CALC_ASSIGN_BIT(PORTB->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 376:	8d 81       	ldd	r24, Y+5	; 0x05
 378:	88 23       	and	r24, r24
 37a:	21 f0       	breq	.+8      	; 0x384 <DIO_u8SetPinValue+0xe8>
 37c:	8d 81       	ldd	r24, Y+5	; 0x05
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_u8SetPinValue+0xe8>
 382:	1d 82       	std	Y+5, r1	; 0x05
 384:	a8 e3       	ldi	r26, 0x38	; 56
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e8 e3       	ldi	r30, 0x38	; 56
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_u8SetPinValue+0x104>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	2a 95       	dec	r18
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_u8SetPinValue+0x100>
 3a4:	80 95       	com	r24
 3a6:	48 23       	and	r20, r24
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_u8SetPinValue+0x120>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_u8SetPinValue+0x11c>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	8c 93       	st	X, r24
 3c6:	51 c0       	rjmp	.+162    	; 0x46a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_C:
        BIT_CALC_ASSIGN_BIT(PORTC->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 3c8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ca:	88 23       	and	r24, r24
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <DIO_u8SetPinValue+0x13a>
 3ce:	8d 81       	ldd	r24, Y+5	; 0x05
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <DIO_u8SetPinValue+0x13a>
 3d4:	1d 82       	std	Y+5, r1	; 0x05
 3d6:	a5 e3       	ldi	r26, 0x35	; 53
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e5 e3       	ldi	r30, 0x35	; 53
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	48 2f       	mov	r20, r24
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8SetPinValue+0x156>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	2a 95       	dec	r18
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8SetPinValue+0x152>
 3f6:	80 95       	com	r24
 3f8:	48 23       	and	r20, r24
 3fa:	8d 81       	ldd	r24, Y+5	; 0x05
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	88 2f       	mov	r24, r24
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8SetPinValue+0x172>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8SetPinValue+0x16e>
 412:	cb 01       	movw	r24, r22
 414:	84 2b       	or	r24, r20
 416:	8c 93       	st	X, r24
 418:	28 c0       	rjmp	.+80     	; 0x46a <DIO_u8SetPinValue+0x1ce>
      break;
      case DIO_PORT_D:
        BIT_CALC_ASSIGN_BIT(PORTD->ByteAccess,Local_u8PinId,Copy_u8PinValue);
 41a:	8d 81       	ldd	r24, Y+5	; 0x05
 41c:	88 23       	and	r24, r24
 41e:	21 f0       	breq	.+8      	; 0x428 <DIO_u8SetPinValue+0x18c>
 420:	8d 81       	ldd	r24, Y+5	; 0x05
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	09 f0       	breq	.+2      	; 0x428 <DIO_u8SetPinValue+0x18c>
 426:	1d 82       	std	Y+5, r1	; 0x05
 428:	a2 e3       	ldi	r26, 0x32	; 50
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e2 e3       	ldi	r30, 0x32	; 50
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	48 2f       	mov	r20, r24
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8SetPinValue+0x1a8>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8SetPinValue+0x1a4>
 448:	80 95       	com	r24
 44a:	48 23       	and	r20, r24
 44c:	8d 81       	ldd	r24, Y+5	; 0x05
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	88 2f       	mov	r24, r24
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	b9 01       	movw	r22, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8SetPinValue+0x1c4>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_u8SetPinValue+0x1c0>
 464:	cb 01       	movw	r24, r22
 466:	84 2b       	or	r24, r20
 468:	8c 93       	st	X, r24
      break;
    }

  }
  return Local_u8Error;
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 46c:	27 96       	adiw	r28, 0x07	; 7
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	08 95       	ret

0000047e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PinValue){
 47e:	df 93       	push	r29
 480:	cf 93       	push	r28
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	28 97       	sbiw	r28, 0x08	; 8
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	8c 83       	std	Y+4, r24	; 0x04
 494:	7e 83       	std	Y+6, r23	; 0x06
 496:	6d 83       	std	Y+5, r22	; 0x05
	/*			Copy_u8PinNb     : PIN Number                */
	/* 	 	 	Copy_u8PinValue  : PIN VALUE                 */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 498:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8PinId;
    u8 Local_u8PortId;
    if((Copy_u8PinNb >= DIO_MAXPINNB) || (Copy_pu8PinValue ==NULL)){
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	80 32       	cpi	r24, 0x20	; 32
 49e:	20 f4       	brcc	.+8      	; 0x4a8 <DIO_u8GetPinValue+0x2a>
 4a0:	8d 81       	ldd	r24, Y+5	; 0x05
 4a2:	9e 81       	ldd	r25, Y+6	; 0x06
 4a4:	00 97       	sbiw	r24, 0x00	; 0
 4a6:	19 f4       	brne	.+6      	; 0x4ae <DIO_u8GetPinValue+0x30>
      Local_u8Error = ERROR_NOK;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	8b 83       	std	Y+3, r24	; 0x03
 4ac:	88 c0       	rjmp	.+272    	; 0x5be <DIO_u8GetPinValue+0x140>
    }else{

      Local_u8PinId= Copy_u8PinNb %  DIO_NUMBER_PINS_IN_PORT;
 4ae:	8c 81       	ldd	r24, Y+4	; 0x04
 4b0:	87 70       	andi	r24, 0x07	; 7
 4b2:	8a 83       	std	Y+2, r24	; 0x02
      Local_u8PortId = Copy_u8PinNb / DIO_NUMBER_PINS_IN_PORT;
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	86 95       	lsr	r24
 4b8:	86 95       	lsr	r24
 4ba:	86 95       	lsr	r24
 4bc:	89 83       	std	Y+1, r24	; 0x01
      switch (Local_u8PortId){
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	38 87       	std	Y+8, r19	; 0x08
 4c6:	2f 83       	std	Y+7, r18	; 0x07
 4c8:	4f 81       	ldd	r20, Y+7	; 0x07
 4ca:	58 85       	ldd	r21, Y+8	; 0x08
 4cc:	41 30       	cpi	r20, 0x01	; 1
 4ce:	51 05       	cpc	r21, r1
 4d0:	79 f1       	breq	.+94     	; 0x530 <DIO_u8GetPinValue+0xb2>
 4d2:	8f 81       	ldd	r24, Y+7	; 0x07
 4d4:	98 85       	ldd	r25, Y+8	; 0x08
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	91 05       	cpc	r25, r1
 4da:	34 f4       	brge	.+12     	; 0x4e8 <DIO_u8GetPinValue+0x6a>
 4dc:	2f 81       	ldd	r18, Y+7	; 0x07
 4de:	38 85       	ldd	r19, Y+8	; 0x08
 4e0:	21 15       	cp	r18, r1
 4e2:	31 05       	cpc	r19, r1
 4e4:	69 f0       	breq	.+26     	; 0x500 <DIO_u8GetPinValue+0x82>
 4e6:	6b c0       	rjmp	.+214    	; 0x5be <DIO_u8GetPinValue+0x140>
 4e8:	4f 81       	ldd	r20, Y+7	; 0x07
 4ea:	58 85       	ldd	r21, Y+8	; 0x08
 4ec:	42 30       	cpi	r20, 0x02	; 2
 4ee:	51 05       	cpc	r21, r1
 4f0:	b9 f1       	breq	.+110    	; 0x560 <DIO_u8GetPinValue+0xe2>
 4f2:	8f 81       	ldd	r24, Y+7	; 0x07
 4f4:	98 85       	ldd	r25, Y+8	; 0x08
 4f6:	83 30       	cpi	r24, 0x03	; 3
 4f8:	91 05       	cpc	r25, r1
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_u8GetPinValue+0x80>
 4fc:	49 c0       	rjmp	.+146    	; 0x590 <DIO_u8GetPinValue+0x112>
 4fe:	5f c0       	rjmp	.+190    	; 0x5be <DIO_u8GetPinValue+0x140>
        case DIO_PIN_A :
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINA->ByteAccess,Local_u8PinId);
 500:	a9 e3       	ldi	r26, 0x39	; 57
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e9 e3       	ldi	r30, 0x39	; 57
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	a9 01       	movw	r20, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_u8GetPinValue+0x9e>
 518:	55 95       	asr	r21
 51a:	47 95       	ror	r20
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_u8GetPinValue+0x9a>
 520:	ca 01       	movw	r24, r20
 522:	81 70       	andi	r24, 0x01	; 1
 524:	8c 93       	st	X, r24
 526:	8c 91       	ld	r24, X
 528:	ed 81       	ldd	r30, Y+5	; 0x05
 52a:	fe 81       	ldd	r31, Y+6	; 0x06
 52c:	80 83       	st	Z, r24
 52e:	47 c0       	rjmp	.+142    	; 0x5be <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_B:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINB->ByteAccess,Local_u8PinId);
 530:	a6 e3       	ldi	r26, 0x36	; 54
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e6 e3       	ldi	r30, 0x36	; 54
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	88 2f       	mov	r24, r24
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	a9 01       	movw	r20, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_u8GetPinValue+0xce>
 548:	55 95       	asr	r21
 54a:	47 95       	ror	r20
 54c:	8a 95       	dec	r24
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_u8GetPinValue+0xca>
 550:	ca 01       	movw	r24, r20
 552:	81 70       	andi	r24, 0x01	; 1
 554:	8c 93       	st	X, r24
 556:	8c 91       	ld	r24, X
 558:	ed 81       	ldd	r30, Y+5	; 0x05
 55a:	fe 81       	ldd	r31, Y+6	; 0x06
 55c:	80 83       	st	Z, r24
 55e:	2f c0       	rjmp	.+94     	; 0x5be <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_C:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PINC->ByteAccess,Local_u8PinId);
 560:	a3 e3       	ldi	r26, 0x33	; 51
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e3 e3       	ldi	r30, 0x33	; 51
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	28 2f       	mov	r18, r24
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	88 2f       	mov	r24, r24
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	a9 01       	movw	r20, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_u8GetPinValue+0xfe>
 578:	55 95       	asr	r21
 57a:	47 95       	ror	r20
 57c:	8a 95       	dec	r24
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_u8GetPinValue+0xfa>
 580:	ca 01       	movw	r24, r20
 582:	81 70       	andi	r24, 0x01	; 1
 584:	8c 93       	st	X, r24
 586:	8c 91       	ld	r24, X
 588:	ed 81       	ldd	r30, Y+5	; 0x05
 58a:	fe 81       	ldd	r31, Y+6	; 0x06
 58c:	80 83       	st	Z, r24
 58e:	17 c0       	rjmp	.+46     	; 0x5be <DIO_u8GetPinValue+0x140>
        break;
        case DIO_PIN_D:
          *Copy_pu8PinValue = BIT_CALC_GET_BIT(PIND->ByteAccess,Local_u8PinId);
 590:	a0 e3       	ldi	r26, 0x30	; 48
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	e0 e3       	ldi	r30, 0x30	; 48
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	28 2f       	mov	r18, r24
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a9 01       	movw	r20, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_u8GetPinValue+0x12e>
 5a8:	55 95       	asr	r21
 5aa:	47 95       	ror	r20
 5ac:	8a 95       	dec	r24
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_u8GetPinValue+0x12a>
 5b0:	ca 01       	movw	r24, r20
 5b2:	81 70       	andi	r24, 0x01	; 1
 5b4:	8c 93       	st	X, r24
 5b6:	8c 91       	ld	r24, X
 5b8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ba:	fe 81       	ldd	r31, Y+6	; 0x06
 5bc:	80 83       	st	Z, r24
        break;
      }

    }
    return Local_u8Error;
 5be:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5c0:	28 96       	adiw	r28, 0x08	; 8
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	cf 91       	pop	r28
 5ce:	df 91       	pop	r29
 5d0:	08 95       	ret

000005d2 <DIO_u8SetPortDirection>:

// port APIs
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNb, u8  Copy_u8Direction){
 5d2:	df 93       	push	r29
 5d4:	cf 93       	push	r28
 5d6:	00 d0       	rcall	.+0      	; 0x5d8 <DIO_u8SetPortDirection+0x6>
 5d8:	0f 92       	push	r0
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	8a 83       	std	Y+2, r24	; 0x02
 5e0:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT direction           */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 5e2:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8Direction <=DIO_PORT_OUTPUT && Copy_u8Direction >= DIO_PORT_INPUT)){
    Local_u8Error = ERROR_NOK;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	89 83       	std	Y+1, r24	; 0x01
        BIT_CALC_SET_PORT_DIRECTION(PORTD->ByteAccess,Copy_u8Direction);
      break;
    }

  }
  return Local_u8Error;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	08 95       	ret

000005f6 <DIO_u8SetPortnValue>:
u8 DIO_u8SetPortnValue(u8  Copy_u8PortNb, u8  Copy_u8PortValue){
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <DIO_u8SetPortnValue+0x6>
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <DIO_u8SetPortnValue+0x8>
 5fe:	0f 92       	push	r0
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	8a 83       	std	Y+2, r24	; 0x02
 606:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction  : PORT VALUE               */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 608:	19 82       	std	Y+1, r1	; 0x01

    if((Copy_u8PortNb >= DIO_MAXPORTNB) || (Copy_u8PortValue > DIO_PORT_VALUE_MAX || Copy_u8PortValue < DIO_PORT_VALUE_MIN)){
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	84 30       	cpi	r24, 0x04	; 4
 60e:	18 f0       	brcs	.+6      	; 0x616 <DIO_u8SetPortnValue+0x20>
    Local_u8Error = ERROR_NOK;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	32 c0       	rjmp	.+100    	; 0x67a <DIO_u8SetPortnValue+0x84>
  }else{
    switch (Copy_u8PortNb){
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	3d 83       	std	Y+5, r19	; 0x05
 61e:	2c 83       	std	Y+4, r18	; 0x04
 620:	8c 81       	ldd	r24, Y+4	; 0x04
 622:	9d 81       	ldd	r25, Y+5	; 0x05
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	91 05       	cpc	r25, r1
 628:	d1 f0       	breq	.+52     	; 0x65e <DIO_u8SetPortnValue+0x68>
 62a:	2c 81       	ldd	r18, Y+4	; 0x04
 62c:	3d 81       	ldd	r19, Y+5	; 0x05
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	2c f4       	brge	.+10     	; 0x63e <DIO_u8SetPortnValue+0x48>
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	9d 81       	ldd	r25, Y+5	; 0x05
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	61 f0       	breq	.+24     	; 0x654 <DIO_u8SetPortnValue+0x5e>
 63c:	1e c0       	rjmp	.+60     	; 0x67a <DIO_u8SetPortnValue+0x84>
 63e:	2c 81       	ldd	r18, Y+4	; 0x04
 640:	3d 81       	ldd	r19, Y+5	; 0x05
 642:	22 30       	cpi	r18, 0x02	; 2
 644:	31 05       	cpc	r19, r1
 646:	81 f0       	breq	.+32     	; 0x668 <DIO_u8SetPortnValue+0x72>
 648:	8c 81       	ldd	r24, Y+4	; 0x04
 64a:	9d 81       	ldd	r25, Y+5	; 0x05
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	91 05       	cpc	r25, r1
 650:	81 f0       	breq	.+32     	; 0x672 <DIO_u8SetPortnValue+0x7c>
 652:	13 c0       	rjmp	.+38     	; 0x67a <DIO_u8SetPortnValue+0x84>
      case DIO_PORT_A :
        BIT_CALC_SET_PORT_VALUE(PORTA->ByteAccess,Copy_u8PortValue);
 654:	eb e3       	ldi	r30, 0x3B	; 59
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	80 83       	st	Z, r24
 65c:	0e c0       	rjmp	.+28     	; 0x67a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_B:
        BIT_CALC_SET_PORT_VALUE(PORTB->ByteAccess,Copy_u8PortValue);
 65e:	e8 e3       	ldi	r30, 0x38	; 56
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	80 83       	st	Z, r24
 666:	09 c0       	rjmp	.+18     	; 0x67a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_C:
        BIT_CALC_SET_PORT_VALUE(PORTC->ByteAccess,Copy_u8PortValue);
 668:	e5 e3       	ldi	r30, 0x35	; 53
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	80 83       	st	Z, r24
 670:	04 c0       	rjmp	.+8      	; 0x67a <DIO_u8SetPortnValue+0x84>
      break;
      case DIO_PORT_D:
        BIT_CALC_SET_PORT_VALUE(PORTD->ByteAccess,Copy_u8PortValue);
 672:	e2 e3       	ldi	r30, 0x32	; 50
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 67a:	89 81       	ldd	r24, Y+1	; 0x01
}
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	cf 91       	pop	r28
 688:	df 91       	pop	r29
 68a:	08 95       	ret

0000068c <DIO_u8GetPortnValue>:
u8 DIO_u8GetPortnValue(u8  Copy_u8PinNb, u8 *  Copy_pu8PortValue){
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	00 d0       	rcall	.+0      	; 0x692 <DIO_u8GetPortnValue+0x6>
 692:	00 d0       	rcall	.+0      	; 0x694 <DIO_u8GetPortnValue+0x8>
 694:	00 d0       	rcall	.+0      	; 0x696 <DIO_u8GetPortnValue+0xa>
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	8a 83       	std	Y+2, r24	; 0x02
 69c:	7c 83       	std	Y+4, r23	; 0x04
 69e:	6b 83       	std	Y+3, r22	; 0x03
	/*			Copy_u8PortNb    : PORT Number               */
	/* 	 	 	Copy_u8Direction : PORT direction            */
	/*	OUTPUT:                                              */
	/*			return :ERROR STATE                          */
	/*********************************************************/
  u8 Local_u8Error=ERROR_OK;
 6a0:	19 82       	std	Y+1, r1	; 0x01
  if((Copy_u8PinNb >= DIO_MAXPORTNB) ){
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	84 30       	cpi	r24, 0x04	; 4
 6a6:	18 f0       	brcs	.+6      	; 0x6ae <DIO_u8GetPortnValue+0x22>
    Local_u8Error = ERROR_NOK;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	3a c0       	rjmp	.+116    	; 0x722 <DIO_u8GetPortnValue+0x96>
  }else{
    switch (Copy_u8PinNb){
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	3e 83       	std	Y+6, r19	; 0x06
 6b6:	2d 83       	std	Y+5, r18	; 0x05
 6b8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ba:	9e 81       	ldd	r25, Y+6	; 0x06
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	91 05       	cpc	r25, r1
 6c0:	e1 f0       	breq	.+56     	; 0x6fa <DIO_u8GetPortnValue+0x6e>
 6c2:	2d 81       	ldd	r18, Y+5	; 0x05
 6c4:	3e 81       	ldd	r19, Y+6	; 0x06
 6c6:	22 30       	cpi	r18, 0x02	; 2
 6c8:	31 05       	cpc	r19, r1
 6ca:	2c f4       	brge	.+10     	; 0x6d6 <DIO_u8GetPortnValue+0x4a>
 6cc:	8d 81       	ldd	r24, Y+5	; 0x05
 6ce:	9e 81       	ldd	r25, Y+6	; 0x06
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	61 f0       	breq	.+24     	; 0x6ec <DIO_u8GetPortnValue+0x60>
 6d4:	26 c0       	rjmp	.+76     	; 0x722 <DIO_u8GetPortnValue+0x96>
 6d6:	2d 81       	ldd	r18, Y+5	; 0x05
 6d8:	3e 81       	ldd	r19, Y+6	; 0x06
 6da:	22 30       	cpi	r18, 0x02	; 2
 6dc:	31 05       	cpc	r19, r1
 6de:	a1 f0       	breq	.+40     	; 0x708 <DIO_u8GetPortnValue+0x7c>
 6e0:	8d 81       	ldd	r24, Y+5	; 0x05
 6e2:	9e 81       	ldd	r25, Y+6	; 0x06
 6e4:	83 30       	cpi	r24, 0x03	; 3
 6e6:	91 05       	cpc	r25, r1
 6e8:	b1 f0       	breq	.+44     	; 0x716 <DIO_u8GetPortnValue+0x8a>
 6ea:	1b c0       	rjmp	.+54     	; 0x722 <DIO_u8GetPortnValue+0x96>
      case DIO_PORT_A :
        *Copy_pu8PortValue = PINA->ByteAccess;
 6ec:	e9 e3       	ldi	r30, 0x39	; 57
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	eb 81       	ldd	r30, Y+3	; 0x03
 6f4:	fc 81       	ldd	r31, Y+4	; 0x04
 6f6:	80 83       	st	Z, r24
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_B:
        *Copy_pu8PortValue = PINB->ByteAccess;
 6fa:	e6 e3       	ldi	r30, 0x36	; 54
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	eb 81       	ldd	r30, Y+3	; 0x03
 702:	fc 81       	ldd	r31, Y+4	; 0x04
 704:	80 83       	st	Z, r24
 706:	0d c0       	rjmp	.+26     	; 0x722 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_C:
        *Copy_pu8PortValue = PINC->ByteAccess;
 708:	e3 e3       	ldi	r30, 0x33	; 51
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	eb 81       	ldd	r30, Y+3	; 0x03
 710:	fc 81       	ldd	r31, Y+4	; 0x04
 712:	80 83       	st	Z, r24
 714:	06 c0       	rjmp	.+12     	; 0x722 <DIO_u8GetPortnValue+0x96>
      break;
      case DIO_PORT_D:
        *Copy_pu8PortValue = PIND->ByteAccess;
 716:	e0 e3       	ldi	r30, 0x30	; 48
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	eb 81       	ldd	r30, Y+3	; 0x03
 71e:	fc 81       	ldd	r31, Y+4	; 0x04
 720:	80 83       	st	Z, r24
      break;
    }

  }
  return Local_u8Error;
 722:	89 81       	ldd	r24, Y+1	; 0x01
}
 724:	26 96       	adiw	r28, 0x06	; 6
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	cf 91       	pop	r28
 732:	df 91       	pop	r29
 734:	08 95       	ret

00000736 <delay_milliSecond>:
#include "delay_ms_priv.h"




void delay_milliSecond(u32 value){
 736:	df 93       	push	r29
 738:	cf 93       	push	r28
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	2a 97       	sbiw	r28, 0x0a	; 10
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	f8 94       	cli
 744:	de bf       	out	0x3e, r29	; 62
 746:	0f be       	out	0x3f, r0	; 63
 748:	cd bf       	out	0x3d, r28	; 61
 74a:	6f 83       	std	Y+7, r22	; 0x07
 74c:	78 87       	std	Y+8, r23	; 0x08
 74e:	89 87       	std	Y+9, r24	; 0x09
 750:	9a 87       	std	Y+10, r25	; 0x0a


/**************************  OPERATIONS  ****************************/
/*																    */

	value = (u32)value*Milli2Micro;
 752:	8f 81       	ldd	r24, Y+7	; 0x07
 754:	98 85       	ldd	r25, Y+8	; 0x08
 756:	a9 85       	ldd	r26, Y+9	; 0x09
 758:	ba 85       	ldd	r27, Y+10	; 0x0a
 75a:	28 ee       	ldi	r18, 0xE8	; 232
 75c:	33 e0       	ldi	r19, 0x03	; 3
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	bc 01       	movw	r22, r24
 764:	cd 01       	movw	r24, r26
 766:	0e 94 43 04 	call	0x886	; 0x886 <__mulsi3>
 76a:	dc 01       	movw	r26, r24
 76c:	cb 01       	movw	r24, r22
 76e:	8f 83       	std	Y+7, r24	; 0x07
 770:	98 87       	std	Y+8, r25	; 0x08
 772:	a9 87       	std	Y+9, r26	; 0x09
 774:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value - InContext - OutContext - OperationsDelay) ;
 776:	8f 81       	ldd	r24, Y+7	; 0x07
 778:	98 85       	ldd	r25, Y+8	; 0x08
 77a:	a9 85       	ldd	r26, Y+9	; 0x09
 77c:	ba 85       	ldd	r27, Y+10	; 0x0a
 77e:	8d 55       	subi	r24, 0x5D	; 93
 780:	90 40       	sbci	r25, 0x00	; 0
 782:	a0 40       	sbci	r26, 0x00	; 0
 784:	b0 40       	sbci	r27, 0x00	; 0
 786:	8f 83       	std	Y+7, r24	; 0x07
 788:	98 87       	std	Y+8, r25	; 0x08
 78a:	a9 87       	std	Y+9, r26	; 0x09
 78c:	ba 87       	std	Y+10, r27	; 0x0a

	value = (u32)(value / MIC2MILL) ;
 78e:	8f 81       	ldd	r24, Y+7	; 0x07
 790:	98 85       	ldd	r25, Y+8	; 0x08
 792:	a9 85       	ldd	r26, Y+9	; 0x09
 794:	ba 85       	ldd	r27, Y+10	; 0x0a
 796:	28 ee       	ldi	r18, 0xE8	; 232
 798:	33 e0       	ldi	r19, 0x03	; 3
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	bc 01       	movw	r22, r24
 7a0:	cd 01       	movw	r24, r26
 7a2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__udivmodsi4>
 7a6:	da 01       	movw	r26, r20
 7a8:	c9 01       	movw	r24, r18
 7aa:	8f 83       	std	Y+7, r24	; 0x07
 7ac:	98 87       	std	Y+8, r25	; 0x08
 7ae:	a9 87       	std	Y+9, r26	; 0x09
 7b0:	ba 87       	std	Y+10, r27	; 0x0a

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
 7b2:	1b 82       	std	Y+3, r1	; 0x03
 7b4:	1c 82       	std	Y+4, r1	; 0x04
 7b6:	1d 82       	std	Y+5, r1	; 0x05
 7b8:	1e 82       	std	Y+6, r1	; 0x06
 7ba:	20 c0       	rjmp	.+64     	; 0x7fc <delay_milliSecond+0xc6>

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
 7bc:	1a 82       	std	Y+2, r1	; 0x02
 7be:	19 82       	std	Y+1, r1	; 0x01
 7c0:	0c c0       	rjmp	.+24     	; 0x7da <delay_milliSecond+0xa4>
	...
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
			asm("NOP");
 7ce:	00 00       	nop


	for (u32 ii = 0 ; ii < (u32)value ; ii++){

		/* One milli Second loop 									*/
		for (u16 i = 0 ; i < (u16)MAX_TO_1m ; i++){
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	9a 81       	ldd	r25, Y+2	; 0x02
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	9a 83       	std	Y+2, r25	; 0x02
 7d8:	89 83       	std	Y+1, r24	; 0x01
 7da:	89 81       	ldd	r24, Y+1	; 0x01
 7dc:	9a 81       	ldd	r25, Y+2	; 0x02
 7de:	22 e0       	ldi	r18, 0x02	; 2
 7e0:	8e 34       	cpi	r24, 0x4E	; 78
 7e2:	92 07       	cpc	r25, r18
 7e4:	70 f3       	brcs	.-36     	; 0x7c2 <delay_milliSecond+0x8c>

/****************************** LOOP ********************************/
/*																	*/


	for (u32 ii = 0 ; ii < (u32)value ; ii++){
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ea:	ad 81       	ldd	r26, Y+5	; 0x05
 7ec:	be 81       	ldd	r27, Y+6	; 0x06
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	a1 1d       	adc	r26, r1
 7f2:	b1 1d       	adc	r27, r1
 7f4:	8b 83       	std	Y+3, r24	; 0x03
 7f6:	9c 83       	std	Y+4, r25	; 0x04
 7f8:	ad 83       	std	Y+5, r26	; 0x05
 7fa:	be 83       	std	Y+6, r27	; 0x06
 7fc:	2b 81       	ldd	r18, Y+3	; 0x03
 7fe:	3c 81       	ldd	r19, Y+4	; 0x04
 800:	4d 81       	ldd	r20, Y+5	; 0x05
 802:	5e 81       	ldd	r21, Y+6	; 0x06
 804:	8f 81       	ldd	r24, Y+7	; 0x07
 806:	98 85       	ldd	r25, Y+8	; 0x08
 808:	a9 85       	ldd	r26, Y+9	; 0x09
 80a:	ba 85       	ldd	r27, Y+10	; 0x0a
 80c:	28 17       	cp	r18, r24
 80e:	39 07       	cpc	r19, r25
 810:	4a 07       	cpc	r20, r26
 812:	5b 07       	cpc	r21, r27
 814:	98 f2       	brcs	.-90     	; 0x7bc <delay_milliSecond+0x86>

		}

	}

}
 816:	2a 96       	adiw	r28, 0x0a	; 10
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	cf 91       	pop	r28
 824:	df 91       	pop	r29
 826:	08 95       	ret

00000828 <main>:
//#include "delay_ms_interface.h"
#include "DIO_interface.h"

#include "delay_ms_interface.h"

int main(void){
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
 830:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	while(1)
	{
		DIO_u8SetPortnValue(0,0xFE);
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	6e ef       	ldi	r22, 0xFE	; 254
 838:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPortnValue>
		delay_milliSecond(4);
 83c:	64 e0       	ldi	r22, 0x04	; 4
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 9b 03 	call	0x736	; 0x736 <delay_milliSecond>
		DIO_u8SetPortnValue(0,0xFD);
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	6d ef       	ldi	r22, 0xFD	; 253
 84c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPortnValue>
		delay_milliSecond(4);
 850:	64 e0       	ldi	r22, 0x04	; 4
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 9b 03 	call	0x736	; 0x736 <delay_milliSecond>
		DIO_u8SetPortnValue(0,0xFB);
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	6b ef       	ldi	r22, 0xFB	; 251
 860:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPortnValue>
		delay_milliSecond(4);
 864:	64 e0       	ldi	r22, 0x04	; 4
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 9b 03 	call	0x736	; 0x736 <delay_milliSecond>
		DIO_u8SetPortnValue(0,0xF7);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	67 ef       	ldi	r22, 0xF7	; 247
 874:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_u8SetPortnValue>
		delay_milliSecond(4);
 878:	64 e0       	ldi	r22, 0x04	; 4
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 9b 03 	call	0x736	; 0x736 <delay_milliSecond>
 884:	d7 cf       	rjmp	.-82     	; 0x834 <main+0xc>

00000886 <__mulsi3>:
 886:	62 9f       	mul	r22, r18
 888:	d0 01       	movw	r26, r0
 88a:	73 9f       	mul	r23, r19
 88c:	f0 01       	movw	r30, r0
 88e:	82 9f       	mul	r24, r18
 890:	e0 0d       	add	r30, r0
 892:	f1 1d       	adc	r31, r1
 894:	64 9f       	mul	r22, r20
 896:	e0 0d       	add	r30, r0
 898:	f1 1d       	adc	r31, r1
 89a:	92 9f       	mul	r25, r18
 89c:	f0 0d       	add	r31, r0
 89e:	83 9f       	mul	r24, r19
 8a0:	f0 0d       	add	r31, r0
 8a2:	74 9f       	mul	r23, r20
 8a4:	f0 0d       	add	r31, r0
 8a6:	65 9f       	mul	r22, r21
 8a8:	f0 0d       	add	r31, r0
 8aa:	99 27       	eor	r25, r25
 8ac:	72 9f       	mul	r23, r18
 8ae:	b0 0d       	add	r27, r0
 8b0:	e1 1d       	adc	r30, r1
 8b2:	f9 1f       	adc	r31, r25
 8b4:	63 9f       	mul	r22, r19
 8b6:	b0 0d       	add	r27, r0
 8b8:	e1 1d       	adc	r30, r1
 8ba:	f9 1f       	adc	r31, r25
 8bc:	bd 01       	movw	r22, r26
 8be:	cf 01       	movw	r24, r30
 8c0:	11 24       	eor	r1, r1
 8c2:	08 95       	ret

000008c4 <__udivmodsi4>:
 8c4:	a1 e2       	ldi	r26, 0x21	; 33
 8c6:	1a 2e       	mov	r1, r26
 8c8:	aa 1b       	sub	r26, r26
 8ca:	bb 1b       	sub	r27, r27
 8cc:	fd 01       	movw	r30, r26
 8ce:	0d c0       	rjmp	.+26     	; 0x8ea <__udivmodsi4_ep>

000008d0 <__udivmodsi4_loop>:
 8d0:	aa 1f       	adc	r26, r26
 8d2:	bb 1f       	adc	r27, r27
 8d4:	ee 1f       	adc	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	a2 17       	cp	r26, r18
 8da:	b3 07       	cpc	r27, r19
 8dc:	e4 07       	cpc	r30, r20
 8de:	f5 07       	cpc	r31, r21
 8e0:	20 f0       	brcs	.+8      	; 0x8ea <__udivmodsi4_ep>
 8e2:	a2 1b       	sub	r26, r18
 8e4:	b3 0b       	sbc	r27, r19
 8e6:	e4 0b       	sbc	r30, r20
 8e8:	f5 0b       	sbc	r31, r21

000008ea <__udivmodsi4_ep>:
 8ea:	66 1f       	adc	r22, r22
 8ec:	77 1f       	adc	r23, r23
 8ee:	88 1f       	adc	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	1a 94       	dec	r1
 8f4:	69 f7       	brne	.-38     	; 0x8d0 <__udivmodsi4_loop>
 8f6:	60 95       	com	r22
 8f8:	70 95       	com	r23
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	9b 01       	movw	r18, r22
 900:	ac 01       	movw	r20, r24
 902:	bd 01       	movw	r22, r26
 904:	cf 01       	movw	r24, r30
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
